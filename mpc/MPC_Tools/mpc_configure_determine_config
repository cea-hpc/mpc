#!/bin/sh
############################# MPC License ##############################
# Wed Nov 19 15:19:19 CET 2008                                         #
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
#                                                                      #
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
# This file is part of the MPC Runtime.                                #
#                                                                      #
# This software is governed by the CeCILL-C license under French law   #
# and abiding by the rules of distribution of free software.  You can  #
# use, modify and/ or redistribute the software under the terms of     #
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
# following URL http://www.cecill.info.                                #
#                                                                      #
# The fact that you are presently reading this means that you have     #
# had knowledge of the CeCILL-C license and that you accept its        #
# terms.                                                               #
#                                                                      #
# Authors:                                                             #
#   - PERACHE Marc marc.perache@cea.fr                                 #
#                                                                      #
########################################################################
gen_config(){
cat << EOF > ${SCTK_CONF_C}
#define ${SCTK_OS}_SYS
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <limits.h>
#include <semaphore.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <assert.h>
#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
#include <limits.h>
EOF

if test "$MPC_Threads" != "" ; then
cat ${MPC_SOURCE_DIR}MPC_Threads/sctk_thread/sctk_pthread_compatible_structures.h >> ${SCTK_CONF_C}
fi


cat << EOF >> ${SCTK_CONF_C}
#define SCTK_COMPILER "__UNKNOWN_COMPILER"
#define SCTK_STRING __STRING
#define SCTK_STRING_VAL "__STRING(a)"

#if defined(AIX_SYS) && !defined(__GNUC__)
#define __IBM_COMPILER
#undef SCTK_COMPILER
#define SCTK_COMPILER "__IBM_COMPILER"
#endif

#if defined(SunOS_SYS) || defined(AIX_SYS) || defined(HP_UX_SYS) || !defined(Linux_SYS)
#undef SCTK_STRING
#undef SCTK_STRING_VAL
#define SCTK_STRING(EX) #EX
#define SCTK_STRING_VAL "#a"
#endif

#if defined(SunOS_SYS) && !defined(__GNUC__)
#define __SUN_COMPILER
#undef SCTK_COMPILER
#define SCTK_COMPILER "__SUN_COMPILER"
#endif

#if defined(OSF1_SYS) && (defined (__DECCXX) || defined (__DECC) || defined (__decc))
#define __DEC_COMPILER
#undef SCTK_COMPILER
#define SCTK_COMPILER "__DEC_COMPILER"
#endif

#if defined(IRIX64_SYS) && (defined(SGI_CC) || defined(_SGI_SOURCE))
#define __SGI_COMPILER
#undef SCTK_COMPILER
#define SCTK_COMPILER "__SGI_COMPILER"
#endif

#if !defined(__INTEL_COMPILER) && defined(__GNUC__)
#define __GNU_COMPILER
#undef SCTK_COMPILER
#define SCTK_COMPILER "__GNU_COMPILER"
#endif

#if defined(__INTEL_COMPILER)
#undef SCTK_COMPILER
#define SCTK_COMPILER "__INTEL_COMPILER"
#endif

extern int sctk_only_once_while_val;
extern FILE *std_output;


#define sctk_title(name) fprintf(std_output,"\n/* %s */\n",SCTK_STRING(name))
#define sctk_subtitle(name) fprintf(std_output,"\n/* %s */\n",SCTK_STRING(name))
#define sctk_define(val) fprintf(std_output,"#define %s\n",SCTK_STRING(val))
#define sctk_print(name,val) fprintf(std_output,"#define %s %s\n",SCTK_STRING(name),SCTK_STRING(val))
#define sctk_size(name) fprintf(std_output,"#define sctk_sizeof_%s %ld\n",SCTK_STRING(name),(long)(sizeof(name)))

static void
sctk_opac_type_func (size_t orig_t_size, char *orig_t_char, char *t_char)
{
  long _____obj_size;
  long _____init_obj_size;
  _____init_obj_size = (long) (orig_t_size);
  _____obj_size = ((_____init_obj_size / ((long) sizeof (int))));
  if (_____init_obj_size % ((long) sizeof (int)))
    abort ();
  fprintf (std_output, "/*Real size %ld of %s*/\n", (long) orig_t_size,
           orig_t_char);
  if (_____init_obj_size == (long) sizeof (int))
    {
      fprintf (std_output, "typedef int %s;\n", t_char);
      fprintf (std_output, "#define %s_is_contiguous\n", t_char);
      fprintf (std_output, "#define %s_is_contiguous_int\n", t_char);
    }
  else
    {
      if (_____init_obj_size == (long) sizeof (long))
        {
          fprintf (std_output, "typedef long %s;\n", t_char);
          fprintf (std_output, "#define %s_is_contiguous\n", t_char);
          fprintf (std_output, "#define %s_is_contiguous_long\n", t_char);
        }
      else
        {
          fprintf (std_output, "typedef struct {long word_long[%ld];",
                   ((_____init_obj_size / ((long) sizeof (long)))));

          if ((_____init_obj_size -
               (((_____init_obj_size / ((long) sizeof (long)))) *
                sizeof (long))) / sizeof (int) != 0)
            fprintf (std_output, "int word_int[%ld];",
                     (_____init_obj_size -
                      (((_____init_obj_size / ((long) sizeof (long)))) *
                       sizeof (long))) / sizeof (int));

          fprintf (std_output, "} %s;\n", t_char);
        }
    }
}

#define sctk_opac_type(orig_t,t) sctk_opac_type_func(sizeof(orig_t),SCTK_STRING(orig_t),SCTK_STRING(t))
#define sctk_def_opac_type(orig_t,t,def_size) sctk_opac_type_func(def_size,SCTK_STRING(orig_t),SCTK_STRING(t))

static void
sctk_opac_init_func (void *init, size_t orig_t_size, char *t_char)
{
  long _____obj_size;
  long _____init_obj_size;
  int i;

  _____init_obj_size = (long) (orig_t_size);
  _____obj_size = ((_____init_obj_size / ((long) sizeof (int))));
  if (_____init_obj_size % ((long) sizeof (int)))
    abort ();

  if (_____init_obj_size == (long) sizeof (int))
    {
      fprintf (std_output, "#define %s %d\n", t_char, ((int *) init)[0]);
    }
  else
    {
      if (_____init_obj_size == (long) sizeof (long))
        {
          fprintf (std_output, "#define %s %ld\n", t_char,
                   ((long *) init)[0]);
        }
      else
        {
          long *tmp_init;
          int *tmp_init_2;
          fprintf (std_output, "#define %s {{", t_char);
          tmp_init = (long *) init;
          for (i = 0; i < ((_____init_obj_size / ((long) sizeof (long))));
               i++)
            {
              if (i != 0)
                fprintf (std_output, ",");
              fprintf (std_output, "%ld", *tmp_init);
              tmp_init++;
            }
          tmp_init_2 = (int *) tmp_init;
          fprintf (std_output, "}");
          if ((_____init_obj_size -
               (((_____init_obj_size / ((long) sizeof (long)))) *
                sizeof (long))) / sizeof (int) != 0)
            {
              fprintf (std_output, ",{");
              for (i = 0;
                   i <
                   (_____init_obj_size -
                    (((_____init_obj_size / ((long) sizeof (long)))) *
                     sizeof (long))) / sizeof (int); i++)
                {
                  if (i != 0)
                    fprintf (std_output, ",");
                  fprintf (std_output, "%d", *tmp_init_2);
                  tmp_init_2++;
                }
              fprintf (std_output, "}");
            }
          fprintf (std_output, "}\n");
        }
    }
}

#define sctk_opac_init(orig_t,t,tt) do{                         \
    tt ____tmp = orig_t;                                        \
    sctk_opac_init_func(&____tmp,sizeof(tt),SCTK_STRING(t));    \
  }while(sctk_only_once_while_val)
#define sctk_def_opac_init(orig_t,t,tt) do{             \
    void* ____tmp;                                      \
    ____tmp =  malloc(tt);                              \
    memset(____tmp,0,tt);                               \
    sctk_opac_init_func(____tmp,tt,SCTK_STRING(t));     \
    free(____tmp);                                      \
  }while(sctk_only_once_while_val)

#define sctk_define_arg(val,arg) fprintf(std_output,"#define %s %ld\n",SCTK_STRING(val),(long)(arg))
#define sctk_define_arg_ndef(val,arg) fprintf(std_output,"#define %s %ld /*WARN: Not really defined*/\n",SCTK_STRING(val),(long)(arg))
#define sctk_define_arg_ptr(val,arg) fprintf(std_output,"#define %s (void*)%ld\n",SCTK_STRING(val),(long)(arg))

int sctk_only_once_while_val = 0;
FILE* std_output;

void gen_signals(){
    int nsig;

#if defined(NSIG)
    nsig = NSIG;
#elif defined(_NSIG)
    nsig = _NSIG;
#else
    nsig = (sizeof(sigset_t)*8);
    if (nsig < 32)
        nsig = 32;
#endif
    fprintf(std_output, "#define SCTK_NSIG %d\n", nsig);
}

void
compiler ()
{
sctk_title (Compiler:);
  fprintf (std_output, "#ifndef __SCTK_ASM_C_\n");
  fprintf (std_output, "#ifndef %s\n", SCTK_COMPILER);
  fprintf (std_output, "#define %s\n", SCTK_COMPILER);
  fprintf (std_output, "#endif\n");
  fprintf (std_output, "#define %s %s\n", SCTK_STRING (SCTK_COMPILER),
	   SCTK_COMPILER);
  fprintf (std_output, "#endif\n");
  if ((strcmp (SCTK_COMPILER, "__GNU_COMPILER") == 0) || (strcmp (SCTK_COMPILER, "__INTEL_COMPILER")))
    {
      fprintf (std_output, "#define %s\n",
	       SCTK_STRING (SCTK_COMPILER_ACCEPT_ASM));
    }
  else
    {
      fprintf (std_output, "#define  __attribute__(x)\n");
    }
}

typedef void* void_p;

void
common_types ()
{
sctk_title (Sizes:);
  sctk_size (char);
  sctk_size (short);
  sctk_size (int);
  sctk_size (float);
  sctk_size (long);
  sctk_size (double);
  sctk_size (size_t);
  fprintf (std_output, "#define sctk_sizeof_%s %ld\n", "void_p",
	   (long) (sizeof (void *)));

#ifdef SCTK_HAVE_LONG_LONG
  fprintf (std_output, "#define sctk_sizeof_%s %ld\n", "long_long",
	   (long) (sizeof (long long)));

  fprintf (std_output, "#define sctk_long_long long long\n");
#else
  fprintf (std_output, "#define sctk_long_long long\n");
#endif

  fprintf (std_output, "#define %s %ld\n", SCTK_STRING (SCTK_WORD_SIZE),
	   (long) (8 * sizeof (long)));
  fprintf (std_output, "#define SCTK_%ld_BIT_ARCH\n",
	   (long) (8 * sizeof (long)));
}

void
tools ()
{
sctk_title (Tools:);
  fprintf (std_output, "#define %s(a) %s\n", SCTK_STRING (SCTK_STRING),
	   SCTK_STRING_VAL);
#ifdef __SUN_COMPILER
  fprintf (std_output, "#define %s \"unknown\" \n",
	   SCTK_STRING (SCTK_FUNCTION));
#else
#if (__GNUC__ > 3) || (__GNUC__ == 3 && __GNUC_MINOR__ > 0)
  fprintf (std_output, "#define %s __func__\n", SCTK_STRING (SCTK_FUNCTION));
#else
  fprintf (std_output, "#define %s __FUNCTION__\n",
	   SCTK_STRING (SCTK_FUNCTION));
#endif
#endif
}

void
aligment ()
{
    void *a,*b;
    long aligne;
sctk_title (Alignement:);
    a = malloc(4096);
    b = malloc(4096);
    aligne = (long)b - (long)a - 4096;
    if(!((aligne == 2)   ||
           (aligne == 4)   ||
           (aligne == 8)   ||
           (aligne == 16)  ||
           (aligne == 32)  ||
           (aligne == 64)  ||
           (aligne == 128))){
           aligne = 16;
  }
  fprintf (std_output, "#define %s %ld\n", SCTK_STRING (SCTK_ALIGNEMENT),
	   aligne);
}
void
libraries ()
{
}

void
memory ()
{
sctk_title (Memory:);
  if (sizeof (long) == 4)
    {
      fprintf (std_output,
	       "#define SCTK_MAX_MEMORY_SIZE ((unsigned long)%lu)\n",(
	       (unsigned long) ((unsigned long) 2 * (unsigned long) 1024 *
				(unsigned long) 1024 * (unsigned long) 1024)) - 1024);
      fprintf (std_output,
	       "#define SCTK_MAX_MEMORY_OFFSET ((unsigned long)%lu)\n",
	       (unsigned long) (128 * 1024 * 1024));
    }
  else
    {
      fprintf (std_output,
	       "#define SCTK_MAX_MEMORY_SIZE ((unsigned long)%lu)\n",(
	       (unsigned long) (((unsigned long) 1024 * 48) *
				(unsigned long) 1024 * (unsigned long) 1024 *
				(unsigned long) 1024)) - 1024);
      fprintf (std_output,
	       "#define SCTK_MAX_MEMORY_OFFSET ((unsigned long)%lu)\n",
	       (unsigned long) ((unsigned long) 1024 * (unsigned long) 1024 *
				(unsigned long) 1024 * (unsigned long) 2));
    }
      fprintf (std_output,
	       "#define SCTK_PAGE_SIZE ((unsigned long)%lu)\n",getpagesize());
}


void
barrier_init ()
{
#ifdef MPC_Threads
sctk_subtitle (Pthread barrier compatibility:);
#ifdef SCTK_USE_PTHREAD_BARRIER
  sctk_opac_type (pthread_barrierattr_t, sctk_thread_barrierattr_t);
  sctk_opac_type (pthread_barrier_t, sctk_thread_barrier_t);
  sctk_define_arg (SCTK_THREAD_BARRIER_SERIAL_THREAD,
		   PTHREAD_BARRIER_SERIAL_THREAD);
#else
  fprintf (std_output, "/*WARN: Not really defined*/\n");
  sctk_def_opac_type (pthread_barrierattr_t, sctk_thread_barrierattr_t,
		      sizeof (sctk_ethread_barrierattr_t));
  sctk_def_opac_type (pthread_barrier_t, sctk_thread_barrier_t,
		      sizeof (sctk_ethread_barrier_t));
  sctk_define_arg_ndef (SCTK_THREAD_BARRIER_SERIAL_THREAD, -1);
  fprintf (std_output, "#define SCTK_THREAD_MPC_ONLY_BARRIER\n");
#endif
#endif
}

void
spinlock_init ()
{
#ifdef MPC_Threads
sctk_subtitle (Pthread spinlock compatibility:);
#ifdef SCTK_USE_PTHREAD_SPINLOCK
  sctk_opac_type (pthread_spinlock_t, sctk_thread_spinlock_t);
#else
  fprintf (std_output, "/*WARN: Not really defined*/\n");
  sctk_def_opac_type (pthread_spinlock_t, sctk_thread_spinlock_t,
		      sizeof (sctk_spinlock_t));
  fprintf (std_output, "#define SCTK_THREAD_MPC_ONLY_SPINLOCK\n");
#endif
#endif
}

void
rwlock_init ()
{
#ifdef MPC_Threads
sctk_subtitle (Pthread rwlock compatibility:);
#ifdef SCTK_USE_PTHREAD_RWLOCK
  sctk_opac_type (pthread_rwlockattr_t, sctk_thread_rwlockattr_t);
  sctk_opac_type (pthread_rwlock_t, sctk_thread_rwlock_t);

#if defined PTHREAD_RWLOCK_INITIALIZER
  sctk_opac_init (PTHREAD_RWLOCK_INITIALIZER,
		  SCTK_THREAD_RWLOCK_INITIALIZER, pthread_rwlock_t);
#endif

#else
  fprintf (std_output, "/*WARN: Not really defined*/\n");
  sctk_def_opac_type (pthread_rwlockattr_t, sctk_thread_rwlockattr_t,
		      (sizeof (sctk_ethread_rwlockattr_t)));
  sctk_def_opac_type (pthread_rwlock_t, sctk_thread_rwlock_t,
		      (sizeof (sctk_ethread_rwlock_t)));
  sctk_def_opac_init (PTHREAD_RWLOCK_INITIALIZER,
		      SCTK_THREAD_RWLOCK_INITIALIZER,
		      sizeof (sctk_ethread_rwlock_t));
  fprintf (std_output, "#define SCTK_THREAD_MPC_ONLY_RWLOCK\n");
#endif
#endif
}

void
key_init ()
{
#ifdef MPC_Threads
#ifndef SCTK_USE_PTHREAD_KEYS_MAX
  int PTHREAD_KEYS_MAX = 0;
#endif
sctk_subtitle (Pthread keys compatibility:);
#ifndef SCTK_USE_PTHREAD_KEYS_MAX
  do
    {
      int i;
      pthread_key_t k;

      fprintf (std_output, "/*WARN: Not really defined*/\n");
      /*Pthread key max determination */
      for (i = 0; i < 4096; i++)
	{
	  if (pthread_key_create (&k, NULL) != 0)
	    break;
	}
      PTHREAD_KEYS_MAX = i;
    }
  while (0);
#endif
  sctk_define_arg (SCTK_THREAD_KEYS_MAX, PTHREAD_KEYS_MAX);
  sctk_opac_type (pthread_key_t, sctk_thread_key_t);
#endif
}

void
mutex_init ()
{
#ifdef MPC_Threads
sctk_subtitle (Pthread mutex compatibility:);
  sctk_opac_type (pthread_mutex_t, sctk_thread_mutex_t);
  sctk_opac_init (PTHREAD_MUTEX_INITIALIZER,
		  SCTK_THREAD_MUTEX_INITIALIZER, pthread_mutex_t);
  sctk_opac_type (pthread_mutexattr_t, sctk_thread_mutexattr_t);
#ifdef SCTK_USE_PTHREAD_MUTEX_REC
  sctk_define_arg (SCTK_THREAD_MUTEX_NORMAL, PTHREAD_MUTEX_NORMAL);
  sctk_define_arg (SCTK_THREAD_MUTEX_RECURSIVE, PTHREAD_MUTEX_RECURSIVE);
  sctk_define_arg (SCTK_THREAD_MUTEX_ERRORCHECK, PTHREAD_MUTEX_ERRORCHECK);
  sctk_define_arg (SCTK_THREAD_MUTEX_DEFAULT, PTHREAD_MUTEX_DEFAULT);
#else
  sctk_define_arg_ndef (SCTK_THREAD_MUTEX_NORMAL, 0);
  sctk_define_arg_ndef (SCTK_THREAD_MUTEX_RECURSIVE, 1);
  sctk_define_arg_ndef (SCTK_THREAD_MUTEX_ERRORCHECK, 2);
  sctk_define_arg_ndef (SCTK_THREAD_MUTEX_DEFAULT, 0);
#endif
#endif
}


void
sem_init_func ()
{
sctk_subtitle (Pthread semaphores compatibility:);
  sctk_opac_type (sem_t, sctk_thread_sem_t);
  sctk_define_arg (SCTK_SEM_FAILED, SEM_FAILED);
#ifdef SEM_VALUE_MAX
  sctk_define_arg (SCTK_SEM_VALUE_MAX, SEM_VALUE_MAX);
#else
  sctk_define_arg (SCTK_SEM_VALUE_MAX, 2147483647);
#endif
}

void
cond_init ()
{
sctk_subtitle (Pthread conditions compatibility:);
  sctk_opac_type (pthread_condattr_t, sctk_thread_condattr_t);
  sctk_opac_type (pthread_cond_t, sctk_thread_cond_t);
  sctk_opac_init (PTHREAD_COND_INITIALIZER,
		  SCTK_THREAD_COND_INITIALIZER, pthread_cond_t);

}

void
once_init_func ()
{
sctk_subtitle (Pthread once compatibility:);
  sctk_opac_type (pthread_once_t, sctk_thread_once_t);
  sctk_opac_init (PTHREAD_ONCE_INIT, SCTK_THREAD_ONCE_INIT, pthread_once_t);
}

void
pth_attr_init ()
{
sctk_subtitle (Pthread attr compatibility:);
  sctk_opac_type (pthread_attr_t, sctk_thread_attr_t);

  sctk_define_arg (SCTK_THREAD_CREATE_JOINABLE, PTHREAD_CREATE_JOINABLE);
  sctk_define_arg (SCTK_THREAD_CREATE_DETACHED, PTHREAD_CREATE_DETACHED);
  sctk_define_arg (SCTK_THREAD_INHERIT_SCHED, PTHREAD_INHERIT_SCHED);
  sctk_define_arg (SCTK_THREAD_EXPLICIT_SCHED, PTHREAD_EXPLICIT_SCHED);
  sctk_define_arg (SCTK_THREAD_SCOPE_SYSTEM, PTHREAD_SCOPE_SYSTEM);
  sctk_define_arg (SCTK_THREAD_SCOPE_PROCESS, PTHREAD_SCOPE_PROCESS);
  sctk_define_arg (SCTK_THREAD_PROCESS_PRIVATE, PTHREAD_PROCESS_PRIVATE);
  sctk_define_arg (SCTK_THREAD_PROCESS_SHARED, PTHREAD_PROCESS_SHARED);
  sctk_define_arg (SCTK_THREAD_CANCEL_ENABLE, PTHREAD_CANCEL_ENABLE);
  sctk_define_arg (SCTK_THREAD_CANCEL_DISABLE, PTHREAD_CANCEL_DISABLE);
  sctk_define_arg (SCTK_THREAD_CANCEL_DEFERRED, PTHREAD_CANCEL_DEFERRED);
  sctk_define_arg (SCTK_THREAD_CANCEL_ASYNCHRONOUS,
		   PTHREAD_CANCEL_ASYNCHRONOUS);
  sctk_define_arg_ptr (SCTK_THREAD_CANCELED, PTHREAD_CANCELED);
  sctk_define_arg (SCTK_SCHED_OTHER, SCHED_OTHER);
  sctk_define_arg (SCTK_SCHED_RR, SCHED_RR);
  sctk_define_arg (SCTK_SCHED_FIFO, SCHED_FIFO);
  sctk_define_arg (SCTK_O_CREAT, O_CREAT);
  sctk_define_arg (SCTK_O_EXCL, O_EXCL);
}


void
errors_val ()
{
sctk_title (Error values:);
  sctk_define_arg (SCTK_ESRCH, ESRCH);
  sctk_define_arg (SCTK_EINVAL, EINVAL);
  sctk_define_arg (SCTK_EDEADLK, EDEADLK);
  sctk_define_arg (SCTK_ENOTSUP, ENOTSUP);
  sctk_define_arg (SCTK_EPERM, EPERM);
  sctk_define_arg (SCTK_EBUSY, EBUSY);
  sctk_define_arg (SCTK_EAGAIN, EAGAIN);
  sctk_define_arg (SCTK_ESRCH, ESRCH);
  sctk_define_arg (SCTK_ENOSPC, ENOSPC);
  sctk_define_arg (SCTK_ENOENT, ENOENT);
  sctk_define_arg (SCTK_EINTR, EINTR);
  sctk_define_arg (SCTK_ETIMEDOUT, ETIMEDOUT);
  sctk_define_arg (SCTK_ENOSYS, ENOSYS);
  sctk_define_arg (SCTK_EOVERFLOW, EOVERFLOW);
  sctk_define_arg (SCTK_ENAMETOOLONG, ENAMETOOLONG);
  sctk_define_arg (SCTK_EEXIST, EEXIST);
  sctk_define_arg (SCTK_EACCES, EACCES);
  sctk_define_arg (SCTK_ENOMEM, ENOMEM);
}


int main(int argc, char **argv)
{
    std_output = fopen("include/sctk_config.h","a");

  sctk_title(Tools:);
  fprintf(std_output,"#define %s(a) %s\n",SCTK_STRING(SCTK_STRING),SCTK_STRING_VAL);
#ifdef __SUN_COMPILER
  fprintf(std_output,"#define %s \"unknown\" \n",SCTK_STRING(SCTK_FUNCTION));
#else
#if (__GNUC__ > 3) || (__GNUC__ == 3 && __GNUC_MINOR__ > 0)
  fprintf(std_output,"#define %s __func__\n",SCTK_STRING(SCTK_FUNCTION));
#else
  fprintf(std_output,"#define %s __FUNCTION__\n",SCTK_STRING(SCTK_FUNCTION));
#endif
#endif

compiler ();
common_types ();
aligment ();
sctk_title (Pthread compatibility:);
  fprintf (std_output,
	   "/*We use int in order to deal with data alignment*/\n");
  fprintf (std_output, "typedef void* sctk_thread_t;\n");

  mutex_init ();
  sem_init_func ();
  cond_init ();
  barrier_init ();
  spinlock_init ();
  rwlock_init ();
  key_init ();
  once_init_func ();
  pth_attr_init ();


#ifdef PTHREAD_STACK_MIN
  sctk_define_arg (SCTK_THREAD_STACK_MIN, PTHREAD_STACK_MIN);
#else
  fprintf (std_output, "#define %s %d\n", SCTK_STRING (SCTK_THREAD_STACK_MIN),
	   8192);
#endif



  errors_val ();
  libraries ();
  memory ();
  gen_signals();
  fclose( std_output);
  return 0;
}
EOF
}

SCTK_POSIX_CHECK_FUNCS_PTR(){
    for i in $1 ; do

cat  << EOF  > ${SCTK_CONF_C}
#include <signal.h>
#include <pthread.h>
#include <semaphore.h>
#include <sched.h>

int main(){
    void* tmp;
    tmp = (void*)$i;
    return 0;
}
EOF
	echo "" >> ${SCTK_POSIX_CHECK_FUNCS_RES_FILE}
	echo "/* Define to 1 if you have the '$i' function. */" >> ${SCTK_POSIX_CHECK_FUNCS_RES_FILE}
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then
	    result yes
	    echo "#define $2 1" >> ${SCTK_POSIX_CHECK_FUNCS_RES_FILE}
	else
	    result "no (fail to find address of $i)"
	    echo "/* #undef $2 */" >> ${SCTK_POSIX_CHECK_FUNCS_RES_FILE}
	fi
    done
}

SCTK_POSIX_CHECK_FUNCS(){
    for i in $1 ; do
	SCTK_MSG_CHECKING $i

cat  << EOF  > ${SCTK_CONF_C}
int $i ();

int main(){
    $i ();
    return 0;
}
EOF
	echo "" >> ${SCTK_POSIX_CHECK_FUNCS_RES_FILE}
	echo "/* Define to 1 if you have the '$i' function. */" >> ${SCTK_POSIX_CHECK_FUNCS_RES_FILE}
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then
	    SCTK_POSIX_CHECK_FUNCS_PTR $i $2
	else
	    result no
	    echo "/* #undef $2 */" >> ${SCTK_POSIX_CHECK_FUNCS_RES_FILE}
	fi
    done
}

gen_pthread_config(){
###############################################################################################
# PTHREAD compatibility
###############################################################################################
begin_section "Check POSIX threads compatibility"
SCTK_POSIX_CHECK_FUNCS_RES_FILE="include/sctk_config_pthread.h"
cat << EOF > ${SCTK_POSIX_CHECK_FUNCS_RES_FILE}
/* sctk_config_pthread.h.  Generated from $0.  */
EOF
SCTK_POSIX_CHECK_FUNCS pthread_yield HAVE_PTHREAD_YIELD
SCTK_POSIX_CHECK_FUNCS pthread_atfork HAVE_PTHREAD_ATFORK
SCTK_POSIX_CHECK_FUNCS pthread_attr_destroy HAVE_PTHREAD_ATTR_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_attr_getdetachstate HAVE_PTHREAD_ATTR_GETDETACHSTATE
SCTK_POSIX_CHECK_FUNCS pthread_attr_getguardsize HAVE_PTHREAD_ATTR_GETGUARDSIZE
SCTK_POSIX_CHECK_FUNCS pthread_attr_getinheritsched HAVE_PTHREAD_ATTR_GETINHERITSCHED
SCTK_POSIX_CHECK_FUNCS pthread_attr_getschedparam HAVE_PTHREAD_ATTR_GETSCHEDPARAM
SCTK_POSIX_CHECK_FUNCS pthread_attr_getschedpolicy HAVE_PTHREAD_ATTR_GETSCHEDPOLICY
SCTK_POSIX_CHECK_FUNCS pthread_attr_getscope HAVE_PTHREAD_ATTR_GETSCOPE
SCTK_POSIX_CHECK_FUNCS pthread_attr_getstack HAVE_PTHREAD_ATTR_GETSTACK
SCTK_POSIX_CHECK_FUNCS pthread_attr_getstackaddr HAVE_PTHREAD_ATTR_GETSTACKADDR
SCTK_POSIX_CHECK_FUNCS pthread_attr_getstacksize HAVE_PTHREAD_ATTR_GETSTACKSIZE
SCTK_POSIX_CHECK_FUNCS pthread_attr_init HAVE_PTHREAD_ATTR_INIT
SCTK_POSIX_CHECK_FUNCS pthread_attr_setdetachstate HAVE_PTHREAD_ATTR_SETDETACHSTATE
SCTK_POSIX_CHECK_FUNCS pthread_attr_setguardsize HAVE_PTHREAD_ATTR_SETGUARDSIZE
SCTK_POSIX_CHECK_FUNCS pthread_attr_setinheritsched HAVE_PTHREAD_ATTR_SETINHERITSCHED
SCTK_POSIX_CHECK_FUNCS pthread_attr_setschedparam HAVE_PTHREAD_ATTR_SETSCHEDPARAM
SCTK_POSIX_CHECK_FUNCS pthread_attr_setschedpolicy HAVE_PTHREAD_ATTR_SETSCHEDPOLICY
SCTK_POSIX_CHECK_FUNCS pthread_attr_setscope HAVE_PTHREAD_ATTR_SETSCOPE
SCTK_POSIX_CHECK_FUNCS pthread_attr_setstack HAVE_PTHREAD_ATTR_SETSTACK
SCTK_POSIX_CHECK_FUNCS pthread_attr_setstackaddr HAVE_PTHREAD_ATTR_SETSTACKADDR
SCTK_POSIX_CHECK_FUNCS pthread_attr_setstacksize HAVE_PTHREAD_ATTR_SETSTACKSIZE
SCTK_POSIX_CHECK_FUNCS pthread_barrier_destroy HAVE_PTHREAD_BARRIERATTR_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_barrier_init HAVE_PTHREAD_BARRIER_INIT
SCTK_POSIX_CHECK_FUNCS pthread_barrier_wait HAVE_PTHREAD_BARRIER_WAIT
SCTK_POSIX_CHECK_FUNCS pthread_barrierattr_destroy HAVE_PTHREAD_BARRIERATTR_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_barrierattr_getpshared HAVE_PTHREAD_BARRIERATTR_GETPSHARED
SCTK_POSIX_CHECK_FUNCS pthread_barrierattr_init HAVE_PTHREAD_BARRIERATTR_INIT
SCTK_POSIX_CHECK_FUNCS pthread_barrierattr_setpshared HAVE_PTHREAD_BARRIERATTR_SETPSHARED
SCTK_POSIX_CHECK_FUNCS pthread_cancel HAVE_PTHREAD_CANCEL
SCTK_POSIX_CHECK_FUNCS pthread_cond_broadcast HAVE_PTHREAD_COND_BROADCAST
SCTK_POSIX_CHECK_FUNCS pthread_cond_destroy HAVE_PTHREAD_COND_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_cond_init HAVE_PTHREAD_COND_INIT
SCTK_POSIX_CHECK_FUNCS pthread_cond_signal HAVE_PTHREAD_COND_SIGNAL
SCTK_POSIX_CHECK_FUNCS pthread_cond_timedwait HAVE_PTHREAD_COND_TIMEDWAIT
SCTK_POSIX_CHECK_FUNCS pthread_cond_wait HAVE_PTHREAD_COND_WAIT
SCTK_POSIX_CHECK_FUNCS pthread_condattr_destroy HAVE_PTHREAD_CONDATTR_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_condattr_getclock HAVE_PTHREAD_CONDATTR_GETCLOCK
SCTK_POSIX_CHECK_FUNCS pthread_condattr_getpshared HAVE_PTHREAD_CONDATTR_GETPSHARED
SCTK_POSIX_CHECK_FUNCS pthread_condattr_init HAVE_PTHREAD_CONDATTR_INIT
SCTK_POSIX_CHECK_FUNCS pthread_condattr_setclock HAVE_PTHREAD_CONDATTR_SETCLOCK
SCTK_POSIX_CHECK_FUNCS pthread_condattr_setpshared HAVE_PTHREAD_CONDATTR_SETPSHARED
SCTK_POSIX_CHECK_FUNCS pthread_create HAVE_PTHREAD_CREATE
SCTK_POSIX_CHECK_FUNCS pthread_detach HAVE_PTHREAD_DETACH
SCTK_POSIX_CHECK_FUNCS pthread_equal HAVE_PTHREAD_EQUAL
SCTK_POSIX_CHECK_FUNCS pthread_exit HAVE_PTHREAD_EXIT
SCTK_POSIX_CHECK_FUNCS pthread_getconcurrency HAVE_PTHREAD_GETCONCURRENCY
SCTK_POSIX_CHECK_FUNCS pthread_getcpuclockid HAVE_PTHREAD_GETCPUCLOCKID
SCTK_POSIX_CHECK_FUNCS pthread_getschedparam HAVE_PTHREAD_GETSCHEDPARAM
SCTK_POSIX_CHECK_FUNCS pthread_getspecific HAVE_PTHREAD_GETSPECIFIC
SCTK_POSIX_CHECK_FUNCS pthread_join HAVE_PTHREAD_JOIN
SCTK_POSIX_CHECK_FUNCS pthread_key_create HAVE_PTHREAD_KEY_CREATE
SCTK_POSIX_CHECK_FUNCS pthread_key_delete HAVE_PTHREAD_KEY_DELETE
SCTK_POSIX_CHECK_FUNCS pthread_mutex_destroy HAVE_PTHREAD_MUTEX_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_mutex_getprioceiling HAVE_PTHREAD_MUTEX_GETPRIOCEILING
SCTK_POSIX_CHECK_FUNCS pthread_mutex_init HAVE_PTHREAD_MUTEX_INIT
SCTK_POSIX_CHECK_FUNCS pthread_mutex_lock HAVE_PTHREAD_MUTEX_LOCK
SCTK_POSIX_CHECK_FUNCS pthread_mutex_setprioceiling HAVE_PTHREAD_MUTEX_SETPRIOCEILING
SCTK_POSIX_CHECK_FUNCS pthread_mutex_timedlock HAVE_PTHREAD_MUTEX_TIMEDLOCK
SCTK_POSIX_CHECK_FUNCS pthread_mutex_trylock HAVE_PTHREAD_MUTEX_TRYLOCK
SCTK_POSIX_CHECK_FUNCS pthread_mutex_unlock HAVE_PTHREAD_MUTEX_UNLOCK
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_destroy HAVE_PTHREAD_MUTEXATTR_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_getprioceiling HAVE_PTHREAD_MUTEXATTR_GETPRIOCEILING
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_getprotocol HAVE_PTHREAD_MUTEXATTR_GETPROTOCOL
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_getpshared HAVE_PTHREAD_MUTEXATTR_GETPSHARED
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_gettype HAVE_PTHREAD_MUTEXATTR_GETTYPE
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_init HAVE_PTHREAD_MUTEXATTR_INIT
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_setprioceiling HAVE_PTHREAD_MUTEXATTR_SETPRIOCEILING
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_setprotocol HAVE_PTHREAD_MUTEXATTR_SETPROTOCOL
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_setpshared HAVE_PTHREAD_MUTEXATTR_SETPSHARED
SCTK_POSIX_CHECK_FUNCS pthread_mutexattr_settype HAVE_PTHREAD_MUTEXATTR_SETTYPE
SCTK_POSIX_CHECK_FUNCS pthread_once HAVE_PTHREAD_ONCE
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_destroy HAVE_PTHREAD_RWLOCK_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_init HAVE_PTHREAD_RWLOCK_INIT
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_rdlock HAVE_PTHREAD_RWLOCK_RDLOCK
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_timedrdlock HAVE_PTHREAD_RWLOCK_TIMEDRDLOCK
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_timedwrlock HAVE_PTHREAD_RWLOCK_TIMEDWRLOCK
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_tryrdlock HAVE_PTHREAD_RWLOCK_TRYRDLOCK
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_trywrlock HAVE_PTHREAD_RWLOCK_TRYWRLOCK
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_unlock HAVE_PTHREAD_RWLOCK_UNLOCK
SCTK_POSIX_CHECK_FUNCS pthread_rwlock_wrlock HAVE_PTHREAD_RWLOCK_WRLOCK
SCTK_POSIX_CHECK_FUNCS pthread_rwlockattr_destroy HAVE_PTHREAD_RWLOCKATTR_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_rwlockattr_getpshared HAVE_PTHREAD_RWLOCKATTR_GETPSHARED
SCTK_POSIX_CHECK_FUNCS pthread_rwlockattr_init HAVE_PTHREAD_RWLOCKATTR_INIT
SCTK_POSIX_CHECK_FUNCS pthread_rwlockattr_setpshared HAVE_PTHREAD_RWLOCKATTR_SETPSHARED
SCTK_POSIX_CHECK_FUNCS pthread_self HAVE_PTHREAD_SELF
SCTK_POSIX_CHECK_FUNCS pthread_setcancelstate HAVE_PTHREAD_SETCANCELSTATE
SCTK_POSIX_CHECK_FUNCS pthread_setcanceltype HAVE_PTHREAD_SETCANCELTYPE
SCTK_POSIX_CHECK_FUNCS pthread_setconcurrency HAVE_PTHREAD_SETCONCURRENCY
SCTK_POSIX_CHECK_FUNCS pthread_setschedparam HAVE_PTHREAD_SETSCHEDPARAM
SCTK_POSIX_CHECK_FUNCS pthread_setschedprio HAVE_PTHREAD_SETSCHEDPRIO
SCTK_POSIX_CHECK_FUNCS pthread_setspecific HAVE_PTHREAD_SETSPECIFIC
SCTK_POSIX_CHECK_FUNCS pthread_spin_destroy HAVE_PTHREAD_SPIN_DESTROY
SCTK_POSIX_CHECK_FUNCS pthread_spin_init HAVE_PTHREAD_SPIN_INIT
SCTK_POSIX_CHECK_FUNCS pthread_spin_lock HAVE_PTHREAD_SPIN_LOCK
SCTK_POSIX_CHECK_FUNCS pthread_spin_trylock HAVE_PTHREAD_SPIN_TRYLOCK
SCTK_POSIX_CHECK_FUNCS pthread_spin_unlock HAVE_PTHREAD_SPIN_UNLOCK
SCTK_POSIX_CHECK_FUNCS pthread_testcancel HAVE_PTHREAD_TESTCANCEL
SCTK_POSIX_CHECK_FUNCS sem_init HAVE_SEM_INIT
SCTK_POSIX_CHECK_FUNCS sem_wait HAVE_SEM_WAIT
SCTK_POSIX_CHECK_FUNCS sem_trywait HAVE_SEM_TRYWAIT
SCTK_POSIX_CHECK_FUNCS sem_post HAVE_SEM_POST
SCTK_POSIX_CHECK_FUNCS sem_getvalue HAVE_SEM_GETVALUE
SCTK_POSIX_CHECK_FUNCS sem_destroy HAVE_SEM_DESTROY
SCTK_POSIX_CHECK_FUNCS sem_open HAVE_SEM_OPEN
SCTK_POSIX_CHECK_FUNCS sem_close HAVE_SEM_CLOSE
SCTK_POSIX_CHECK_FUNCS sem_unlink HAVE_SEM_UNLINK
SCTK_POSIX_CHECK_FUNCS sem_timedwait HAVE_SEM_TIMEDWAIT
SCTK_POSIX_CHECK_FUNCS pthread_sigmask HAVE_PTHREAD_SIGMASK
SCTK_POSIX_CHECK_FUNCS pthread_kill HAVE_PTHREAD_KILL
SCTK_POSIX_CHECK_FUNCS sched_get_priority_max HAVE_SCHED_GET_PRIORITY_MAX
SCTK_POSIX_CHECK_FUNCS sched_get_priority_min HAVE_SCHED_GET_PRIORITY_MIN


end_section
echo ""
begin_section "Check NON PORTABLE POSIX threads compatibility"
SCTK_POSIX_CHECK_FUNCS pthread_getattr_np HAVE_PTHREAD_GETATTR_NP
echo ""
end_section
}
