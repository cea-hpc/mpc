#!/bin/sh
############################# MPC License ############################## 
# Wed Nov 19 15:19:19 CET 2008                                         # 
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          # 
#                                                                      # 
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            # 
# This file is part of the MPC Runtime.                                # 
#                                                                      # 
# This software is governed by the CeCILL-C license under French law   # 
# and abiding by the rules of distribution of free software.  You can  # 
# use, modify and/ or redistribute the software under the terms of     # 
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     # 
# following URL http://www.cecill.info.                                # 
#                                                                      # 
# The fact that you are presently reading this means that you have     # 
# had knowledge of the CeCILL-C license and that you accept its        # 
# terms.                                                               # 
#                                                                      # 
# Authors:                                                             # 
#   - PERACHE Marc marc.perache@cea.fr                                 # 
#   - CARRIBAULT Patrick patrick.carribault@cea.fr                     # 
#                                                                      # 
######################################################################## 

#
# Generate the main MPC compiler driver
#
# $1: target script (e.g., mpc_cc) 
# $2: target language (c, c++ or fortran)
#
printf_compiler(){

# Header
echo "#!/bin/sh" > $1
header_sh >> $1


# For Fortran, generate a small object w/ main routine
if test "$2" = "fortran" ; then 
cat <<EOF >> $1
FORTRAN_START="/tmp/tmp_mpc_fotran_\$\$.f"
FORTRAN_OBJ="/tmp/tmp_mpc_fotran_\$\$.o"

#echo "\$FORTRAN_START \$FORTRAN_OBJ"

cat <<THIS_EOF > \$FORTRAN_START
! ############################# MPC License ##############################
! # Wed Nov 19 15:19:19 CET 2008                                         #
! # Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
! #                                                                      #
! # IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
! # This file is part of the MPC Runtime.                                #
! #                                                                      #
! # This software is governed by the CeCILL-C license under French law   #
! # and abiding by the rules of distribution of free software.  You can  #
! # use, modify and/ or redistribute the software under the terms of     #
! # the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
! # following URL http://www.cecill.info.                                #
! #                                                                      #
! # The fact that you are presently reading this means that you have     #
! # had knowledge of the CeCILL-C license and that you accept its        #
! # terms.                                                               #
! #                                                                      #
! # Authors:                                                             #
! #   - PERACHE Marc marc.perache@cea.fr                                 #
! #   - CARRIBAULT Patrick patrick.carribault@cea.fr                     #
! ########################################################################
      subroutine mpc_user_main_
      call mpc_user_main()
      end

      program main
      call mpc_start()
      call exit(0)
      end
THIS_EOF
EOF
fi

# CFlags and FFlags
if test "$2" = "fortran" ; then 
cat <<EOF >> $1
FFLAGS="$SCTK_FFLAGS"
MPC_COMPILER_CFLAGS=
EOF
else
cat <<EOF >> $1
FFLAGS=
MPC_COMPILER_CFLAGS="$MPC_COMPILER_CFLAGS"
EOF
fi

#Check for use of -fmpc-privatize (must not be enable for *_default compiler wrappers)
#Maybe need some discutions to work with new icc support of privatization
case "`basename $1`" in
	*_default)
		use_mpc_privat="false"
		;;
	*)
		use_mpc_privat="true"
		;;
esac
use_mpc_privat="true"

# Regular flags and compiler (C, C++ or fortran)
if test ! -z "${BINUTILS_PREFIX_INSTALL}" && test "$use_mpc_privat" = "true"
then
cat <<EOF >> $1
CFLAGS="\`$SCTK_BIN_DIR/mpc_cflags $2\`"
LDFLAGS="\`$SCTK_BIN_DIR/mpc_ldflags $2\` -B$BINUTILS_PREFIX_INSTALL/bin"
CC=$CC
EOF
else
cat <<EOF >> $1
CFLAGS="\`$SCTK_BIN_DIR/mpc_cflags $2\`"
LDFLAGS="\`$SCTK_BIN_DIR/mpc_ldflags $2\`"
CC=$CC
EOF
fi


# More variable definitions (Library path, show and different shades of args)
cat << EOF >> $1
LIB_PATH="-Wl,-rpath,$SCTK_LIB_DIR ${LIB_PATH}"
if test "\$MPC_MAKEFILE" != "" ; then 
LIB_PATH=""
fi

# This variable is updated to 'echo' when '-show' is active
Show=eval

# Do we have to link eventually?
linking=yes

# All args concerning the compiling process (w/out mpc_cc-related options)
allargs=""

# Name of the output filename if the option '-o' is set
output_filename=""
output_file=""
next_arg_is_output=no
EOF

#
# For loop on the input arguments
#
cat << EOF >> $1
for arg in "\$@" ; do
    # Set addarg to no if this arg should be ignored by the C compiler
    addarg=yes
    qarg=\$arg
EOF

cat << EOF >> $1
    # Only valid if addarg is set to 'yes'
    addarg_cpp=yes
    addarg_opp=no

    if [ \$next_arg_is_output = yes ] ; then
      output_filename=\$qarg
      next_arg_is_output=no

      allargs="\$allargs \$qarg"
      continue
    fi

EOF

#
# '-c' option
#
cat << EOF >> $1
    case \$arg in
        # ----------------------------------------------------------------
        # Compiler options that affect whether we are linking or not
    -c)
    # The compiler links by default
    linking=no
EOF

#
# Others option involving processing the input files
# -S, -E, -M or -MM
#
cat << EOF >> $1
    ;;
    -S|-E|-M|-MM)
    # The compiler links by default
    linking=no
EOF

cat << EOF >> $1
    ;;

    -cc=*)
    CC=\`echo A\$arg | sed -e 's/A-cc=//g'\`
    addarg=no
    MPC_COMPILER_CFLAGS=""
    ;;

EOF

cat << EOF >> $1

    -o)
    next_arg_is_output=yes
    addarg_cpp=no
    ;;

EOF

cat << EOF >> $1

    -threads)
    \$CFLAGS="\$CFLAGS -threads"
    ;;

EOF

cat << EOF >> $1

    -show)
    addarg=no
    Show=echo
    ;;

    # Verbose mode
    -v)
    # Pass this argument to the pre-compiler/compiler as well.
    echo "mpc_cc for \$MPC_VERSION"
EOF


cat << EOF >> $1
    ;;

    # Help
    -help)
    ;;
        # -----------------------------------------------------------------
        # Other arguments.  We are careful to handle arguments with
        # quotes (we try to quote all arguments in case they include
        # any spaces)
    *\"*)
    qarg="'"\$arg"'"
    ;;
    *\'*)
    qarg='\"'"\$arg"'\"'
    ;;
    *)
    ;;

    esac

    # Update compiler arguments
    if [ \$addarg = yes ] ; then
        allargs="\$allargs \$qarg"
EOF

cat << EOF >> $1
    fi
EOF

cat << EOF >> $1
done

CFLAGS="\$CFLAGS \$MPC_COMPILER_CFLAGS"
EOF

cat <<EOF >> $1

if [ "\$linking" = yes ] ; then
EOF

if test "$2" = "fortran" ; then 
cat <<EOF >> $1
    \$Show \$CC \$FFLAGS \$CFLAGS -c \$FORTRAN_START -o \$FORTRAN_OBJ
    rc=\$?
    if test "\$rc" != "0" ; then 
        exit \$rc
    fi
EOF
fi

if test "$2" = "fortran" ; then 
cat <<EOF >> $1
    \$Show \$CC \$LIB_PATH \$FORTRAN_OBJ \$LDFLAGS \$FFLAGS \$CFLAGS \$allargs \$LDFLAGS 
    rc=\$?
    if test "\$rc" != "0" ; then 
        exit \$rc
    fi
EOF
else
if test "$3" = "global" ; then 
cat <<EOF >> $1
    if test "\${output_filename}" = "" ; then 
        output_filename="./a.out"
    fi
    global_local_args=""
    global_local_args_redefine="no"
    for global_local_args_i in \$allargs; do 

        if test "\$global_local_args_redefine" = "yes" ; then 
            global_local_args_redefine="no"
            global_local_args_i=""
        fi

        if test "\$global_local_args_i" = "-o" ; then 
            global_local_args_redefine="yes"
            global_local_args_i=""
        fi
        global_local_args="\$global_local_args \$global_local_args_i"
    done
    \$Show \$CC \$LIB_PATH \$LDFLAGS \$CFLAGS \$global_local_args \$LDFLAGS -fpic -shared -o lib\`basename \${output_filename}\`.so
    global_local_args=""
    global_local_args_redefine="no"
    global_local_args_skip="no"
    for global_local_args_i in \$allargs; do 

        if test "\`basename -- \$global_local_args_i .o\`" != "\`basename -- \$global_local_args_i\`" ; then 
            global_local_args_skip="yes"
        fi

        if test "\$global_local_args_skip" = "no" ; then 
        global_local_args="\$global_local_args \$global_local_args_i"
        fi
        global_local_args_skip="no"
    done

    global_dir_lib="\`dirname \${output_filename}\`"
    
    \$Show \$CC -L\$global_dir_lib -Wl,-rpath=\$global_dir_lib -l\`basename \${output_filename}\` \$LIB_PATH \$LDFLAGS \$global_local_args \$CFLAGS  \$LDFLAGS 
    rc=\$?
EOF
else
cat <<EOF >> $1
    \$Show \$CC \$LIB_PATH \$LDFLAGS \$CFLAGS \$allargs \$LDFLAGS 
    # The first \$LDFLAGS should be removed, but still some issues... 
    # \$Show \$CC \$LIB_PATH \$CFLAGS \$allargs \$LDFLAGS 
    rc=\$?
EOF
fi
fi

if test "$2" = "fortran" ; then 
cat <<EOF >> $1
    rm \$FORTRAN_OBJ
EOF
fi

cat <<EOF >> $1
else
EOF
if test "$2" = "fortran" ; then 
cat <<EOF >> $1
    \$Show \$CC \$FFLAGS \$CFLAGS \$allargs
    rc=\$?
EOF
else
if test "$3" = "global" ; then 
cat <<EOF >> $1
    \$Show \$CC \$CFLAGS \$allargs -fpic 
    rc=\$?
EOF
else
cat <<EOF >> $1
    \$Show \$CC \$CFLAGS \$allargs
    rc=\$?
EOF
fi
fi
cat <<EOF >> $1
fi

EOF

if test "$2" = "fortran" ; then 
cat <<EOF >> $1
rm -f \$FORTRAN_START > /dev/null 2>&1 
EOF
fi 

cat << EOF >> $1

exit \$rc

EOF

chmod 755 $1

} # end of printf_compiler()

GNU_PRIVATIZE="-fmpc-privatize"
INTEL_PRIVATIZE="-mSYMTAB_mpc_privatize"
#USAGE print_specfific_compiler output_file privatization_option wait_to_launch_compiler compiler_name
print_specfific_compiler(){
# Header
echo "#!/bin/sh" > $1
header_sh >> $1

if test "$4" = "intel"; then
cat <<EOF >> $1
ADD_FLAG_PRIVATIZE="$2"
EOF
else
if test "${COMPILER_LIST}" != "" ; then
cat <<EOF >> $1
ADD_FLAG_PRIVATIZE="$2"
EOF
else
cat <<EOF >> $1
ADD_FLAG_PRIVATIZE=""
EOF
fi
fi
cat <<EOF >> $1
COMPILER_ARGS=""

for i in \$@ ; do
    CURRENT_ARG="\$i"
    if test "\$i" = "-fmpc-privatize" ; then
        ADD_FLAG_PRIVATIZE="$2"
        CURRENT_ARG=""
    fi
    if test "\$i" = "-fno-mpc-privatize" ; then
        ADD_FLAG_PRIVATIZE=""
        CURRENT_ARG=""
    fi
    if test "\$i" = "-fnompc-privatize" ; then
        ADD_FLAG_PRIVATIZE=""
        CURRENT_ARG=""
    fi
    COMPILER_ARGS="\$COMPILER_ARGS \$CURRENT_ARG"
done

EOF
if test "$4" = "intel"; then
cat <<EOF >> $1
MPC_USE_INTEL_COMPILER=1
export MPC_USE_INTEL_COMPILER
EOF
fi
cat <<EOF >> $1

$SCTK_BIN_DIR/$3 \$ADD_FLAG_PRIVATIZE \$COMPILER_ARGS

EOF

}

DEFAULT_VERSION=""
if test "${COMPILER_LIST}" != "" ; then
  for i in ${COMPILER_LIST} ; do
    if test "${DEFAULT_VERSION}" = "" ; then
      DEFAULT_VERSION="${i}"
    fi

    #
    # Generate C compiler
    #
    begin_section Generate C Compiler: mpc_cc_$i
      CC="${SCTK_PREFIX}/mpc-gcc-$i/bin/mpc-gcc_$i"
      if test "${SCTK_ARCH}" = "x86_64" ; then
	LIB_PATH="-Wl,-rpath,${SCTK_PREFIX}/mpc-gcc-$i/lib64"
      else
	LIB_PATH="-Wl,-rpath,${SCTK_PREFIX}/mpc-gcc-$i/lib"
      fi
      printf_compiler bin/mpc_cc_${i} c
    end_section

    #
    # Generate C compiler (for global linking)
    #
    begin_section Generate C Compiler: mpc_cc_global_$i
      printf_compiler bin/mpc_cc_global_$i c global
    end_section

    #
    # Generate C++ compiler
    #
    begin_section Generate C++ Compiler: mpc_cxx_${i}
      CC="${SCTK_PREFIX}/mpc-gcc-$i/bin/mpc-g++_$i"
      printf_compiler bin/mpc_cxx_${i} c++
    end_section

    #
    # Generate Fortran compiler
    #
    if test "$SCTK_FORTRAN" = "1" ; then 
      begin_section Generate Fortran77 Compiler: mpc_f77_${i}
	CC="${SCTK_PREFIX}/mpc-gcc-$i/bin/mpc-gfortran_$i"
	printf_compiler bin/mpc_f77_${i} fortran
      end_section
    fi

  done
else
DEFAULT_VERSION="default"
fi

# Generate default C compiler
begin_section Generate Default C Compiler: mpc_cc_default
  CC="$SCTK_CC"
  LIB_PATH=""
  printf_compiler bin/mpc_cc_default c
end_section


# Generate dafault C compiler (for global linking)
begin_section Generate Default C Compiler: mpc_cc_global_default
  CC="$SCTK_CC"
  LIB_PATH=""
  printf_compiler bin/mpc_cc_global_default c global
end_section

# Create the link to the default compiler
rm -f bin/mpc_cc_global
ln -s mpc_cc_global_${DEFAULT_VERSION} bin/mpc_cc_global
print_specfific_compiler bin/mpc_gcc $GNU_PRIVATIZE mpc_cc_${DEFAULT_VERSION}
print_specfific_compiler bin/mpc_icc $INTEL_PRIVATIZE "mpc_cc_default -cc=icc" intel

# Create the link to the default compiler
rm -f bin/mpc_cc
ln -s mpc_gcc bin/mpc_cc

# Generate C++ compiler
begin_section Generate Default C++ Compiler: mpc_cxx_default
  CC="$SCTK_CXX"
  LIB_PATH=""
  printf_compiler bin/mpc_cxx_default c++
end_section

# Create the link to the default compiler
print_specfific_compiler bin/mpc_g++ $GNU_PRIVATIZE mpc_cxx_${DEFAULT_VERSION}
print_specfific_compiler bin/mpc_icpc $INTEL_PRIVATIZE "mpc_cxx_default -cc=icpc" intel
rm -f bin/mpc_cxx
ln -s mpc_g++ bin/mpc_cxx

#
# Generate Fortran compiler
#
if test "$SCTK_FORTRAN" = "1" ; then 
  begin_section Generate Default Fortran77 Compiler: mpc_f77_default
    CC="$SCTK_F77"
    printf_compiler bin/mpc_f77_default fortran
  end_section

  # Create the link to the default compiler

  print_specfific_compiler bin/mpc_gfortran $GNU_PRIVATIZE mpc_f77_${DEFAULT_VERSION}
  print_specfific_compiler bin/mpc_ifort $INTEL_PRIVATIZE "mpc_f77_default -cc=ifort" intel
  rm -f bin/mpc_f77
  ln -s mpc_gfortran bin/mpc_f77
fi
