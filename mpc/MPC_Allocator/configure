#!/bin/sh
############################# MPC License ##############################
# Wed Nov 19 15:19:19 CET 2008                                         #
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
#                                                                      #
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
# This file is part of the MPC Runtime.                                #
#                                                                      #
# This software is governed by the CeCILL-C license under French law   #
# and abiding by the rules of distribution of free software.  You can  #
# use, modify and/ or redistribute the software under the terms of     #
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
# following URL http://www.cecill.info.                                #
#                                                                      #
# The fact that you are presently reading this means that you have     #
# had knowledge of the CeCILL-C license and that you accept its        #
# terms.                                                               #
#                                                                      #
# Authors:                                                             #
#   - Valat SÃ©bastien sebastien.valat@cea.fr                           #
#                                                                      #
########################################################################

######################################################
# This script provide a simple wrapper to cmake to fix
# the missing --help equivalent to autotools. And it
# may be more intuitive for users to use the well
# known ./configure & make & make install procedure.

######################################################
#script setup
PROJECT_NAME='MPC_Allocator'
# State variables
PREFIX='-DCMAKE_INSTALL_PREFIX=/usr/local'
CMAKE='cmake'
EXTRA_CXX=''
EXTRA_CXXFLAGS=''
EXTRA_LDFLAGS=''
EXTRA_CC=''
EXTRA_CFLAGS=''
BUILD_TYPE='Release'
#features
ENABLE_DISPLAY_COMMAND='false'
ENABLE_GCC_COVERAGE=''
ENABLE_RPATH=''
DISABLE_VALGRIND=''
DISABLE_TESTS=''
LIB_SUFFIX=''
HWLOC_PREFIX=''
OPENPA_PREFIX=''

######################################################
#Find default source dir
SOURCE_DIR="`dirname \"$0\"`"

######################################################
HELP_MESSAGE="'configure' is a cmake wrapper to build ${PROJECT_NAME}
For more control, prefer to use cmake directely, this wrapper only aims
to ease your life for standard cases.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --srcdir=DIR        find the sources in DIR [configure dir or '${SOURCE_DIR}']

Installation directories:
   --prefix=PREFIX         install files in PREFIX [${PREFIX}]
   --lib-suffix=SUFFIX     used to force suffix for lib directory. [empty].

By default, 'make install' will install all the files in
'/usr/local/bin', '/usr/local/lib' etc.  You can specify
an installation prefix other than '/usr/local' using '--prefix',
for instance '--prefix=$HOME'.

Optional Features:
   --enable-debug          Enable debugging support (-DCMAKE_BUILD_TYPE=Debug).
   --enable-rpath          Enable usage of rpath when at link time (-DENABLE_RPATH=yes).
   --enable-gcc-coverage   Enable GCC option to generate test coverage of the lib.
   --disable-tests         Disable unit tests of the lib (-DDISABLE_UNIT_TESTS=yes).
   --disable-valgrind      Disable valgrind (memcheck) support even if valgrind.h exists.

To find libs and commands :
   --with-cmake={command}  Define the cmake command to use [cmake].
   --with-hwloc={prefix}   Define the hwloc prefix if available [/usr].
   --with-openpa={prefix}  Define the OpenPA prefix [/usr].

To get the generated cmake command :
   --show                  Display the cmake command and didn't execute it.

Some influential environment variables:
   LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
               nonstandard directory <lib dir>
   CXX         C++ compiler command
   CXXFLAGS    C++ compiler flags"

######################################################
#Function to extract value from args. It split on equals
#Params :
#  $1 : user argument with option
#  $2 : Option (--prefix)
get_arg_value()
{
	echo "$1" | sed -e "s/^$2=//g"
}

######################################################
#Convert enable/disable options into yes/no status
#  $1 : user arguement (--enable-.... or --disable-....)
#  $2 : Optional argument. Use value INVERT to permut yes/no mapping.
enabl_disabl_to_yes_no()
{
	case "$1" in
		--enable-*)
			if [ "$2" = 'INVERT' ]; then echo 'no'; else echo 'yes'; fi
			;;
		--disable-*)
			if [ "$2" = 'INVERT' ]; then echo 'yes'; else echo 'no'; fi
			;;
		*)
			echo "Invalid value in enabl_disabl_to_yes_no(), require --disable-* or --enable-*." 1>&2
			echo 'unknown'
			;;
	esac
}

######################################################
#parse arguments
for arg in "$@"
do
	case "$arg" in
		-h | --help)
			echo "$HELP_MESSAGE"
			exit 0
			;;
		--prefix=*)
			PREFIX="-DCMAKE_INSTALL_PREFIX=`get_arg_value \"$arg\" --prefix`"
			;;
		--srcdir=*)
			SOURCE_DIR="`get_arg_value \"$arg\" --srcdir`"
			;;
		--lib-suffix=*)
			LIB_SUFFIX="`get_arg_value \"$arg\" --lib-suffix`"
			if [ ! -z "${LIB_SUFFIX}" ]; then LIB_SUFFIX="-DLIB_SUFFIX=${LIB_SUFFIX}"; fi
			;;
		--with-cmake=*)
			CMAKE="`get_arg_value \"$arg\" --with-cmake`"
			;;
		--with-hwloc=*)
			HWLOC_PREFIX="-DHWLOC_PREFIX=`get_arg_value \"$arg\" --with-hwloc`"
			;;
		--with-openpa=*)
			OPENPA_PREFIX="-DOPENPA_PREFIX=`get_arg_value \"$arg\" --with-openpa`"
			;;
		--enable-debug)
			BUILD_TYPE='Debug'
			;;
		--enable-gcc-coverage)
			ENABLE_GCC_COVERAGE='-O0 -fprofile-arcs -ftest-coverage';
			BUILD_TYPE='Debug'
			;;
		--disable-tests | --enable-tests)
			DISABLE_TESTS="-DDISABLE_UNIT_TESTS=`enabl_disabl_to_yes_no $arg 'INVERT'`";
			;;
		--enable-valgrind | --disable-valgrind)
			DISABLE_VALGRIND="-DDISABLE_VALGRIND=`enabl_disabl_to_yes_no $arg 'INVERT'`";
			;;
		--enable-rpath | --disable-rpath)
			ENABLE_RPATH="-DENABLE_RPATH=`enabl_disabl_to_yes_no $arg`";
			;;
		--show)
			ENABLE_DISPLAY_COMMAND='true'
			;;
		CC=*)
			EXTRA_CC="`get_arg_value \"$arg\" CC`"
			;;
		CFLAGS=*)
			EXTRA_CFLAGS="`get_arg_value \"$arg\" CFLAGS`"
			;;
		CXX=*)
			EXTRA_CXX="`get_arg_value \"$arg\" CXX`"
			;;
		CXXFLAGS=*)
			EXTRA_CXXFLAGS="`get_arg_value \"$arg\" CXXFLAGS`"
			;;
		LDFLAGS=*)
			EXTRA_LDFLAGS="`get_arg_value \"$arg\" LDFLAGS`"
			;;
		*)
			echo "Invalid argument : $arg, please check in --help." 1>&2
			exit 1
			;;
	esac
done

######################################################
#Check current directory
if [ -f 'CMakeLists.txt' ] && [ -f 'configure' ]; then
	echo "ERROR : CMake isn't adapted to support build directely in source"
	echo "directory. Prefer to create a subdirectory to build."
	echo ""
	echo "Example : mkdir build && cd build && ../configure"
	exit 1
fi

######################################################
#apply coverage options
if [ ! -z "$ENABLE_GCC_COVERAGE" ]; then
	EXTRA_CXXFLAGS="${EXTRA_CXXFLAGS} ${ENABLE_GCC_COVERAGE}"
	EXTRA_LDFLAGS="${EXTRA_LDFLAGS} ${ENABLE_GCC_COVERAGE}"
fi

######################################################
#Gen CC/CXX/LDFLAGS commands
if [ ! -z "$EXTRA_CC" ];       then EXTRA_CC="-DCMAKE_C_COMPILER=${EXTRA_CC}"                 ; fi
if [ ! -z "$EXTRA_CFLAGS" ];   then EXTRA_CFLAGS="-DCMAKE_C_FLAGS=${EXTRA_CFLAGS}"            ; fi
if [ ! -z "$EXTRA_CXX" ];      then EXTRA_CXX="-DCMAKE_CXX_COMPILER=${EXTRA_CXX}"             ; fi
if [ ! -z "$EXTRA_CXXFLAGS" ]; then EXTRA_CXXFLAGS="-DCMAKE_CXX_FLAGS=${EXTRA_CXXFLAGS}"      ; fi
if [ ! -z "$EXTRA_LDFLAGS" ];  then EXTRA_LDFLAGS="-DCMAKE_EXE_LINKER_FLAGS=${EXTRA_LDFLAGS}" ; fi

######################################################
#Function to gen clean command
#Params : {command} [args...]
gen_clean_command()
{
	res=""
	for tmp in "$@"
	do
		if [ ! -z "${tmp}" ]; then
			res="${res} '${tmp}'"
		fi
	done
	echo "${res}"
}

######################################################
#Gen final command
COMMAND="`gen_clean_command "${CMAKE}" "-DCMAKE_BUILD_TYPE=${BUILD_TYPE}" "${PREFIX}" \
	"${EXTRA_CC}" "${EXTRA_CFLAGS}" "${EXTRA_CXX}" "${EXTRA_CXXFLAGS}" "${EXTRA_LDFLAGS}" "${ENABLE_RPATH}" \
	"${DISABLE_TESTS}" "${LIB_SUFFIX}" "${HWLOC_PREFIX}" "${OPENPA_PREFIX}" "${ENABLE_RPATH}" "${DISABLE_VALGRIND}" "${SOURCE_DIR}"`"

######################################################
#execute or display
if [ "${ENABLE_DISPLAY_COMMAND}" = 'true' ]; then
	echo "${COMMAND}"
else
	echo ">>${COMMAND}"
	eval "${COMMAND}"
	exit $?
fi
