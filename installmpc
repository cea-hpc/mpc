#!/bin/sh

# Path to the configure script
SCRIPT=$(readlink -f "$0")
# Directory containing configure
SCRIPTPATH=$(dirname "$SCRIPT")
# Where MPC is currently being BUILT
PROJECT_BUILD_DIR=$(readlink -f $PWD)

USE_COLOR="yes"

####################
# BUILD PARAMETERS #
####################

# NOTE: these are only meaningfull when not using spack

AUTOPRIV_BUILD_PARAMETERS=""
OPENPA_BUILD_PARAMETERS=""
MPCALLOC_BUILD_PARAMETERS=""
LIBXML2_BUILD_PARAMETERS="--without-zlib --without-python"
HWLOC_BUILD_PARAMETERS="--disable-werror --enable-static"
HYDRA_BUILD_PARAMETERS=""
MPC_DMTCP_BUILD_PARAMETERS="--enable-pthread-mutex-wrappers"
MPC_GDB_BUILD_PARAMETERS="--without-zlib --disable-werror"


# Stop on error
set -e



#
# Utilities
#

#
# Output MGT
#


# Print an error message and exit
# Args:
# -$1 : Message to print
die(){
	echo "================ ERROR ================"
	echo "$1"
	echo "======================================="
	exit 1
}

#
# Output helpers
#
if test "x$USE_COLOR" = "xyes"; then
colRESET="\e[0m"
colGRAY="\e[90m"
colRED="\e[31m"
colGREEN="\e[32m"
colMAGENTA="\e[35m"
colYELLOW="\e[33m"

colbgGRAY="\e[100m"
colbgMAGENTA="\e[45m"
colbgYELLOW="\e[43m"
colbgRED="\e[41m"
colbgGREEN="\e[42m"

BLINK="\e[5m"
UNDERLINE="\e[4m"
fi

PENDING_LB=""
STEP_WRAPPER_VERBOSE=0

show_run_cmd()
{
	if test $STEP_WRAPPER_VERBOSE -gt 0; then
		test -n "${PENDING_LB}" && echo ""
		PENDING_LB=""
		echo "$ $@"
	fi
}

info()
{
	printf "${colbgGRAY}==>${colRESET}${colGRAY} $1${colRESET}\n"
}

LAST_RESULT=""

checking()
{
	LAST_RESULT=""
	PENDING_LB="yes"
	printf "${colbgMAGENTA}==>${colRESET}${colMAGENTA} $1... ${colRESET}"
}

ok()
{
	PENDING_LB=""
	LAST_RESULT="ok"
	if test $STEP_WRAPPER_VERBOSE -eq 0; then
		printf "${colGREEN}SUCCESS${colRESET}\n"
	fi
}

nok()
{
	PENDING_LB=""
	LAST_RESULT="nok"
	printf "${UNDERLINE}${colBLINK}${colRED}FAIL${colRESET}\n"
}

skip()
{
	PENDING_LB=""
	LAST_RESULT="skip"
	printf "${UNDERLINE}${colBLINK}${colYELLOW}SKIPPED${colRESET}\n"
}

notapplicable()
{
	PENDING_LB=""
	LAST_RESULT="na"
	printf "${colbgGRAY}NA${colRESET}\n"
}

#
# Check for common commands
#

LIST_OF_FOUND_CMD=""
COMMON_CMD="cmake spack patch cut ls pwd grep rm rev basename dirname make bzip2 gcc g++ ldd pkg-config mktemp"
check_for_commands()
{
	# Check already done
	test -n "$LIST_OF_FOUND_CMD" && return

	show_run_cmd "type which"
	# First check for which
	type which > /dev/null 2>&1 || die "MPC cannot compile without the 'which' command"

	set +e

	for c in $COMMON_CMD; do

		show_run_cmd "which $c"
		which $c > /dev/null 2>&1

		if test "x$?" = "x0"; then
			LIST_OF_FOUND_CMD="$LIST_OF_FOUND_CMD $c"
		else
			checking "locate '$c' command in PATH"
			nok
		fi


	done
	set -e
}

have_cmd()
{
	set +e

	echo "$LIST_OF_FOUND_CMD" | grep $1 > /dev/null 2>&1

	if test "x$?" = "x0"; then
		HAVE_CMD="yes"
	else
		HAVE_CMD="no"
	fi

	set -e
}

assert_cmd()
{
	check_for_commands

	have_cmd "$1"

	if test "x${HAVE_CMD}" = "xno"; then
		checking "cmake is in path"
		nok
		die "$1 could not be found in path"
	fi

}

#Extract parameter value and put in given variable
#Args :
# -$1 : Output variable name
# -$2 : parameter name (without --, eg. --with-XXX => 'with-XXX')
# -$3 : User value (--with-XXX=blablable)
extractParamValue()
{
	#extract in local vars
	outputvar="$1"
	name="$2"
	arg="$3"

	value=`echo "$arg" | sed -e "s/^--${name}=//g"`
	eval "${outputvar}=\"${value}\""
}

######################################################
#Extract parameter value and put in given variable
#Args :
# -$1 : Output variable name
# -$2 : parameter name (without -, eg. -XXX)
# -$3 : User value (-XXX=value)
extractParamValueAlt()
{
	#extract in local vars
	outputvar="$1"
	name="$2"
	arg="$3"

	value=`echo "$arg" | sed -e "s/^-${name}//g"`
	eval "${outputvar}=\"${value}\""
}

# Set a var to a value if not already set
#args :
# -$1 : output variable name
# -$2 : value triggering a set
# -$3 : value to set
enableParamIfNot()
{
	#extract in local vars
	outputvar="$1"
	output="$2"
	trigger="$3"
	value="$4"

	if [ "${output}" = "${trigger}" ]
	then
		eval "${outputvar}=\"${value}\""
	fi
}

#Extract parameter value and put in given variable
#Args :
# -$1 : Output variable name
# -$2 : parameter prefix (eg --libxml2-XXXX to add --XXX to libxml2 params)
# -$3 : User value (--libxml2-XXXX)
extractAndAddPackageOption()
{
	#extract in local vars
	outputvar="$1"
	name="$2"
	arg="$3"

	value=`echo "$arg" | sed -e "s/^--${name}//g"`
	eval "${outputvar}=\"\$${outputvar} ${value}\""
}



wrap_output()
{
	assert_cmd "mktemp"

	outfile=`mktemp`

	set +e

	show_run_cmd "$@"

	if test $STEP_WRAPPER_VERBOSE -eq 3; then
		$@
	else
		$@ > $outfile 2>&1
	fi

	if test "x$?" = "x0"; then
		rm $outfile
	else
		nok

		if test $STEP_WRAPPER_VERBOSE -gt 0; then
			cat $outfile
		fi

		die "See $outfile an error occured when running $@"
	fi

	set -e
}


#
# Helper to export build environment
#


propagate_build_env()
{
	export PATH
	export PKG_CONFIG_PATH
	export CPATH
	export CMAKE_PREFIX_PATH
	export SPACK_LOADED_HASHES
	export ACLOCAL_PATH
	export MANPATH
	export LD_LIBRARY_PATH
}



#
# Check for avoiding GLIBC 2.28
#
check_glibc_is_compatible_with_priv()
{
	have_cmd "ldd"

	if test "x${HAVE_CMD}" = "xyes"; then
		GLIBC=`ldd --version | head -n 1 | rev | cut -d " " -f 1 | rev`
		(echo ${GLIBC} | grep "2.28") > /dev/null && die "GLIBC 2.28 is not compatible with privarization yet" || true
	fi
}



# Build spack package name
# Args:
# -$1 : package
# -$2 : version
#
build_package_name()
{
	if test -n "$2"; then
		echo "$1@$2"
	else
		echo "$1"
	fi
}


# Try to find a dep using spack
# Args:
# -$1 : package
# -$2 : version
#
DEP_FOUND="no"
find_dep_with_spack()
{
	DEP_FOUND="no"

	have_cmd "spack"

	if test "x${HAVE_CMD}" = "xno"; then
		return
	fi

	PKG_NAME="`build_package_name "$1" "$2"`"

	checking "load $PKG_NAME using spack"

	show_run_cmd "spack info  $PKG_NAME"
	spack info  $PKG_NAME > /dev/null 2>&1 || notapplicable

	if test "x${LAST_RESULT}" = "xna"; then
		return
	fi

	show_run_cmd "spack load --sh $PKG_NAME"
	spack load --sh $PKG_NAME > /dev/null 2>&1 && ok || nok

	if test "x${LAST_RESULT}" = "xok"; then
		eval `spack load --sh $PKG_NAME`
		DEP_FOUND="yes"
	fi

	propagate_build_env
}

# Try to install a package using spack
#
#
install_dep_with_spack()
{
	assert_cmd "spack"

	PKG_NAME="`build_package_name "$1" "$2"`"

	checking "install $PKG_NAME using spack"

	show_run_cmd "spack info  $PKG_NAME"
	spack info  $PKG_NAME > /dev/null 2>&1 || notapplicable

	if test "x${LAST_RESULT}" = "xna"; then
		return
	fi

	show_run_cmd "spack install $PKG_NAME"
	spack install $PKG_NAME && ok || nok

	if test "x${LAST_RESULT}" = "xok"; then
		find_dep_with_spack "$1" "$2"
	fi
}


#
# Remove duplicates from an env type var (outputs on stdout)
# Args:
#   - $1: variable to clean
#
clean_env_path_var()
{
	var_data=$1

	new_data_list=`echo $var_data | sed "s/\\:/\\n/g" | sort | uniq | xargs echo`

	ret=""
	for entry in $new_data_list
	do
		ret="${ret}:${entry}"
	done

	echo $ret
}

#
# Load a prefix by appending a given directory
# Args:
# - $1: prefix to insert
#
load_prefix()
{
	if test ! -d $1; then
		nok
		die "Could not locate prefix directory $1"
	fi

	test -d $1/bin && PATH=`clean_env_path_var $1/bin:$PATH`
	test -d $1/lib && LD_LIBRARY_PATH=`clean_env_path_var $1/lib:$LD_LIBRARY_PATH`
	test -d $1/lib64 && LD_LIBRARY_PATH=`clean_env_path_var $1/lib64:$LD_LIBRARY_PATH`
	test -d $1/include && CPATH=`clean_env_path_var $1/include:$CPATH`
	test -d $1/lib/pkgconfig/ && PKG_CONFIG_PATH=`clean_env_path_var $1/lib/pkgconfig/:$PKG_CONFIG_PATH`
	test -d $1/lib64/pkgconfig/ && PKG_CONFIG_PATH=`clean_env_path_var $1/lib64/pkgconfig/:$PKG_CONFIG_PATH`
	test -d $1/share/man/ && MANPATH=`clean_env_path_var $1/share/man/:$MANPATH`

	propagate_build_env
}


#
# Build a configure based package
#
# Args:
#  - $1: package name
#  - $2: package version
#  - $3: extra arguments for configure
#
BUILD_IS_DISABLED="no"

build_configure_based_package()
{
	package="$1"
	version="$2"
	extra_config_args=$3

	pkg_dir="$SCRIPTPATH/deps/$package/"

	if test "x${BUILD_IS_DISABLED}" = "xyes"; then
		die "--disable-build was passed and a package was not provided through spack"
	fi


	#
	# INSTALL FLAG MANAGEMENT
	#

	assert_cmd "cut"
	assert_cmd "rev"
	assert_cmd "grep"

	# Check if another version of the dependency is not already installed
	installed_vers=`ls -a ${PREFIX} | grep .mpc-installed-${package}-* || true`

	if test -n "$installed_vers"; then
		# There is already a version
		installed_version=`echo $installed_vers | rev | cut -d "-" -f 1 | rev`
		if test "x${installed_version}" != "x${version}"; then
			info "there is $package $installed_version in $PREFIX and MPC provides $version"
			die "MPC does not support installing mismatching $package versions in the same prefix"
		fi
	fi

	# The flag to determine if a dependency is already in prefix
	DEP_FLAG=${PREFIX}/.mpc-installed-$package-$version

	# If already deployed no need to redo
	if test -f $DEP_FLAG; then
		checking "Installing $package-$version"
		skip
		load_prefix "$PREFIX"
		return
	fi

	#
	# Tarball Extraction
	#

	# Where the tarball is extracted (depends on inner tarball dir name)
	ORIG_PKG_SOURCE_DIR=${PROJECT_BUILD_DIR}/${package}-${version}/
	# Where we move it in MPC to simplify deletion thanks to dep-* prefix
	PKG_SOURCE_DIR=${PROJECT_BUILD_DIR}/dep-${package}-${version}/

	checking "Extracting $package-$version"

	if test ! -d $PKG_SOURCE_DIR; then
		# Extract the source tarball only if not already present
		if test ! -d $pkg_dir; then
			die "Could not locate a directory $pkg_dir for $package $version"
		fi

		# Now attempt to locate archive
		tarball="$package-$version"
		candidate_tarball=`ls $pkg_dir | grep $tarball | grep ".tar"`
		tarball_path=$pkg_dir/$candidate_tarball

		if test ! -f $tarball_path; then
			nok
			die "Could not locate a tarball for $package-$version in $pkg_dir"
		fi

		show_run_cmd "tar xf $tarball_path"
		tar xf $tarball_path || true

		if test ! -d $ORIG_PKG_SOURCE_DIR; then
			nok
			die "Could not locate sources in $PKG_SOURCE_DIR after extracting $tarball_path"
		else
			show_run_cmd "mv $ORIG_PKG_SOURCE_DIR $PKG_SOURCE_DIR"
			# Rename to $PKG_SOURCE_DIR
			mv $ORIG_PKG_SOURCE_DIR $PKG_SOURCE_DIR
			ok
		fi

		#
		# Patching (when needed)
		#

		PACKAGE_PATCH=$pkg_dir/${package}-${version}.patch

		if test -f $PACKAGE_PATCH ; then
			checking "Patching $package $version"

			show_run_cmd "cd $PKG_SOURCE_DIR"
			cd $PKG_SOURCE_DIR

			show_run_cmd "patch -p 1 < $PACKAGE_PATCH"
			patch -p 1 < $PACKAGE_PATCH > /dev/null && ok || (nok; die "Failed to patch $package $version")

			show_run_cmd "cd $PROJECT_BUILD_DIR"
			cd ${PROJECT_BUILD_DIR}
		fi


	else
		skip
	fi

	#
	# Actual BUILD
	#


	if test ! -d ${PKG_SOURCE_DIR}/BUILD; then
		show_run_cmd "mkdir ${PKG_SOURCE_DIR}/BUILD"
		mkdir ${PKG_SOURCE_DIR}/BUILD
	fi

	show_run_cmd "cd ${PKG_SOURCE_DIR}/BUILD"
	cd ${PKG_SOURCE_DIR}/BUILD


	if test -f ${PKG_SOURCE_DIR}/autopriv_deploy.sh; then
		# Handle the special case of the autopriv deploy script
		checking "Deploying $package-$version"
		wrap_output ${PKG_SOURCE_DIR}/autopriv_deploy.sh -b ${PWD} -i ${PREFIX} -j ${MAKE_J} -o "\"${extra_config_args}\""
		ok
	elif test -f ${PKG_SOURCE_DIR}/configure; then
		# Regular configure / make / make install
		checking "Configuring $package-$version"
		wrap_output ${PKG_SOURCE_DIR}/configure --prefix=${PREFIX} $extra_config_args
		ok

		checking "Building $package-$version"
		wrap_output make -j${MAKE_J}
		ok

		checking "Installing $package-$version"
		wrap_output make install
		ok
	else
		die "Could not locate ./configure or autopriv_deploy.sh in ${PKG_SOURCE_DIR}"
	fi

	show_run_cmd "cd ${PROJECT_BUILD_DIR}"
	cd ${PROJECT_BUILD_DIR}

	#
	# Prefix loading
	#

	load_prefix "$PREFIX"


	#
	# Flag as installed
	#

	# if we are here flag all success
	show_run_cmd "touch ${DEP_FLAG}"
	touch ${DEP_FLAG}
}



# Deploy an MPC dependency using various methods (spack or not)
# Args:
# - $1: package name
# - $2: package version
# - $3: can build
# - $4: candidate prefix can be:
#	* "PATH" to a prefix which is then used
#	* "nobuild" meaning that we only try with spack load
#       * "spackonly" meaning that we only wish to install through spack if present
#       * "" meaning that we also try to build from sources (using local deps)


SPACK_LOCATE_DEPENDENCY="yes"
SPACK_INSTALL_DEPENDENCY="no"

find_in_prefix_or_use_spack_internal()
{
	package="$1"
	version="$2"
	can_build="$3"
	candidate_prefix="$4"

	if test "x${candidate_prefix}" = "xdisabled"; then
		#Not an error (disable legacy build also)
		DEP_FOUND="yes"
		info "$package is disabled"
		return
	fi


	DEP_FOUND="no"

	if test -d "$candidate_prefix"; then
		load_prefix "$candidate_prefix"
		# Assume dep found
		DEP_FOUND="yes"
	fi

	# First use spack to locate in existing packages
	if test "x${SPACK_LOCATE_DEPENDENCY}" = "xyes"; then
		find_dep_with_spack "$package" "$version"
	fi

	# If dep is found we are done
	test "x${DEP_FOUND}" = "xyes" && return


	# We stop here if we are not alowed to build
	test "x${can_build}" = "xnobuild" && return


	if test "x${SPACK_INSTALL_DEPENDENCY}" = "xyes"; then
		install_dep_with_spack "$package" "$version"
	fi

	# Did we install with spack ?
	test "x${DEP_FOUND}" = "xyes" && return

	# Do a source level build only when required to
	if test "x${can_build}" = "xspackonly"; then
		info "$package is configured to be installed using spack"
	fi
}


# Deploy an MPC dependency using various methods (spack or not)
# Args:
# - $1: package name
# - $2: package version
# - $3: candidate_prefix

find_in_prefix_or_use_spack()
{
	find_in_prefix_or_use_spack_internal "$1" "$2" "yes" "$3"
}

# Deploy an MPC dependency using various methods (spack or not)
# Args:
# - $1: package name
# - $2: package version
# - $3: candidate_prefix

find_in_prefix_or_use_spack_optionnal()
{
	required="no"
	candidate_prefix="$3"

	find_in_prefix_or_use_spack_internal "$1" "$2" "$required" "$candidate_prefix"
}


# Print usage for configure
showHelp()
{
cat << EOF

MPC Meta-Build script

Usage: ./configure [OPTION]... [VAR=VALUE]...

Defaults for the options are specified in brackets.

# Information
  --help|-h|-?                            : Display this help and exit
  --version                               : Report version number and exit

# Build & Installation
  --prefix=PREFIX                         : Install architecture-independent files in PREFIX [/usr/local]
  --disable-check-install                 : Override installation if it already exists in the prefix
  --{enable,disable}-check-deps           : Enable/Disable dependency checking
  --compiler                              : Default compiler

# Features
  --lib-mode                              : Build MPC as a communication library
  --mpc-process-mode                      : Build MPC in process-mode (1 MPI process = 1 UNIX process)
  --{enable,disable}-mpc-ft               : Activate/Deactivate checkpoint/restart support
  --{enable,disable}-color                         : Disable colors in display
  --enable-mpc-debug                      : Enable every debug levels (symbols, messages)
  --verbose=1|2|3                         : Level of verbosity
  -v|-vv|-vvv                             : Level of verbosity
  -jN                                     : Allow N jobs at once (parallel install)

# Disable sub packages
  --disable-mpc-autopriv                  : Disable privatizing compiler support
  --disable-mpc-gcc                       : Equivalent of disable-mpc-autopriv
  --disable-mpc-fortran                   : Disable fortran
  --disable-mpc-hydra                     : Disable Hydra
  --disable-romio                         : Disable ROMIO MPI-IO support
  --{enable,disable}-mpc-gdb              : Enable/Disable gdb
  --{enable,disable}-tbb                  : Enable/Disable TBB

# Specify system subpackages
  --with-autopriv=*                       : Specify autopriv prefix on the system
  --with-openpa=*                         : Specify openpa prefix on the system
  --with-hwloc=*                          : Specify hwloc prefix on the system
  --with-libxml2=*                        : Specify libxml2 prefix on the system
  --with-cuda=*                           : Specify Cuda prefix on the system
  --with-openacc=*                        : Specify OpenACC prefix on the system (NIMPL)
  --with-opencl=*                         : Specify OpenCL prefix on the system (NIMPL)
  --with-hydra=*                          : Specify Hydra prefix on the system
  --with-tbb=*                            : Specify TBB prefix on the system
  --with-{dmtcp,hbict}=*                  : Specify DMTCP/HBICT prefix on the system

# Options to transmit to subpackages
  --autopriv-*                            : Add options to autopriv configure
  --mpc-gdb-*                             : Add options to gdb configure
  --openpa-*                              : Add options to openpa configure
  --libxml2-*                             : Add options to libxml2 configure
  --hydra-*                               : Add options to Hydra configure
  --hwloc-*                               : Add options to hwloc configure
  --tbb-*                                 : Add options to TBB configure
  --{dmtcp,hbict}-*                       : Add options to DMTCP/HBICT configure
  --mpc-option=*                          : Add options to mpc framework configure

EOF
}

####################################################
#                                                  #
# MPC WRAPPER FOR BUILD                            #
#                                                  #
####################################################


MAKE_J=1

#
# Build directory check
#

# Make sure we do not install inside the source directory

if test "x${SCRIPTPATH}" = "x${PROJECT_BUILD_DIR}"; then
	die "MPC cannot be configured inside the source directory"
fi

#
# Disable all optionnal dependencies by default
#

# Possible values are:
#	* "PATH" to a prefix which is then used
#	* "nobuild" meaning that we only try with spack load
#       * "spackonly" meaning that we only wish to install through spack if present
#       * "" meaning that we also try to build from sources (using local deps)

OPENPA_PREFIX=""
LIBXML2_PREFIX=""

MPCALLOC_PREFIX=""

MPC_DMTCP_PREFIX="disabled"
HBICT_PREFIX="disabled"
MPC_GDB_PREFIX='disabled'
TBB_PREFIX="disabled"
SCTK_GETOPT_PREFIX='disabled'
MPC_MPIT_PREFIX='disabled'
MPL_PREFIX='disabled'

#
# Argument parsing
#

add_process_mode_flag_to_mpc()
{
	MPCFRAMEWORK_BUILD_PARAMETERS="${MPCFRAMEWORK_BUILD_PARAMETERS} --enable-process-mode"
}


for arg in "$@"
do
	case "$arg" in
		################# HYDRA #################
		--with-hydra=*)
			extractParamValue 'HYDRA_PREFIX' 'with-hydra' "$arg"
			;;
		--hydra-*)
			extractAndAddPackageOption 'HYDRA_BUILD_PARAMETERS' 'hydra' "$arg"
			;;
		--disable-mpc-hydra)
			HYDRA_PREFIX='disabled'
			;;
		#################### OPENPA #################
		--with-openpa=*)
			extractParamValue 'OPENPA_PREFIX' 'with-openpa' "$arg"
			;;
		--openpa-*)
			extractAndAddPackageOption 'OPENPA_BUILD_PARAMETERS' 'openpa' "$arg"
			;;
		################### MPC GDB #################
		--with-mpc-gdb=*)
			extractParamValue 'MPC_GDB_PREFIX' 'with-mpc-gdb' "$arg"
			;;
		--mpc-gdb-*)
			extractAndAddPackageOption 'MPC_GDB_BUILD_PARAMETERS' 'mpc-gdb' "$arg"
			;;
		--disable-mpc-gdb)
			MPC_GDB_PREFIX='disabled'
			;;
		--enable-mpc-gdb)
			enableParamIfNot 'MPC_GDB_PREFIX' "$MPC_GDB_PREFIX" 'disabled' 'internal'
			;;
		################### MPC GCC #################
		--with-autopriv=*)
			extractParamValue 'AUTOPRIV_PREFIX' 'with-mpc-gcc' "$arg"
			;;
		--mpc-autopriv-*)
			extractAndAddPackageOption 'AUTOPRIV_BUILD_PARAMETERS' 'mpc-autopriv' "$arg"
			;;
		--disable-mpc-gcc|--disable-autopriv)
			AUTOPRIV_PREFIX='disabled'
			add_process_mode_flag_to_mpc
			;;
		################# FORTRAN GCC ###############
		--disable-mpc-fortran)
			FORTRAN_PREFIX='disabled'
			MPCFRAMEWORK_BUILD_PARAMETERS="${MPCFRAMEWORK_BUILD_PARAMETERS} --disable-fortran"
			;;
		################## LIBXML2 ##################
		--with-libxml2=*)
			extractParamValue 'LIBXML2_PREFIX' 'with-libxml2' "$arg"
			;;
		--libxml2-*)
			extractAndAddPackageOption 'LIBXML2_BUILD_PARAMETERS' 'libxml2' "$arg"
			;;
		################### HWLOC ###################
		--with-hwloc=*)
			extractParamValue 'HWLOC_PREFIX' 'with-hwloc' "$arg"
			;;
		--hwloc-*)
			extractAndAddPackageOption 'HWLOC_BUILD_PARAMETERS' 'hwloc' "$arg"
			;;
		################### CUDA ###################
		--with-cuda=*)
			extractParamValue 'CUDA_PREFIX' 'with-cuda' "$arg"
			;;
		--with-openacc=*)
			extractParamValue 'OPENACC_PREFIX' 'with-openacc' "$arg"
			;;
		--with-opencl=*)
			extractParamValue 'OPENCL_PREFIX' 'with-opencl' "$arg"
			;;
		################### TBB ###################
		--with-tbb=*)
			extractParamValue 'TBB_PREFIX' 'with-tbb' "$arg"
			;;
		--tbb-*)
			extractAndAddPackageOption 'TBB_BUILD_PARAMETERS' 'tbb' "$arg"
			;;
		--enable-mpc-tbb)
			enableParamIfNot 'TBB_PREFIX' "$TBB_PREFIX" 'disabled' 'internal'
			;;
		--disable-mpc-tbb)
			TBB_PREFIX="disabled"
			;;
		#### MPC Allocator ##########
		--enable-mpc-allocator|--enable-mpcalloc)
			MPCALLOC_PREFIX=""
			;;
		--disable-mpc-allocator|--disable-mpcalloc)
			MPCALLOC_PREFIX="disabled"
			;;
		--mpcalloc-*)
			extractAndAddPackageOption 'MPCALLOC_BUILD_PARAMETERS' 'mpcalloc' "$arg"
			;;
		################### DMTCP ###################
		--with-dmtcp=*)
			extractParamValue 'MPC_DMTCP_PREFIX' 'with-dmtcp' "$arg"
			;;
		--dmtcp-*)
			extractAndAddPackageOption 'MPC_DMTCP_BUILD_PARAMETERS' 'dmtcp' "$arg"
			;;
		################### GENERIC FT ###################
		--enable-mpc-ft)
			MPCFRAMEWORK_BUILD_PARAMETERS="${MPCFRAMEWORK_BUILD_PARAMETERS} --with-dmtcp"
			enableParamIfNot 'MPC_DMTCP_PREFIX' "$MPC_DMTCP_PREFIX" 'disabled' 'internal'
			;;
		--disable-mpc-ft)
			MPC_DMTCP_PREFIX="disabled"
			;;
		################# COMPILER ##################
		--compiler=*)
			extractParamValue 'MPC_COMPILER' 'compiler' "$arg"
			COMPILER_ARG=yes
			;;
		############### MPCFRAMEWORK ################
		--mpc-option=*)
			extractAndAddPackageOption 'MPCFRAMEWORK_BUILD_PARAMETERS' 'mpc-option=' "$arg"
			;;
		--enable-color)
			MPCFRAMEWORK_BUILD_PARAMETERS="${MPCFRAMEWORK_BUILD_PARAMETERS} --enable-shell-colors"
			USE_COLOR="yes"
			;;
		--disable-color)
			MPCFRAMEWORK_BUILD_PARAMETERS=`echo $MPCFRAMEWORK_BUILD_PARAMETERS | sed "s/--enable-shell-colors//"`
			USE_COLOR="no"
			;;
		--enable-mpc-debug)
			MPCFRAMEWORK_BUILD_PARAMETERS="${MPCFRAMEWORK_BUILD_PARAMETERS} --enable-debug --enable-debug-messages"
			enableParamIfNot 'MPC_GDB_PREFIX' "$MPC_GDB_PREFIX" 'disabled' 'internal'
			;;
		--with-slurm)
			MPCFRAMEWORK_BUILD_PARAMETERS="${MPCFRAMEWORK_BUILD_PARAMETERS} --with-slurm"
			;;
		--disable-MPC_MPI)
			ROMIO_PREFIX='disabled'
			MPCFRAMEWORK_BUILD_PARAMETERS="${MPCFRAMEWORK_BUILD_PARAMETERS} --disable-MPC_MPI"
			;;
		--disable-ROMIO|--disable-romio)
			ROMIO_PREFIX='disabled'
			;;
		--lib-mode)
			ROMIO_PREFIX='disabled'
			TBB_PREFIX='disabled'
			MPC_GDB_PREFIX='disabled'
			AUTOPRIV_PREFIX='disabled'
			HYDRA_PREFIX='disabled'
			SCTK_GETOPT_PREFIX='disabled'
			MPC_MPIT_PREFIX='disabled'
			MPL_PREFIX='disabled'
			MPCINSTALL_LIB_MODE='yes'
			MPCFRAMEWORK_BUILD_PARAMETERS="${MPCFRAMEWORK_BUILD_PARAMETERS} --disable-MPC_MPI --disable-MPC_Allocator --enable-lib-mode"
			#special case, when configure does not handle any available compiler
			#by default, GCC compiler will be used, this behavior can be altered through the --compiler= option
			COMPILER_ARG=yes
			;;
		--mpc-process-mode)
			AUTOPRIV_PREFIX='disabled'
			SCTK_GETOPT_PREFIX='disabled'
			add_process_mode_flag_to_mpc
			#special case, when configure does not handle any available compiler
			#by default, GCC compiler will be used, this behavior can be altered through the --compiler= option
			COMPILER_ARG=yes
			;;

		################## COMMON ###################

		--disable-color)
			ENABLE_COLOR='false'
			;;

		-v | --verbose | --verbose=1)
			STEP_WRAPPER_VERBOSE=1
			export STEP_WRAPPER_VERBOSE
			;;
		-vv | --verbose=2)
			STEP_WRAPPER_VERBOSE=2
			export STEP_WRAPPER_VERBOSE
			;;
		-vvv | --verbose=3)
			STEP_WRAPPER_VERBOSE=3
			export STEP_WRAPPER_VERBOSE
			;;
		-j*)
			extractParamValueAlt 'MAKE_J' 'j' "$arg"
			;;
		--prefix=*)
			extractParamValue 'PREFIX' 'prefix' "$arg"
			if [ ! -d "${PREFIX}" ]; then
				mkdir -p ${PREFIX}
			fi
			;;
		--help|-h|-?)
			showHelp
			;;
		--spack|--enable-spack|--download-missing-deps)
			assert_cmd "spack"
			SPACK_LOCATE_DEPENDENCY="yes"
			;;
		--disable-spack)
			SPACK_LOCATE_DEPENDENCY="no"
			SPACK_INSTALL_DEPENDENCY="no"
			;;
		--spack-build|--enable-spack-build)
			assert_cmd "spack"
			SPACK_LOCATE_DEPENDENCY="yes"
			SPACK_INSTALL_DEPENDENCY="yes"
			;;
		--disable-spack-build)
			SPACK_INSTALL_DEPENDENCY="no"
			;;
		--disable-build)
			BUILD_IS_DISABLED="yes"
			;;
		# Deprecated options
		--mirror=*|clean|distclean|--with-sctk-arch=*|--sctk-arch-*|--with-mpfr=*|--mpfr-*|--with-gmp=*|--with-hbict=*|--hbict-*|--gmp-*|--with-mpc-binutils=*|--mpc-binutils-*|--disable-mpc-binutils|--with-libextls=*|--libextls-*|--with-mpc=*|--mpc-*|--enable-check-deps|--disable-check-deps|--disable-check-install|--enable-all-internals|--host=*|--target=*|--arch-library-path=*|--with-sysroot=*|--version)
			info "$arg is deprecated"
			;;
		*)
			echo "Invalid argument '$arg', please check your command line or get help with --help." 1>&2
			exit 1
	esac
done

# Make sure we have a prefix
test -z "$PREFIX" && die "Please provide a prefix where to install MPC"


#
# Locate common tools ahead of time
#
check_for_commands


#
# Can we use spack ? provide information message
#

have_cmd "spack"

if test "x${HAVE_CMD}" = "xyes"; then

	if test "x${SPACK_LOCATE_DEPENDENCY}" = "xno"; then
		info "Not locating packages with spack as --disable-spack was passed"
	else
		# Display warning if not building with spack
		if test "x${SPACK_INSTALL_DEPENDENCY}" = "xno"; then
			info "Not building using spack as --enable-spack-build not passed"
		fi

	fi
else
	info "spack is not present MPC will rely on built-in packages"
fi

#
# These commands are compulsory
#

assert_cmd "make"
assert_cmd "patch"
assert_cmd "bzip2"
assert_cmd "pkg-config"

# Basic dependencies
find_in_prefix_or_use_spack "openpa" "" "${OPENPA_PREFIX}"

if test "x${DEP_FOUND}" = "xno"; then
	# Could not use spack now installing manually
	build_configure_based_package "openpa" "1.0.4" "$OPENPA_BUILD_PARAMETERS"
fi

find_in_prefix_or_use_spack "libxml2" "" "${LIBXML2_PREFIX}"

if test "x${DEP_FOUND}" = "xno"; then
	# Could not use spack now installing manually
	build_configure_based_package "libxml2" "2.9.3" "$LIBXML2_BUILD_PARAMETERS"
fi

find_in_prefix_or_use_spack "hwloc" "1." "${HWLOC_PREFIX}"

if test "x${DEP_FOUND}" = "xno"; then
	# Could not use spack now installing manually
	build_configure_based_package "hwloc" "1.11.13" "$HWLOC_BUILD_PARAMETERS"
fi


# Basic optionnal dependencies
find_in_prefix_or_use_spack_optionnal "libunwind" "" "spackonly" "${LIBUNWIND_PREFIX}"

# Dependencies which can be deactivated
find_in_prefix_or_use_spack "autopriv" "" "${AUTOPRIV_PREFIX}"

if test "x${DEP_FOUND}" = "xno"; then
	info "Building autopriv requires both a working ggc and g++ compiler"
	assert_cmd "gcc"
	assert_cmd "g++"
	check_glibc_is_compatible_with_priv
	# Could not use spack now installing manually
	build_configure_based_package "autopriv" "0.5.0" "$AUTOPRIV_BUILD_PARAMETERS"
fi


find_in_prefix_or_use_spack "hydra" "" "${HYDRA_PREFIX}"

if test "x${DEP_FOUND}" = "xno"; then
	# Could not use spack now installing manually
	build_configure_based_package "hydra" "3.2" "$HYDRA_BUILD_PARAMETERS"
fi


find_in_prefix_or_use_spack "mpc-gdb" "" "${MPC_DMTCP_PREFIX}"

if test "x${DEP_FOUND}" = "xno"; then
	# Could not use spack now installing manually
	build_configure_based_package "mpc-gdb" "7.7" "$MPC_GDB_BUILD_PARAMETERS"
fi


find_in_prefix_or_use_spack "mpc-dmtcp" "" "${MPC_DMTCP_PREFIX}"

if test "x${DEP_FOUND}" = "xno"; then
	# Could not use spack now installing manually
	build_configure_based_package "mpc-dmtcp" "2.5.0" "$MPC_DMTCP_BUILD_PARAMETERS"
fi


find_in_prefix_or_use_spack "mpcalloc" "" "$MPCALLOC_PREFIX"

if test "x${DEP_FOUND}" = "xno"; then
	info "mpcalloc dependency needs cmake to build"
	assert_cmd "cmake"
	# Could not use spack now installing manually
	build_configure_based_package "mpcalloc" "0.1" "$MPCALLOC_BUILD_PARAMETERS"
fi


# It is now time to configure MPC


propagate_build_env

if test -f bin/mpc_build_env.sh; then
	checking "remove previous MPC configuration state"
	show_run_cmd "rm -fr bin/mpc_build_env.sh"
	rm -fr bin/mpc_build_env.sh
	ok
fi

checking "Configuring MPC"
wrap_output $SCRIPTPATH/mpcframework/configure --prefix=${PREFIX} $MPCFRAMEWORK_BUILD_PARAMETERS
ok

#
# Display MPC status if present (and not already displayed)
#

if test $STEP_WRAPPER_VERBOSE -gt 0; then
	if test -f ./bin/mpc_status.sh; then
		show_run_cmd "sh ./bin/mpc_status.sh"
		sh ./bin/mpc_status.sh
	fi
fi

checking "Building MPC"
wrap_output make -j ${MAKE_J}
ok

checking "Installing MPC"
wrap_output make install -j ${MAKE_J}
ok