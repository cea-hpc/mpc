#!/bin/bash
##########################################################################
#            PROJECT  : MPC                                              #
#            VERSION  : 2.5.1                                            #
#            DATE     : 02/2014                                          #
#			 AUTHORS  : Sebastien Valat, Augustin Serraz, Jean-Yves Vet  #
#            LICENSE  : CeCILL-C                                         #
##########################################################################

ALL_PACKAGES=''
ALL_PACKAGES_HOST=''
ALL_PACKAGES_TARGET=''

######################################################
#setup paths
PROJECT_SOURCE_DIR="`dirname "$0"`"
PROJECT_BUILD_DIR="$PWD"
MULTI_ARCH='false'

######################################################
#include common
. "${PROJECT_SOURCE_DIR}/tools/Common.sh"

######################################################
#set default configuration behavior
findCurrentArch 'MPC_HOST'
MPC_TARGET="${MPC_HOST}"
MPC_COMPILER="gcc"

######################################################
#avoid to build locally
if [ "${PROJECT_SOURCE_DIR}" = "." ] || [ "${PROJECT_BUILD_DIR}" = "${PROJECT_SOURCE_DIR}" ]; then
	PROJECT_BUILD_DIR="${PWD}/build"
	PROJECT_SOURCE_DIR="${PWD}"
	mkdir -p build
	cd build
fi

######################################################
#compute subdirs
#TODO: modifier extern-deps pour inclure les dir des deps + patches 
PROJECT_TEMPLATE_DIR="${PROJECT_SOURCE_DIR}/tools/templates"
PROJECT_PACKAGE_DIR="${PROJECT_SOURCE_DIR}/extern-deps"
PROJECT_PATCH_DIR="${PROJECT_SOURCE_DIR}/patches"
PROJECT_HELP_DIR="${PROJECT_SOURCE_DIR}/tools/help"

######################################################
#Check if colors could be enabled
if [ -t 1 ]; then
    ncolors=$(tput colors)
    if test -n "$ncolors" && test $ncolors -ge 8; then
	ENABLE_COLOR='true'
    fi
fi

#Check cores available to perform parallel builds 
if [ -f /proc/cpuinfo ];
then
	MAKE_J=`cat /proc/cpuinfo | egrep "core id|physical id" | tr -d '\n' | sed s/physical/\\\nphysical/g | grep -v "^$" | sort | uniq | wc -l`
fi

######################################################
# Set all modules to internal
# TODO : clean this and use it in config file
setModulesToInternal

######################################################
#Parse options
for arg in "$@"
do
	case "$arg" in
		################# SCTK_ARCH #################
		--with-hydra=*)
			extractParamValue 'HYDRA_PREFIX' 'with-hydra' "$arg"
			;;
		--hydra-*)
			extractAndAddPackageOption 'HYDRA_BUILD_PARAMETERS' 'hydra' "$arg"
			;;
		################# SCTK_ARCH #################
		--with-sctk-arch=*)
			extractParamValue 'SCTK_ARCH_PREFIX' 'with-sctk-arch' "$arg"
			;;
		--sctk-arch-*)
			extractAndAddPackageOption 'SCTK_ARCH_BUILD_PARAMETERS' 'sctk_arch' "$arg"
			;;
		#################### OPENPA #################
		--with-openpa=*)
			extractParamValue 'OPENPA_PREFIX' 'with-openpa' "$arg"
			;;
		--openpa-*)
			extractAndAddPackageOption 'OPENPA_BUILD_PARAMETERS' 'openpa' "$arg"
			;;
		################### MPC GDB #################
		--with-mpc-gdb=*)
			extractParamValue 'GDB_PREFIX' 'with-mpc-gdb' "$arg"
			;;
		--mpc-gdb-*)
			extractAndAddPackageOption 'GDB_BUILD_PARAMETERS' 'mpc-gdb' "$arg"
			;;
		--disable-mpc-gdb)
			GDB_PREFIX='disabled'
			;;
		################### MPC GCC #################
		--with-mpc-gcc=*)
			extractParamValue 'GCC_PREFIX' 'with-mpc-gcc' "$arg"
			;;
		--mpc-gcc-*)
			extractAndAddPackageOption 'GCC_BUILD_PARAMETERS' 'mpc-gcc' "$arg"
			;;
		--disable-mpc-gcc)
			GCC_PREFIX='disabled'
			;;
		##################### MPFR ##################
		--with-mpfr=*)
			extractParamValue 'MPFR_PREFIX' 'with-mpfr' "$arg"
			;;
		--mpfr-*)
			extractAndAddPackageOption 'MPFR_BUILD_PARAMETERS' 'mpfr' "$arg"
			;;
		##################### GMP ###################
		--with-gmp=*)
			extractParamValue 'GMP_PREFIX' 'with-gmp' "$arg"
			;;
		--gmp-*)
			extractAndAddPackageOption 'GMP_BUILD_PARAMETERS' 'gmp' "$arg"
			;;
		################## BINUTILS #################
		--with-mpc-binutils=*)
			extractParamValue 'BINUTILS_PREFIX' 'with-mpc-binutils' "$arg"
			;;
		--mpc-binutils-*)
			extractAndAddPackageOption 'BINUTILS_BUILD_PARAMETERS' 'mpc-binutils' "$arg"
			;;
		################## LIBXML2 ##################
		--with-libxml2=*)
			extractParamValue 'LIBXML2_PREFIX' 'with-libxml2' "$arg"
			;;
		--libxml2-*)
			extractAndAddPackageOption 'LIBXML2_BUILD_PARAMETERS' 'libxml2' "$arg"
			;;
		################### HWLOC ###################
		--with-hwloc=*)
			extractParamValue 'HWLOC_PREFIX' 'with-hwloc' "$arg"
			;;
		--hwloc-*)
			extractAndAddPackageOption 'HWLOC_BUILD_PARAMETERS' 'hwloc' "$arg"
			;;
		################# COMPILER ##################
		--compiler=*)
			extractParamValue 'MPC_COMPILER' 'compiler' "$arg"
			#if we use icc, no need for gcc and its libs
			if [ "${MPC_COMPILER}" = "icc" ]; then
				GMP_PREFIX='disabled'
				MPFR_PREFIX='disabled'
				MPC_PREFIX='disabled'
				GCC_PREFIX='disabled'
			fi
			;;
			
		############### CROSS-COMPIL ################
		--host=*)
			extractArchValue 'MPC_HOST' 'host' "$arg"
			MULTI_ARCH='true'
			;;
		--target=*)
			extractArchValue 'MPC_TARGET' 'target' "$arg"
			MULTI_ARCH='true'
			;;
		################## COMMON ###################
		--enable-color)
			ENABLE_COLOR='true'
			;;
		--enable-all-internals)
			ALL_INTERNALS='true'
			;;
		-v | --verbose | --verbose=1)
			export STEP_WRAPPER_VERBOSE=1;
			;;
		-vv | --verbose=2)
			export STEP_WRAPPER_VERBOSE=2;
			;;
		-vvv | --verbose=3)
			export STEP_WRAPPER_VERBOSE=3;
			;;
		-j*)
			extractParamValueAlt 'MAKE_J' 'j' "$arg"
			;;
		--prefix=*)
			extractParamValue 'PREFIX' 'prefix' "$arg"
			;;
		--help|-h|-?)
			showHelp
			;;
		*)
			echo "Invalid argument '$arg', please check your command line or get help with --help." 1>&2
			exit 1
	esac
done

######################################################
#Add prefix to local variable to also make the search
enablePrefixEnv "${PREFIX}"

######################################################
#Export PATH for finding Utils
#export PATH="${PREFIX}/${MPC_HOST}/bin:${PREFIX}/${MPC_TARGET}/bin:$PATH"

######################################################
#force MPC
MPCFRAMEWORK_PREFIX="${INTERNAL_KEY}"

GMP_REAL_PREFIX="${PREFIX}/${MPC_HOST}"
MPFR_REAL_PREFIX="${PREFIX}/${MPC_HOST}"
MPC_REAL_PREFIX="${PREFIX}/${MPC_HOST}/mpc/"
HYDRA_REAL_PREFIX="${PREFIX}/${MPC_TARGET}"
HYDRA_SIMPLE_REAL_PREFIX="${PREFIX}/${MPC_TARGET}"
LIBXML2_REAL_PREFIX="${PREFIX}/${MPC_TARGET}"
OPENPA_REAL_PREFIX="${PREFIX}/${MPC_TARGET}"
HWLOC_REAL_PREFIX="${PREFIX}/${MPC_TARGET}"
SCTK_ARCH_REAL_PREFIX="${PREFIX}/${MPC_TARGET}"

######################################################
printSummary

######################################################
#Create glue between packages
#'--with-hydra-simple=${HYDRA_SIMPLE_REAL_PREFIX}'
GCC_BUILD_PARAMETERS="'--with-gmp=${GMP_REAL_PREFIX}' '--with-mpfr=${MPFR_REAL_PREFIX}' '--with-mpc=${MPC_REAL_PREFIX}' --disable-multilib --disable-bootstrap --program-prefix=mpc- --program-suffix=_480 --with-pkgversion=MPC --enable-languages=c,c++,fortran ${GCC_BUILD_PARAMETERS}"
MPCFRAMEWORK_BUILD_PARAMETERS="'--with-libxml2=${LIBXML2_REAL_PREFIX}' '--with-openpa=${OPENPA_REAL_PREFIX}' '--with-hwloc=${HWLOC_REAL_PREFIX}' '--with-libsctk_arch=${SCTK_ARCH_REAL_PREFIX}' ${MPC_BUILD_PARAMETERS}"
MPFR_BUILD_PARAMETERS="'--with-gmp=${GMP_REAL_PREFIX}' ${MPFR_BUILD_PARAMETERS}"
MPC_BUILD_PARAMETERS="'--with-gmp=${GMP_REAL_PREFIX}' --with-mpfr=${MPFR_REAL_PREFIX} ${MPC_BUILD_PARAMETERS}"
HYDRA_SIMPLE_BUILD_PARAMETERS="'--with-hydra-mpl=${HYDRA_REAL_PREFIX}' ${HYDRA_SIMPLE_BUILD_PARAMETERS}"

######################################################
#Clear makefile to generate it (TODO à générer, générer la variable en majuscule)
genMakefile()
{
	local subprefix="$1"
	local type_arch="$2"
	local host=${MPC_HOST};
	local target=${MPC_TARGET};
	local list=`cat "${PROJECT_SOURCE_DIR}/config.txt" | cut -f 1 -d ';' |  sed -e "s/^#[0-9A-Za-z_-\ #]*//g" | xargs echo`
	
	if [ ! -d "$subprefix" ]; then
		mkdir "$subprefix" || exit 1
	fi

	cd "$subprefix" || exit 1
	SUBPREFIX="/$subprefix"
	applyOnTemplate "${PROJECT_TEMPLATE_DIR}/Makefile.head.in" > Makefile
	for module in ${list}; 
	do
		local template=`cat "${PROJECT_SOURCE_DIR}/config.txt" | grep "^${module} " | cut -f 8 -d ';' | xargs echo`
		local run_on=`cat "${PROJECT_SOURCE_DIR}/config.txt" | grep "^${module} " | cut -f 6 -d ';' | xargs echo`
		if [ "${run_on}" = "${2}" ] || [ "${run_on}" = "all" ];
		then
			UPPER=`echo ${module} | tr '[:lower:]' '[:upper:]'`
			setupInstallPackage "${module}" "${host}" "${target}" "${MPC_COMPILER}" "${UPPER}" "${template}" "${2}">> Makefile
		fi
	done
	if [ "$MULTI_ARCH" = 'false' ]; then
		applyOnTemplate "${PROJECT_TEMPLATE_DIR}/Makefile.foot.in" >> Makefile
	else
		applyOnTemplate "${PROJECT_TEMPLATE_DIR}/Makefile.foot_${type_arch}.in" >> Makefile
	fi
	cd .. || exit 1
}

######################################################
createRootMakefile()
{
	if [ "$MULTI_ARCH" = 'true' ]; then
		SUBPREFIXES="$*"
		applyOnTemplate "${PROJECT_TEMPLATE_DIR}/Makefile.multiprefix.root.in" > Makefile
		for SUBPREFIX in ${SUBPREFIXES}
		do
			SUBPREFIX_HOST="$1"
			SUBPREFIX_TARGET="$2"
			applyOnTemplate "${PROJECT_TEMPLATE_DIR}/Makefile.multiprefix.subprefix.in" >> Makefile
		done
	else	
		SUBPREFIX="$1"
		applyOnTemplate "${PROJECT_TEMPLATE_DIR}/Makefile.root.in" > Makefile
		applyOnTemplate "${PROJECT_TEMPLATE_DIR}/Makefile.multiprefix.subprefix.in" >> Makefile
	fi
}

######################################################
if [ "$MULTI_ARCH" = 'true' ]; then
	if [ "${MPC_HOST}" = "" ]; then
		findCurrentArch 'MPC_HOST'
	fi
	genMakefile "${MPC_HOST}" "host"
	genMakefile "${MPC_TARGET}" "target"
	createRootMakefile "${MPC_HOST}" "${MPC_TARGET}"
else
	genMakefile "${MPC_HOST}" "host"
	createRootMakefile "${MPC_HOST}"
fi

######################################################
#some info
if [ ! -z "$MAKE_J" ]; then
	echo "Running in parallel with -j$MAKE_J..."
fi

#made verbose if seq
if [ "$MAKE_J" = "1" ] || [ -z "$MAKE_J" ]; then
	if [ -z "$STEP_WRAPPER_VERBOSE" ]; then export STEP_WRAPPER_VERBOSE=3; fi
fi

#do it
if [ "$STEP_WRAPPER_VERBOSE" = '3' ]; then
	make -j$MAKE_J || fatal "Finish with errors, please read previous messages."
else
	make --quiet -j$MAKE_J || fatal "Finish with errors, please read previous messages."
fi

######################################################
echo
echo "FINISHED, you can now use the MPC package installed into $PREFIX"
echo "You can now use MPC by source XXXXXXXXX (TODO) in your shell"
echo 
echo "For developpers, use this in mpc/ subdirectory : "
echo "mkdir build && cd build && ../configure $MPC_BUILD_PARAMETERS"
