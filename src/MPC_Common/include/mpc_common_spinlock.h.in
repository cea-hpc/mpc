/* ############################# MPC License ############################## */
/* # Wed Nov 19 15:19:19 CET 2008                                         # */
/* # Copyright or (C) or Copr. Commissariat a l'Energie Atomique          # */
/* #                                                                      # */
/* # IDDN.FR.001.230040.000.S.P.2007.000.10000                            # */
/* # This file is part of the MPC Runtime.                                # */
/* #                                                                      # */
/* # This software is governed by the CeCILL-C license under French law   # */
/* # and abiding by the rules of distribution of free software.  You can  # */
/* # use, modify and/ or redistribute the software under the terms of     # */
/* # the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     # */
/* # following URL http://www.cecill.info.                                # */
/* #                                                                      # */
/* # The fact that you are presently reading this means that you have     # */
/* # had knowledge of the CeCILL-C license and that you accept its        # */
/* # terms.                                                               # */
/* #                                                                      # */
/* # Authors:                                                             # */
/* #   - PERACHE Marc marc.perache@cea.fr                                 # */
/* #                                                                      # */
/* ######################################################################## */
#ifndef MPC_COMMON_INCLUDE_SPINLOCK_H_
#define MPC_COMMON_INCLUDE_SPINLOCK_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <mpc_keywords.h>
#include <opa_primitives.h>
#include <mpc_common_asm.h>

/* HAVE_MPC_THREAD */
#if @HAVE_MPC_THREAD@ == 0
	/* For sched_yield */
	#include <sched.h>
	#include <pthread.h>
	#define mpc_thread_yield sched_yield
#else
	extern int mpc_thread_yield( void );
#endif

/*******************************
 * MPC SPINLOCK IMPLEMENTATION *
 *******************************/

/**
 * @brief This defines the mpc spinlock object
 *
 */
typedef OPA_int_t mpc_common_spinlock_t;

/**
 * @brief Used to initialize a spinlock statically
 *
 */
#define SCTK_SPINLOCK_INITIALIZER { 0 }


static inline void mpc_common_spinlock_init( mpc_common_spinlock_t *lock, int value )
{
	OPA_int_t *p = (OPA_int_t *) lock;
	OPA_store_int(p, value);
}


int mpc_common_spinlock_lock_yield( mpc_common_spinlock_t *lock );
int mpc_common_spinlock_lock( mpc_common_spinlock_t *lock );
int mpc_common_spinlock_trylock( mpc_common_spinlock_t *lock );
int mpc_common_spinlock_unlock( mpc_common_spinlock_t *lock );

/**********************************
 * MPC RW SPINLOCK IMPLEMENTATION *
 **********************************/

typedef struct
{
	mpc_common_spinlock_t writer_lock;
	OPA_int_t reader_number;
} mpc_common_rwlock_t;

#define SCTK_SPIN_RWLOCK_INITIALIZER                          \
	{                                                         \
		SCTK_SPINLOCK_INITIALIZER, OPA_INT_T_INITIALIZER( 0 ) \
	}

#define sctk_spin_rwlock_init( a )                      \
	do                                                  \
	{                                                   \
                mpc_common_spinlock_init(&( a )->writer_lock , 0); \
		OPA_store_int( &( a )->reader_number, 0 );  \
	} while ( 0 )

int mpc_common_spinlock_read_lock( mpc_common_rwlock_t *lock );
int mpc_common_spinlock_read_lock_yield( mpc_common_rwlock_t *lock );

int mpc_common_spinlock_read_trylock( mpc_common_rwlock_t *lock );
int mpc_common_spinlock_write_lock( mpc_common_rwlock_t *lock );

int mpc_common_spinlock_write_trylock( mpc_common_rwlock_t *lock );

int mpc_common_spinlock_write_lock_yield( mpc_common_rwlock_t *lock );

int mpc_common_spinlock_read_unlock( mpc_common_rwlock_t *lock );
int mpc_common_spinlock_read_unlock_state( mpc_common_rwlock_t *lock );

int mpc_common_spinlock_write_unlock( mpc_common_rwlock_t *lock );

#ifdef __cplusplus
} /* end of extern "C" */
#endif

#endif /* MPC_COMMON_INCLUDE_SPINLOCK_H_ */
