#!/bin/sh
############################# MPC License ##############################
# Wed Nov 19 15:19:19 CET 2008                                         #
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
#                                                                      #
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
# This file is part of the MPC Runtime.                                #
#                                                                      #
# This software is governed by the CeCILL-C license under French law   #
# and abiding by the rules of distribution of free software.  You can  #
# use, modify and/ or redistribute the software under the terms of     #
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
# following URL http://www.cecill.info.                                #
#                                                                      #
# The fact that you are presently reading this means that you have     #
# had knowledge of the CeCILL-C license and that you accept its        #
# terms.                                                               #
#                                                                      #
# Authors:                                                             #
#   - PERACHE Marc marc.perache@cea.fr                                 #
#   - CARRIBAULT Patrick patrick.carribault@cea.fr                     #
#                                                                      #
########################################################################

mpcrun_error(){
	echo "================ ERROR ================"
	echo "$1"
	echo "======================================="
	exit 1
}


#########################
# General Configuration #
#########################

# Compute All Paths

MPC_INSTALL_PREFIX=@prefix@
MPC_BIN_DIR="${MPC_INSTALL_PREFIX}/bin"
MPC_LIB_DIR="${MPC_INSTALL_PREFIX}/lib"
MPC_SHARE_DIR="${MPC_INSTALL_PREFIX}/share/mpc"
MPC_INCLUDE_DIR="${MPC_INSTALL_PREFIX}/include"

# Version of MPC library

MAJOR="@MPC_VERSION_MAJOR@"
MINOR="@MPC_VERSION_MINOR@"
REVISION="@MPC_VERSION_REVISION@"
PRE_RELEASE="@MPC_VERSION_PRE@"

# Optionnal modules

MPC_HAVE_DMTCP=@MPC_HAVE_DMTCP@
MPC_HAVE_PROFILER=@MPC_HAVE_PROFILER@
##########################
# Inject MPC in the PATH #
##########################

# Here we restore MPC's build environment
. $MPC_INSTALL_PREFIX/bin/mpc_build_env.sh

# Here we prepend the PATH which is normally postpended
# we do this as we can't override the whole prefix with
# mpc binaries as it can cause version mismatches
export PATH="${MPC_BIN_DIR}:${PATH}"

##########################
# Launcher Configuration #
##########################

MPC_IN_PROCESS_MODE="@MPC_IN_PROCESS_MODE@"

LAUNCHER_CONFIG_JOB_MANAGER="@MPC_LAUNCHER@"
LAUNCHER_CONFIG_MPIEXEC_HYDRA_PATH="@MPC_MPIEXEC_HYDRA_PATH@"

# Default Launcher and launch mode

LAUNCHER_SHOW_CMD=""

LAUNCHER_PLUGIN="mpiexec"
LAUNCHER_CONFIG_LAUNCH_MODE="exec"

# Where to find the specialized launchers
LAUNCHER_CONFIG_BINS_HOME="${MPC_INSTALL_PREFIX}/share/mpc/mpcrun_opt/mpcrun"

##################################
# Options Passed to the Launcher #
##################################

LAUNCHER_OPTION_WRAPPER=""
LAUNCHER_OPTION_BINARY=""
LAUNCHER_OPTION_BINARY_ARGS=""

LAUNCHER_OPTION_CPU_NB=""
LAUNCHER_OPTION_PROCESS_NB="1"
LAUNCHER_OPTION_NODE_NB=""

############################
# Default Parameter Values #
############################

CONFIG_MPC_VERBOSE="0"
CONFIG_ENABLE_SMT="0"
CONFIG_USER_LAUNCHERS=""
CONFIG_AUTOKILL="0"
CONFIG_DISABLE_ASLR="0"
CONFIG_THREAD_MODEL="ethread_mxn"
CONFIG_PROFILING="stdout"
CONFIG_ACCELERATOR_SUPPORT="0"
CONFIG_TOPOLOGY_DUMP_GRAPHIC="0"
CONFIG_TOPOLOGY_DUMP_TEXT="0"



MPC_ARG_FAULT_TOLERANCE=""
MPC_ARG_FT_SCRIPT_PATH=""

MPC_ARG_TASK_NB=""
MPC_ARG_NETWORKING=""
MPC_ARG_THREAD_TYPE=""
MPC_ARG_FORCE_CPU_NB=""

###################
# Supported Modes #
###################

# Configuration of MPC Networks
MODES_NETWORKING="@MPC_NETWORK_LIST@"

check_net(){
	if test "$1" != "none" ; then
		MPC_ARG_NETWORKING="--sctk_use_network=$1"
	fi

}


# Supported thread engines
MODES_MULTITHREAD="pthread ethread_mxn pthread_ng ethread_mxn_ng ethread ethread_ng"


check_thread(){
	if test "$1" != "none" ; then
		for mode in $MODES_MULTITHREAD ; do
			if test "$1" = "$mode" ; then
				MPC_ARG_THREAD_TYPE="--use-$1"
				return
			fi
		done
	fi
	mpcrun_error "No such threading type $1 avalaible ones are $MODES_MULTITHREAD"
}


check_process_nb()
{
	if test "$MPC_IN_PROCESS_MODE" = "yes"; then
		echo "MPC is in process mode, process number will be set automatically"
	fi
	LAUNCHER_OPTION_PROCESS_NB="$1"
}

assert_have_dmtcp()
{
	if test "x$MPC_HAVE_DMTCP" = "xno"; then
		mpcrun_error "Option $1 is not availble without DMTCP support"
	fi
}


##################################
# Load MPC's Configuration Files #
##################################

load_mpc_configuration()
{
	# Load config files options
	CONFIG_FILES_VALID=false
	preload_tmp="$LD_PRELOAD"
	LD_PRELOAD=""
	config_files_vars="$(${MPC_BIN_DIR}/mpc_print_config --launcher 2>/dev/null)"
	LD_PRELOAD="$preload_tmp"

	# Load configuration variables
	test "x$?" = "x0" && eval "${config_files_vars}"

	if [ "${CONFIG_FILES_VALID}" = "true" ]; then
		# Default value related to --enable-smt
		CONFIG_ENABLE_SMT="${CONFIG_LAUNCHER_ENABLE_SMT}"
		# Default value related to -v/-vv/-vvv
		CONFIG_MPC_VERBOSE="${CONFIG_LAUNCHER_VERBOSITY}"
		# User launchers
		CONFIG_USER_LAUNCHERS="${CONFIG_LAUNCHER_USER_LAUNCHERS}"
		# Autokill parameter
		CONFIG_AUTOKILL="${CONFIG_LAUNCHER_AUTOKILL}"
		# Configure if ASLR is to be disabled
		CONFIG_DISABLE_ASLR="${CONFIG_LAUNCHER_DISABLE_RAND_ADDR}"
		# Enable checkpoint
		if [ "${CONFIG_LAUNCHER_CHECKPOINT}" = "true" ]; then
			MPC_ARG_FAULT_TOLERANCE="--checkpoint"
		fi
		# Enable restart mode
		if [ "${CONFIG_LAUNCHER_RESTART}" = "true" ]; then
			MPC_ARG_FAULT_TOLERANCE="--restart"
		fi
		# Number of process
		LAUNCHER_OPTION_PROCESS_NB="${CONFIG_LAUNCHER_NB_PROCESS}"
		# Number of node
		LAUNCHER_OPTION_NODE_NB="${CONFIG_LAUNCHER_NB_NODE}"
		# Number of task
		MPC_ARG_TASK_NB="${CONFIG_LAUNCHER_NB_TASK}"
		# Number of core
		LAUNCHER_OPTION_CPU_NB="${CONFIG_LAUNCHER_NB_PROCESSOR}"
		# Define the launcher to use
		LAUNCHER_PLUGIN="${CONFIG_LAUNCHER_LAUNCHER}"

		if test "$LAUNCHER_PLUGIN" = 'none'; then
			LAUNCHER_PLUGIN='mpiexec'
		fi

		CONFIG_PROFILING="${CONFIG_LAUNCHER_PROFILING}"
	else
		# Call again to display the error (usually link error)
		mpc_print_config --launcher
		mpcrun_error "Error while loading MPC configuration files."
	fi

	# Make config loading silent in case of error in all MPC processes and avoid to revalidate XML files
	# with mpc-config.xsd as it's already done. By this way it avoid to open mpc-config.xsd on each nodes.
	export MPC_CONFIG_SILENT=1
}

# Pre-parsing to extract --config and --profiles, it must be done before parsing all options
# as config file must feed default value and can be erased by mpcrun arguments.
for arg in "$@" ; do
	case $arg in
		--config=*)
			MPC_USER_CONFIG="$(echo "A$arg" | sed -e 's/A--config=//g')"
			echo "#Use config file $MPC_USER_CONFIG"
			export MPC_USER_CONFIG
			;;
		--profiles=*)
			MPC_USER_PROFILES="$(echo "A$arg" | sed -e 's/A--profiles=//g')"
			export MPC_USER_PROFILES
			;;
	esac
done

#check that we have the file
if [ ! -z "${MPC_USER_CONFIG}" ] && [ ! -e "${MPC_USER_CONFIG}" ]; then
	echo "ERROR : Configuration file '${MPC_USER_CONFIG}' provided by --config or MPC_USER_CONFIG doesn't exist." 1>&2
	exit 1
fi


load_mpc_configuration


##########################################
# Check for disabling ASLR using Setarch #
##########################################

if test "x${CONFIG_DISABLE_ASLR}" = "x1"; then

	# First check for uname
	uname -m > /dev/null 2>&1

	if test "x$?" = "x0"; then
		# Now pass to setarch
		setarch "$(uname -m)" -R true > /dev/null 2>&1

		if test "x$?" = "x0"; then
			# Here we have setarch -R
			LAUNCHER_OPTION_WRAPPER="setarch $(uname -m) -R"
		fi
	fi

fi


######################
# Display MPC's Help #
######################


expand_net_rail_list()
{
	eval echo \$NETWORKING_CLI_$(eval echo "$1")_RAILS
}

print_network_list()
{
	if test -z "${NETWORKING_CLI_OPTION_LIST}"; then
		return
	fi

	echo ""
	echo "	Configured CLI switches for network configurations:"
	echo ""
	for net in $NETWORKING_CLI_OPTION_LIST
	do
		echo "		- $net:"
		CNT=0
		for rail in $(expand_net_rail_list $net)
		do
			echo "			* Rail $CNT: $rail"
			CNT=$((CNT + 1))
		done
	done
	echo ""
}

print_help(){
cat << EOF
Usage mpcrun [option] [--] binary [user args]

Launch Configuration:
	-N=n,--node-nb=n                Total number of nodes
	-p=n, --process-nb=n            Total number of UNIX processes
	-n=n, --task-nb=n               Total number of tasks
	-c=n, --cpu-nb=n                Number of cpus per UNIX process
	--cpu-nb-mpc=n                  Number of cpus per process for the MPC process
	--enable-smt                    Enable SMT capabilities (disabled by default)

Multithreading:
	-m=n, --multithreading=n        Define multithreading mode
                                        modes: $MODES_MULTITHREAD

Network:
	-net=n, --net=, --network=n     Define Network mode (TCP + SHM by default)
EOF

print_network_list

cat << EOF
Launcher:
	-l=n, --launcher=n              Define launcher
	--opt=<options>                 Launcher specific options
	--launch_list                   Print available launch methods
	--config=<file>                 Configuration file to load.
	--profiles=<p1,p2>              List of profiles to enable in config.


Informations:
	-h, --help                      Display this help
	--show                          Display command line

	-v,-vv,-vvv,--verbose=n         Verbose mode (level 1 to 3)
	--verbose                       Verbose level 1
	--graphic-placement             Output a xml file to visualize thread
	                                placement and topology for each compute node
	--text-placement                Output a txt file to visualize thread placement and
	                                their infos on the topology for each compute node

Debugger:
	--dbg=<debugger_name> to use a debugger
EOF

if test "x$MPC_HAVE_DMTCP" = "xyes"; then

cat << EOF
Fault-tolerance (if compiled with --enable-ft):
	--checkpoint                    Enabling Fault-tolerance support
	--restart[=<path>]              Restart from previous checkpoint (path to restart script)
EOF

fi

if test "x$MPC_HAVE_PROFILER" = "xyes"; then

cat << EOF
Profiling (if compiled with --enable-MPC_Profiler) :
	--profiling=AA,BB,...

	example : --profiling=stdout,html,latex

	With the following output modules :
		* file : Outputs to file indented profile with time in standard units
		* file-raw : Outputs to file unindented profile in ticks (gnuplot compliant)
		* file-noindent : Same as "text" with no indentation
		* stdout : "text" to stdout
		* stdout-raw : "text_raw" to stdout
		* stdout-noindent : "text_noindent" to stdout
		* latex : Outputs profile to a latex source file
		* html : Outputs profile to an html file
EOF

fi

}

#####################
# Common Operations #
#####################

list_available_mpc_launchers()
{
	echo "Available launch method"
	for i in "${MPC_INSTALL_PREFIX}"/share/mpc/mpcrun_opt/* ; do echo "    - $(basename "$i")" | sed s/mpcrun_//g  | grep -v default_param | grep -v propagate_env | grep -v "~" ; done
	if [ -n "${CONFIG_USER_LAUNCHERS}" ] && [ -e "${CONFIG_USER_LAUNCHERS}" ]; then
		for i in "${CONFIG_USER_LAUNCHERS}"/mpcrun_* ; do echo "    - $(basename "$i")" | sed s/mpcrun_//g  | grep -v default_param | grep -v propagate_env | grep -v "~" ; done
	fi
	exit 0
}

print_version()
{
	echo "mpcrun ${MPC_VERSION}.${REVISION}"
	exit 0
}


DEBUG=""

#########################
# Argument Parsing Loop #
#########################

ARG_PARSING_ENABLED="true"
LAUNCHER_CPU_NB_WAS_SET="0"
LAUNCH_OPTIONS=""

# Parse command options
for arg in "$@" ; do
	if test "$ARG_PARSING_ENABLED" = "true" ; then
		case $arg in
			-h|--help)
				print_help;
				exit 0;
				;;
			-v|--verbose)
				CONFIG_MPC_VERBOSE="1"
				;;
			-vv)
				CONFIG_MPC_VERBOSE="2"
				;;
			-vvv)
				CONFIG_MPC_VERBOSE="3"
				;;
			--verbose=*)
				CONFIG_MPC_VERBOSE="`echo A$arg | sed -e 's/A--verbose=//g'`"
				;;
			--profiling=*)
				CONFIG_PROFILING="`echo A$arg | sed -e 's/A--profiling=//g'`"
				;;
			--show)
				LAUNCHER_SHOW_CMD=echo
				;;
			--version|-V)
				print_version
				;;
			--launch_list|-l=help|--launcher=help)
				list_available_mpc_launchers
				;;
			--disable-smt)
				CONFIG_ENABLE_SMT="0"
				;;
			--enable-smt)
				CONFIG_ENABLE_SMT="1"
				;;
			--graphic-placement)
				CONFIG_TOPOLOGY_DUMP_GRAPHIC="1"
				;;
			--text-placement)
				CONFIG_TOPOLOGY_DUMP_TEXT="1"
				;;
			--use-accl|--accl|-accl)
				CONFIG_ACCELERATOR_SUPPORT="1"
				;;
			--dbg=*)
				DEBUG="`echo A$arg | sed -e 's/A--dbg=//g'`"
				;;
			--dbg_opt=*)
				MPC_GDB_DEBUG_ARGS="`echo A$arg | sed -e 's/A--dbg_opt=//g'`"
				;;
			--autokill=*)
				CONFIG_AUTOKILL="`echo A$arg | sed -e 's/A--autokill=//g'`"
				;;
			--opt=*)
				LAUNCH_OPTIONS="$LAUNCH_OPTIONS `echo A$arg | sed -e 's/A--opt=//g'`"
				;;

			--task-nb=*)
				MPC_ARG_TASK_NB="`echo A$arg | sed -e 's/A--task-nb=//g'`"
				;;
			-n=*)
				MPC_ARG_TASK_NB="`echo A$arg | sed -e 's/A-n=//g'`"
				;;
			--process-nb=*)
				check_process_nb "`echo A$arg | sed -e 's/A--process-nb=//g'`"
				;;
			-p=*)
				check_process_nb "`echo A$arg | sed -e 's/A-p=//g'`"
				;;
			--cpu-nb=*)
				LAUNCHER_OPTION_CPU_NB="`echo A$arg | sed -e 's/A--cpu-nb=//g'`"
				LAUNCHER_CPU_NB_WAS_SET="1"
				;;
			--cpu-nb-mpc=*)
				MPC_ARG_FORCE_CPU_NB="`echo A$arg | sed -e 's/A--cpu-nb-mpc=//g'`"
				;;
			-c=*)
				LAUNCHER_OPTION_CPU_NB="`echo A$arg | sed -e 's/A-c=//g'`"
				LAUNCHER_CPU_NB_WAS_SET="1"
				;;
			--node-nb=*)
				LAUNCHER_OPTION_NODE_NB="`echo A$arg | sed -e 's/A--node-nb=//g'`"
				;;
			-N=*)
				LAUNCHER_OPTION_NODE_NB="`echo A$arg | sed -e 's/A-N=//g'`"
				;;
			--multithreading=*)
				check_thread "`echo A$arg | sed -e 's/A--multithreading=//g'`"
				;;
			-m=*)
				check_thread "`echo A$arg | sed -e 's/A-m=//g'`"
				;;
			--network=*)
				check_net "`echo A$arg | sed -e 's/A--network=//g'`"
				;;
			-net=*)
				check_net "`echo A$arg | sed -e 's/A-net=//g'`"
				;;
			--net=*)
				check_net "`echo A$arg | sed -e 's/A--net=//g'`"
				;;
			-l=*)
				LAUNCHER_PLUGIN="`echo A$arg | sed -e 's/A-l=//g'`"
				;;
			--launcher=*)
				LAUNCHER_PLUGIN="`echo A$arg | sed -e 's/A--launcher=//g'`"
				;;
			--config=* | --profiles=*)
				#Already processed in a previous loop on arguments, but need to capture them otherwise
				#it will be propagated as exe options.
				;;
			--arch-library-path=*)
				SCTK_ARCH_LIBRARY_PATH="`echo A$arg | sed -e 's/A--arch-library-path=//g'`"
				export SCTK_ARCH_LIBRARY_PATH
				echo "Arch library path updated : $SCTK_ARCH_LIBRARY_PATH" >&2
				;;
			--tempdir)
				export MPC_MOVE_TO_TEMP="1"
				;;
			--checkpoint|--ckpt)
				assert_have_dmtcp $arg
				MPC_ARG_FAULT_TOLERANCE="--checkpoint"
				;;
			--restart*|--rstr*)
				assert_have_dmtcp $arg
				MPC_ARG_FAULT_TOLERANCE="--restart"
				MPC_ARG_FT_SCRIPT_PATH="`echo "A$arg" | sed -re 's/A--re?sta?rt?=?//g'`"
				#if the optioanl argument is a relative path -> expand it
				test -n "$MPC_ARG_FT_SCRIPT_PATH" && test -z "`echo "$MPC_ARG_FT_SCRIPT_PATH" | egrep "^/"`" && MPC_ARG_FT_SCRIPT_PATH="$PWD/$MPC_ARG_FT_SCRIPT_PATH"
				;;
			--ft-host=*)
				assert_have_dmtcp "$arg"
				DMTCP_ARG_FT_HOST="$(echo "A$arg" | sed -e 's/A--ft-host=//g')"
				;;
			--ft-port=*)
				assert_have_dmtcp "$arg"
				DMTCP_ARG_FT_PORT="$(echo "A$arg" | sed -e 's/A--ft-port=//g')"
				;;
			--noversion-details|\
			--version-details|\
			--clean|\
			--tmp_dir=*|\
			--mic-nb-task=*|\
			--host-nb-task=*|\
			--nb-host=*|\
			--nb-mic=*|\
			--report|\
			--migration|\
			--noreport|\
			--disable-share-node|\
			--share-node|\
			-mpi-only)
				echo "INFO: $arg option is deprectated"
			;;
			--)
				ARG_PARSING_ENABLED="false"
				;;
			*)
				LAUNCHER_OPTION_BINARY="$LAUNCHER_OPTION_BINARY $arg"
				ARG_PARSING_ENABLED="false"
				;;
		esac
	else
		if test "$LAUNCHER_OPTION_BINARY" = "" ; then
			LAUNCHER_OPTION_BINARY="$arg"
		else
			arg="`echo A$arg | sed s#\"A$arg\"#\"$arg\"#g | sed s#' '#@MPC_LINK_ARGS@#g`"
			LAUNCHER_OPTION_BINARY_ARGS="$LAUNCHER_OPTION_BINARY_ARGS $arg"
		fi
	fi
done

############################
# Fault Tollerance Support #
############################

DMTCP_ARG_FT_PORT=""
DMTCP_ARG_FT_HOST=""

dmtcp_fault_tolerance_deploy()
{
	SLURM_PMI_KVS_DUP_KEYS=1
	export SLURM_PMI_KVS_DUP_KEYS

	command -v dmtcp_launch dmtcp_coordinator > /dev/null 2>&1
	if test "$?" != "0"; then
		mpcrun_error "FT programs not found (Did you compile with --enable-mpc-ft ?)"
	fi

	#if the coordinator has to be embedded
	if test -z "$DMTCP_ARG_FT_HOST" -a -z "$DMTCP_ARG_FT_PORT"; then
		port_file="$(mktemp)"
		DMTCP_ARG_FT_PORT=""
		DMTCP_ARG_FT_HOST="$(hostname)"

		$LAUNCHER_SHOW_CMD dmtcp_coordinator -q --daemon --exit-on-last -p 0 --port-file "$port_file"

		#wait for coordinator booting... (copied from DMTCP's examples)
		if test -z "$LAUNCHER_SHOW_CMD"; then
			while true; do
				if [ -f "$port_file" ]; then
					DMTCP_ARG_FT_PORT=$(cat "$port_file")
					if [ -n "$DMTCP_ARG_FT_PORT" ]; then
						break
					fi
				fi
			done
		fi
		rm "$port_file"
	else
		test -z "$DMTCP_ARG_FT_PORT" && DMTCP_ARG_FT_PORT="7779"
		test -z "$DMTCP_ARG_FT_HOST" && DMTCP_ARG_FT_HOST="localhost"
	fi

	if test "x$MPC_ARG_FAULT_TOLERANCE" = "x--checkpoint"; then
		#this disallows the 'option forwarding capability'
		LAUNCHER_OPTION_BINARY="dmtcp_launch -h $DMTCP_ARG_FT_HOST -p $DMTCP_ARG_FT_PORT --rm --ckpt-signal 30 ${LAUNCHER_OPTION_BINARY}"

	elif test "x$MPC_ARG_FAULT_TOLERANCE" = "x--restart"; then
		test -z "$MPC_ARG_FT_SCRIPT_PATH" && MPC_ARG_FT_SCRIPT_PATH="$PWD/dmtcp_restart_script.sh"
		LAUNCHER_OPTION_BINARY="$MPC_ARG_FT_SCRIPT_PATH -h $DMTCP_ARG_FT_HOST -p $DMTCP_ARG_FT_PORT"
		LAUNCHER_CONFIG_LAUNCH_MODE="alloc"
		echo "Application Restarting. Please wait..."
	fi
}


# Trigger FT if needed

if test -n "$MPC_ARG_FAULT_TOLERANCE" ; then
	dmtcp_fault_tolerance_deploy
fi

#######################
# Handle Process Mode #
#######################

if test "$MPC_IN_PROCESS_MODE" = "yes"; then
	# In process mode process NB is Task NB
	LAUNCHER_OPTION_PROCESS_NB="$MPC_ARG_TASK_NB"
fi

#################
# Sanity Checks #
#################

# You need at least one node
if test "$LAUNCHER_OPTION_NODE_NB" = "0" ; then
	LAUNCHER_OPTION_NODE_NB="1"
fi

# You need at least one process
if test "$LAUNCHER_OPTION_PROCESS_NB" = "0" ; then
	LAUNCHER_OPTION_PROCESS_NB="1"
fi

######################
# Expand to MPC_ARGS #
######################

MPC_STARTUP_ARGS=""

#
# Argument expansion helpers
#

add_flag(){
	if test "x$2" = "x1"; then
		MPC_STARTUP_ARGS="$MPC_STARTUP_ARGS ${1}"
	fi
}

append_arg()
{
	if test -n "$1"; then
		if test "x$2" = "x1"; then
			MPC_STARTUP_ARGS="$MPC_STARTUP_ARGS ${1}"
		fi
	fi
}

add_arg(){
	if test -n "$2"; then
		MPC_STARTUP_ARGS="$MPC_STARTUP_ARGS ${1}=${2}"
	fi
}

#
# Argument Expansion
#

if test "$LAUNCHER_CPU_NB_WAS_SET" = "1" ; then
	if test "$MPC_ARG_FORCE_CPU_NB" != ""  ; then
		add_arg "--processor-number" "$MPC_ARG_FORCE_CPU_NB"
	else
		add_arg "--processor-number" "$LAUNCHER_OPTION_CPU_NB"
	fi
fi

add_arg "--mpc-verbose" "$CONFIG_MPC_VERBOSE"

add_flag "--enable-smt" "$CONFIG_ENABLE_SMT"
add_flag "--enable-graphic-placement" "$CONFIG_TOPOLOGY_DUMP_GRAPHIC"
add_flag "--enable-text-placement" "$CONFIG_TOPOLOGY_DUMP_TEXT"
append_arg "--enable-accl" "$CONFIG_ACCELERATOR_SUPPORT"

append_arg "$MPC_ARG_THREAD_TYPE" "1"
append_arg "$MPC_ARG_NETWORKING" "1"

append_arg "$MPC_ARG_FAULT_TOLERANCE" "1"

add_arg "--task-number" "$MPC_ARG_TASK_NB"
add_arg "--process-number" "$LAUNCHER_OPTION_PROCESS_NB"
add_arg "--node-number" "$LAUNCHER_OPTION_NODE_NB"
add_arg "--node-number" "$LAUNCHER_OPTION_NODE_NB"

add_arg "--launcher" "$LAUNCHER_PLUGIN"
add_arg "--profiling" "$CONFIG_PROFILING"


##############################
# Configure Debugger Support #
##############################

# Activave custom MPC_THREAD_DB only for user-level threads

echo "$MPC_ARG_THREAD_TYPE" | grep "pthread" > /dev/null 2>&1

if test "x$?" = "x0"; then
	GDB_LIBTHREAD_DB=""
else
	GDB_LIBTHREAD_DB="${MPC_LIB_DIR}/libmpc_thread_db.so"
fi

DEBUGGER_LIST=""

if test "${DEBUG}" = "mpc-gdb"; then
	if test "$DEBUGGER_LIST" = "" ; then 
		DEBUG=gdb
	else
		DEBUG="${MPC_BIN_DIR}/../mpc-gdb-${DEBUGGER_LIST}/bin/mpc-gdb"
	fi
fi


#compute suffix
if test "$DEBUG" = "" ; then
	LAUNCH_SUFFIX="$LAUNCHER_PLUGIN"
else
	echo "Using $DEBUG as debugger"
	LAUNCH_SUFFIX="${LAUNCHER_PLUGIN}_$(basename ${DEBUG})"
fi

###########################################
# Now Proceed to load the Launcher Plugin #
###########################################

if test -n "${CONFIG_USER_LAUNCHERS}" -a -f "${CONFIG_USER_LAUNCHERS}/mpcrun_${LAUNCH_SUFFIX}"; then
	. "${CONFIG_USER_LAUNCHERS}/mpcrun_${LAUNCH_SUFFIX}"
elif test -f "${LAUNCHER_CONFIG_BINS_HOME}_${LAUNCH_SUFFIX}"; then
	. "${LAUNCHER_CONFIG_BINS_HOME}_${LAUNCH_SUFFIX}"
else
	echo "Invalid launcher : ${LAUNCH_SUFFIX}" 1>&2
	exit 1
fi

#####################
# Export All Values #
#####################

export MPC_AUTO_KILL_TIMEOUT=$CONFIG_AUTOKILL
export MPC_SYMBOL_REGEX="MPI_Init"
export MPC_LAUNCH_COMMAND="${LAUNCH_COMMAND}"
export MPC_STARTUP_ARGS
export LAUNCHER_OPTION_PROCESS_NB
export LAUNCHED_WITH_MPCRUN=1
export LAUNCHER_CONFIG_JOB_MANAGER
test -n "$GDB_LIBTHREAD_DB" && export GDB_LIBTHREAD_DB

#########################################
# Trap SIGINT to kill all process Group #
#########################################

trap "kill -s 2 0" INT

##################################################
# Run the actuall command as generated by Plugin #
##################################################

$LAUNCHER_SHOW_CMD $LAUNCH_COMMAND

exit $?