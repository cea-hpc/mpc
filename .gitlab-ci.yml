#Available stages to run in 'automatic' processing:
# For convenience, implicit stages have been made explicit here...
stages:
  - Initialization
  - Builds
  - Basic Testing
  - Regular Testing
  - Benchmarks
  - Applications
  - Finalization

.run_by_main: &run_by_main
  only:
  - devel
  - pt_devel
  - merge_requests
  - web

############################
##### EXTRA ACTIONS ########
############################
#these actions should herit from implicit stages ".pre" and ".post"

# pre-actions to cleanup the machine before the run
# this job will be run in ANY pipeline -> ensure to enable all proper tags
# CAUTION : Otherwise tag-specific runners won't allow to run the whole pipeline because
# both .pre and .post cannot be scheduled (thus, why not using user-defined pre and post
# to avoid them to be run systematically ?)
Env Sanitize:
  <<: *run_by_main
  stage: Initialization
  script:
    - mkdir -p $HOME/GL_$CI_PIPELINE_ID/{build,buildspack,install,test}
    - echo "Environment Cleaned !"

# post-actions to cleanup the machine after the run
# The last line may not be necessary as a pipeline start run something like a "git clean" before running
# This implies a probable issue when multiple piplines are run concurrently on the same project :(
# Please read the CAUTION above !
Artifact Deletion:
  <<: *run_by_main
  stage: Finalization
  allow_failure: true
  when: on_success
  script:
    - $HOME/clean_old_pipelines.sh
    - rm -rf $HOME/$CI_PIPELINE_ID/
    - spack env rm -y env_$CI_PIPELINE_ID || true

Resource Relinquishing:
  <<: *run_by_main
  stage: Finalization
  allow_failure: true
  when: always
  script:
  #
  - scancel --name GL-build_$CI_PIPELINE_ID
  # Ugly, our way to kill allocations from tests
  - scancel -u $USER


############################
####### BUILD STAGE ########
############################

# MPC should be built (almost) before anything else
MPC Compilation:
  <<: *run_by_main
  stage: Builds
  script:
  - cd $HOME/GL_$CI_PIPELINE_ID/build
  - srun -J GL-build_$CI_PIPELINE_ID -N 1 -c 8 ${CI_PROJECT_DIR}/installmpc -vv --disable-spack --prefix=$HOME/GL_$CI_PIPELINE_ID/install --mpc-option='--with-slurm --enable-debug'

MPC Compilation Spack:
  <<: *run_by_main
  stage: Builds
  allow_failure: true
  script:
  - cd $HOME/GL_$CI_PIPELINE_ID/buildspack
  - spack env rm -y env_$CI_PIPELINE_ID || true
  - spack env create env_$CI_PIPELINE_ID
  - spack env activate env_$CI_PIPELINE_ID
  - srun -J GL-build_$CI_PIPELINE_ID -N 1 -c 8 ${CI_PROJECT_DIR}/installmpc -vv --enable-spack-build --disable-build --prefix=$HOME/GL_$CI_PIPELINE_ID/install_spack --mpc-option='--with-slurm --enable-debug'


############################
####### TEST STAGE ########
############################

# a BASIC one, to stop the pipeline early in case of major issue (not able to compile/run a simple test)
Simple run:
  <<: *run_by_main
  stage: Basic Testing
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=simple --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/simple

# a BASIC one, to stop the pipeline early in case of major issue (not able to compile/run a simple test)
Simple run Spack:
  <<: *run_by_main
  stage: Basic Testing
  allow_failure: true
  dependencies:
    - MPC Compilation Spack
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install_spack --select=simple --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/simple

MPC Config:
  <<: *run_by_main
  stage: Basic Testing
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=MPC_Config --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/mpc_config

Fortran:
  <<: *run_by_main
  stage: Basic Testing
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=fortran/UnitTests --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/fortran

      #Types:
      #  stage: Basic Testing
      #  script:
      #    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
      #    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=UnitTests/check_types --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/types

# a regular test, to assess some basic MPC feature
Privatization:
  <<: *run_by_main
  stage: Regular Testing
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=gcc --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/privatization

Message Passing:
  <<: *run_by_main
  stage: Regular Testing
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=MPI/MessagePassing --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/mp

OpenMP:
  <<: *run_by_main
  stage: Regular Testing
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=OpenMP/BOTS --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/omp

Fortran 90:
  <<: *run_by_main
  stage: Regular Testing
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=fortran/f90/Examples --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/fortran90

# a larger test, known to take more time and to stress the runtime a bit more than previous jobs
IMB (Check):
  <<: *run_by_main
  stage: Benchmarks
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=MPI/IMB/check --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/imb

Communicators (ANL):
  <<: *run_by_main
  stage: Benchmarks
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=MPI/Intel_ANL/communicators --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/comms

Lulesh:
  <<: *run_by_main
  stage: Applications
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=applications/lulesh --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/lulesh

MiniFE:
  <<: *run_by_main
  stage: Applications
  script:
    - cd ${CI_PROJECT_DIR}/MPC_Test_Suite/
    - ./mpc_validation -X --color -v --prefix=$HOME/GL_$CI_PIPELINE_ID/install --select=applications/miniFe --test-dir=$HOME/GL_${CI_PIPELINE_ID}/test/minife

###################################
####### MANUALLY TRIGGERED ########
###################################
#This section gathers jobs not scheduled to be part of the standard pipeline.
#They could be run manually or periodically.

#When triggered through a variable, MPC is built in containers with fixed software stack (base compiler, libc, etc...)
# to ensure MPC to compile in a large variety of environments

Debian Stretch:
  stage: Regular Testing
  script: "docker run --rm -it paratoolsfrance/mpc-env:debian-stretch $HOME/docker/run_installmpc.sh"
  tags:
    - "docker"
  only:
    variables:
      - $MPC_CI_MODE == "multibuild"

Centos 7:
  stage: Regular Testing
  script: "docker run --rm -it paratoolsfrance/mpc-env:centos-7 $HOME/docker/run_installmpc.sh"
  tags:
    - "docker"
  only:
    variables:
      - $MPC_CI_MODE == "multibuild"
