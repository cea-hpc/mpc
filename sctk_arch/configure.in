#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(libarch, 0.1, marc.perache@cea.fr)
AC_CONFIG_SRCDIR([libcontext])
AC_CONFIG_HEADER([include/libarchconfig.h])

# Checks for programs.
AC_PROG_CC
AC_PATH_PROG(AR,ar)

# Checks for libraries.

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([stdint.h stdlib.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME

# Checks for library functions.
AC_CHECK_FUNCS([gettimeofday])

#COMPILATION FLAGS
for comp_flag in "-fPIC" ; do 

OLD_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS $comp_flag"
AC_MSG_CHECKING([compilation flag $comp_flag])
AC_COMPILE_IFELSE(int main(int argc, char** argv){return 0;},res_comp_flag=yes)

if test "$res_comp_flag" = "yes" ; then 
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
   CFLAGS=$OLD_CFLAGS
fi

done

detect_macro(){
AC_MSG_CHECKING([macro $1])
AC_COMPILE_IFELSE(int main(int argc, char** argv){
		      #ifndef $1
		      #error "$1 undefined"
		      #endif
		      return 0;},res_macro=yes,res_macro=no)

if test "$res_macro" = "yes" ; then 
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi
}

# MPC CONFIG DETECTION
AC_MSG_CHECKING([macro __func__])
AC_COMPILE_IFELSE(
#include <stdio.h>
int main(int argc, char** argv){
   fprintf(stderr,"%s",__func__);		   
   return 0;
},res_macro=yes,res_macro=no)

if test "$res_macro" = "yes" ; then 
   SCTK_FUNCTION="__func__"
   AC_MSG_RESULT(yes)
   AC_SUBST(SCTK_FUNCTION)
else
   AC_MSG_RESULT(no)
   AC_MSG_ERROR([Unable to detect function name])
fi
AC_MSG_CHECKING([macro __STRING])
AC_COMPILE_IFELSE(
#include <stdio.h>
int main(int argc, char** argv){
   fprintf(stderr,"%s",__STRING(toto));		   
   return 0;
},res_macro=yes,res_macro=no)
if test "$res_macro" = "yes" ; then 
  SCTK_STRING="__STRING"
   AC_MSG_RESULT(yes)
   AC_SUBST(SCTK_STRING)
else
   AC_MSG_RESULT(no)
   AC_MSG_ERROR([Unable to convert to string])
fi
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(size_t)
AC_CHECK_SIZEOF(void*)
AC_CHECK_SIZEOF(long long)

# LIB CONFIG
AC_MSG_CHECKING([arch for libcontext])

for context_arch in GEN X86_64 ; do 
AC_COMPILE_IFELSE(
#define CONTEXT_$context_arch

#if defined(__i686__) && !defined(__x86_64__)
#define SCTK_i686_ARCH_SCTK
#elif defined(__x86_64__)
#define SCTK_x86_64_ARCH_SCTK
#elif defined(__ia64__)
#define SCTK_ia64_ARCH_SCTK
#elif defined(__arm__)
#define SCTK_arm_ARCH_SCTK
#elif defined(__powerpc64__)
#define SCTK_ppc64_ARCH_SCTK
#else
  #error "Unknown architecture"
#endif

#if defined(SCTK_i686_ARCH_SCTK) && !defined(CONTEXT_GEN)
#error "Wrong context detection"
#endif

#if defined(SCTK_x86_64_ARCH_SCTK) && !defined(CONTEXT_X86_64)
#error "Wrong context detection"
#endif

#if defined(SCTK_ia64_ARCH_SCTK) && !defined(CONTEXT_GEN)
#error "Wrong context detection"
#endif

#if defined(SCTK_arm_ARCH_SCTK) && !defined(CONTEXT_GEN)
#error "Wrong context detection"
#endif

#if defined(SCTK_ppc64_ARCH_SCTK) && !defined(CONTEXT_GEN)
#error "Wrong context detection"
#endif


int main(){
  return 0;
}
,CONTEXT_ARCH=$context_arch)

done
if test "$CONTEXT_ARCH" = "" ; then 
AC_MSG_RESULT(Unsupported)
AC_MSG_ERROR(Your architecture is unsupported)
fi
AC_SUBST(CONTEXT_ARCH)

AC_MSG_RESULT($CONTEXT_ARCH)


# PTHREAD
AC_MSG_NOTICE(Check Pthreads functions)
AC_CHECK_HEADER([pthread.h])
AC_CHECK_LIB(pthread,pthread_create,LIBS="$LIBS -lpthread")
AC_CHECK_SIZEOF(pthread_t,,[#include <pthread.h>])

AC_CHECK_FUNCS(pthread_yield)
AC_CHECK_FUNCS(pthread_atfork )
AC_CHECK_FUNCS(pthread_cancel )
AC_CHECK_FUNCS(pthread_create )
AC_CHECK_FUNCS(pthread_detach )
AC_CHECK_FUNCS(pthread_equal )
AC_CHECK_FUNCS(pthread_exit )
AC_CHECK_FUNCS(pthread_getconcurrency )
AC_CHECK_FUNCS(pthread_getcpuclockid )
AC_CHECK_FUNCS(pthread_getschedparam )
AC_CHECK_FUNCS(pthread_getspecific )
AC_CHECK_FUNCS(pthread_join )
AC_CHECK_FUNCS(pthread_key_create )
AC_CHECK_FUNCS(pthread_key_delete )
AC_CHECK_FUNCS(pthread_once )

AC_CHECK_TYPE(pthread_attr_t,is_thread=yes,is_thread=no,[#include <pthread.h>])
if test "$is_thread" = "yes" ; then 
AC_CHECK_SIZEOF(pthread_attr_t,,[#include <pthread.h>])
AC_CHECK_FUNCS(pthread_attr_destroy )
AC_CHECK_FUNCS(pthread_attr_getdetachstate )
AC_CHECK_FUNCS(pthread_attr_getguardsize )
AC_CHECK_FUNCS(pthread_attr_getinheritsched )
AC_CHECK_FUNCS(pthread_attr_getschedparam )
AC_CHECK_FUNCS(pthread_attr_getschedpolicy )
AC_CHECK_FUNCS(pthread_attr_getscope )
AC_CHECK_FUNCS(pthread_attr_getstack )
AC_CHECK_FUNCS(pthread_attr_getstackaddr )
AC_CHECK_FUNCS(pthread_attr_getstacksize )
AC_CHECK_FUNCS(pthread_attr_init )
AC_CHECK_FUNCS(pthread_attr_setdetachstate )
AC_CHECK_FUNCS(pthread_attr_setguardsize )
AC_CHECK_FUNCS(pthread_attr_setinheritsched )
AC_CHECK_FUNCS(pthread_attr_setschedparam )
AC_CHECK_FUNCS(pthread_attr_setschedpolicy )
AC_CHECK_FUNCS(pthread_attr_setscope )
AC_CHECK_FUNCS(pthread_attr_setstack )
AC_CHECK_FUNCS(pthread_attr_setstackaddr )
AC_CHECK_FUNCS(pthread_attr_setstacksize )
fi


AC_CHECK_TYPE(pthread_barrier_t,is_barrier=yes,is_barrier=no,[#include <pthread.h>])
if test "$is_barrier" = "yes" ; then 
AC_CHECK_SIZEOF(pthread_barrier_t,,[#include <pthread.h>])
AC_CHECK_SIZEOF(pthread_barrierattr_t,,[#include <pthread.h>])
AC_CHECK_FUNCS(pthread_barrier_destroy )
AC_CHECK_FUNCS(pthread_barrier_init )
AC_CHECK_FUNCS(pthread_barrier_wait )
AC_CHECK_FUNCS(pthread_barrierattr_destroy )
AC_CHECK_FUNCS(pthread_barrierattr_getpshared )
AC_CHECK_FUNCS(pthread_barrierattr_init )
AC_CHECK_FUNCS(pthread_barrierattr_setpshared )
fi



AC_CHECK_TYPE(pthread_cond_t,is_cond=yes,is_cond=no,[#include <pthread.h>])
if test "$is_cond" = "yes" ; then 
AC_CHECK_SIZEOF(pthread_cond_t,,[#include <pthread.h>])
AC_CHECK_SIZEOF(pthread_condattr_t,,[#include <pthread.h>])
AC_CHECK_FUNCS(pthread_cond_broadcast )
AC_CHECK_FUNCS(pthread_cond_destroy )
AC_CHECK_FUNCS(pthread_cond_init )
AC_CHECK_FUNCS(pthread_cond_signal )
AC_CHECK_FUNCS(pthread_cond_timedwait )
AC_CHECK_FUNCS(pthread_cond_wait )
AC_CHECK_FUNCS(pthread_condattr_destroy )
AC_CHECK_FUNCS(pthread_condattr_getclock )
AC_CHECK_FUNCS(pthread_condattr_getpshared )
AC_CHECK_FUNCS(pthread_condattr_init )
AC_CHECK_FUNCS(pthread_condattr_setclock )
AC_CHECK_FUNCS(pthread_condattr_setpshared )
fi


AC_CHECK_TYPE(pthread_mutex_t,is_mutex=yes,is_mutex=no,[#include <pthread.h>])
if test "$is_mutex" = "yes" ; then 
AC_CHECK_SIZEOF(pthread_mutex_t,,[#include <pthread.h>])
AC_CHECK_SIZEOF(pthread_mutexattr_t,,[#include <pthread.h>])
AC_CHECK_FUNCS(pthread_mutex_destroy )
AC_CHECK_FUNCS(pthread_mutex_getprioceiling )
AC_CHECK_FUNCS(pthread_mutex_init )
AC_CHECK_FUNCS(pthread_mutex_lock )
AC_CHECK_FUNCS(pthread_mutex_setprioceiling )
AC_CHECK_FUNCS(pthread_mutex_timedlock )
AC_CHECK_FUNCS(pthread_mutex_trylock )
AC_CHECK_FUNCS(pthread_mutex_unlock )
AC_CHECK_FUNCS(pthread_mutexattr_destroy )
AC_CHECK_FUNCS(pthread_mutexattr_getprioceiling )
AC_CHECK_FUNCS(pthread_mutexattr_getprotocol )
AC_CHECK_FUNCS(pthread_mutexattr_getpshared )
AC_CHECK_FUNCS(pthread_mutexattr_gettype )
AC_CHECK_FUNCS(pthread_mutexattr_init )
AC_CHECK_FUNCS(pthread_mutexattr_setprioceiling )
AC_CHECK_FUNCS(pthread_mutexattr_setprotocol )
AC_CHECK_FUNCS(pthread_mutexattr_setpshared )
AC_CHECK_FUNCS(pthread_mutexattr_settype )
fi


AC_CHECK_TYPE(pthread_rwlock_t,is_rwlock=yes,is_rwlock=no,[#include <pthread.h>])
if test "$is_rwlock" = "yes" ; then 
AC_CHECK_SIZEOF(pthread_rwlock_t,,[#include <pthread.h>])
AC_CHECK_SIZEOF(pthread_rwlockattr_t,,[#include <pthread.h>])
AC_CHECK_FUNCS(pthread_rwlock_destroy )
AC_CHECK_FUNCS(pthread_rwlock_init )
AC_CHECK_FUNCS(pthread_rwlock_rdlock )
AC_CHECK_FUNCS(pthread_rwlock_timedrdlock )
AC_CHECK_FUNCS(pthread_rwlock_timedwrlock )
AC_CHECK_FUNCS(pthread_rwlock_tryrdlock )
AC_CHECK_FUNCS(pthread_rwlock_trywrlock )
AC_CHECK_FUNCS(pthread_rwlock_unlock )
AC_CHECK_FUNCS(pthread_rwlock_wrlock )
AC_CHECK_FUNCS(pthread_rwlockattr_destroy )
AC_CHECK_FUNCS(pthread_rwlockattr_getpshared )
AC_CHECK_FUNCS(pthread_rwlockattr_init )
AC_CHECK_FUNCS(pthread_rwlockattr_setpshared )
fi

AC_CHECK_FUNCS(pthread_self )
AC_CHECK_FUNCS(pthread_setcancelstate )
AC_CHECK_FUNCS(pthread_setcanceltype )
AC_CHECK_FUNCS(pthread_setconcurrency )
AC_CHECK_FUNCS(pthread_setschedparam )
AC_CHECK_FUNCS(pthread_setschedprio )
AC_CHECK_FUNCS(pthread_setspecific )

AC_CHECK_TYPE(pthread_spinlock_t,is_spinlock=yes,is_spinlock=no,[#include <pthread.h>])
if test "$is_spinlock" = "yes" ; then 
AC_CHECK_SIZEOF(pthread_spinlock_t)
AC_CHECK_FUNCS(pthread_spin_destroy )
AC_CHECK_FUNCS(pthread_spin_init )
AC_CHECK_FUNCS(pthread_spin_lock )
AC_CHECK_FUNCS(pthread_spin_trylock )
AC_CHECK_FUNCS(pthread_spin_unlock )
fi 

AC_CHECK_FUNCS(pthread_testcancel )


AC_CHECK_HEADER([semaphore.h])
AC_CHECK_TYPE(sem_t,is_semaphore=yes,is_semaphore=no,[#include <semaphore.h>])
if test "$is_semaphore" = "yes" ; then 
AC_CHECK_SIZEOF(sem_t,,[#include <semaphore.h>])
AC_CHECK_FUNCS(sem_init )
AC_CHECK_FUNCS(sem_wait )
AC_CHECK_FUNCS(sem_trywait )
AC_CHECK_FUNCS(sem_post )
AC_CHECK_FUNCS(sem_getvalue )
AC_CHECK_FUNCS(sem_destroy )
AC_CHECK_FUNCS(sem_open )
AC_CHECK_FUNCS(sem_close )
AC_CHECK_FUNCS(sem_unlink )
AC_CHECK_FUNCS(sem_timedwait )
fi 

AC_CHECK_FUNCS(pthread_sigmask )
AC_CHECK_FUNCS(pthread_kill )
AC_CHECK_FUNCS(sched_get_priority_max )
AC_CHECK_FUNCS(sched_get_priority_min )



AC_OUTPUT(Makefile libcontext/Makefile libpause/Makefile libtimer/Makefile libmicrotask/Makefile include/sctk_config_arch.h)
