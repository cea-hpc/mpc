#!/bin/sh
############################# MPC License ##############################
# Wed Nov 19 15:19:19 CET 2008                                         #
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
#                                                                      #
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
# This file is part of the MPC Runtime.                                #
#                                                                      #
# This software is governed by the CeCILL-C license under French law   #
# and abiding by the rules of distribution of free software.  You can  #
# use, modify and/ or redistribute the software under the terms of     #
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
# following URL http://www.cecill.info.                                #
#                                                                      #
# The fact that you are presently reading this means that you have     #
# had knowledge of the CeCILL-C license and that you accept its        #
# terms.                                                               #
#                                                                      #
# Authors:                                                             #
#   - Adam Julien julien.adam@cea.fr                                   #
#                                                                      #
########################################################################

MPC_VERSION="$1"; shift
PATCHS_LIST="$*"
OUTPUT_FILE="$ROOT_TARBALL/mpc-framework-$MPC_VERSION.spec"
cpt=0
# Checking modules version
if test -z "$HWLOC_VERSION"  ; then
	HWLOC_VERSION="1.6.1"
fi
if test -z "$HYDRA_VERSION"  ; then
	HYDRA_VERSION="1.4.0"
fi
if test -z "$OPENPA_VERSION" ; then
	OPENPA_VERSION="1.0.2"
fi
if test -z "$GDB_VERSION" ; then
	GDB_VERSION="6.8"
fi

#some pre actions
rm -f ${OUTPUT_FILE}

################### SPEC FILE GENERATION #############################
#MPC Description
echo "#" >> ${OUTPUT_FILE}
echo "# MPC-$MPC_VERSION SPEC File" >> ${OUTPUT_FILE}
echo "# Generated by generator.sh" >> ${OUTPUT_FILE}
echo "#" >> ${OUTPUT_FILE}
echo "Summary: Multi-Processor Computing" >> ${OUTPUT_FILE}
echo "Name: mpc-framework" >> ${OUTPUT_FILE}
echo "Version: $MPC_VERSION" >> ${OUTPUT_FILE}
echo "Release: 1" >> ${OUTPUT_FILE}
echo "License: LGPL" >> ${OUTPUT_FILE}
echo "Group: Applications" >> ${OUTPUT_FILE}
echo "Source: mpc-framework-$MPC_VERSION.tar.gz" >> ${OUTPUT_FILE}
echo "URL: http://www.mpc.sourceforge.net/" >> ${OUTPUT_FILE}
echo "Distribution: Linux" >> ${OUTPUT_FILE}
echo "Packager: MPC Team <mpc-devel@lists.sourceforge.net>" >> ${OUTPUT_FILE}
echo "BuildRequires: make, gcc, gcc-gfortran, libibverbs-devel, gmp-devel, mpfr-devel, ncurses-devel, patch" >> ${OUTPUT_FILE}
echo "Requires: mpc-framework-runtime mpc-framework-devel mpc-framework-gcc mpc-framework-gdb" >> ${OUTPUT_FILE}

#patchs
if test ! -z "${PATCHS_LIST}" ; then
	for patch in ${PATCHS_LIST}
	do
		echo "CHILD: PATCH: $patch"
		echo "Patch$cpt: $patch" >> ${OUTPUT_FILE}
		cpt=$(( cpt + 1 ))
	done
fi
echo "" >> ${OUTPUT_FILE}

### Sub-packages
#Runtime
echo "%package runtime" >> ${OUTPUT_FILE}
echo "Requires: libibverbs" >> ${OUTPUT_FILE}
echo "Group: Applications" >> ${OUTPUT_FILE}
echo "Summary: Runtime files for the MPC framework." >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}
#devel
echo "%package devel" >> ${OUTPUT_FILE}
echo "Requires: mpc-framework-runtime" >> ${OUTPUT_FILE}
echo "Group: Applications" >> ${OUTPUT_FILE}
echo "Summary: The developpement files for the MPC framework." >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}
#mpc-gcc
echo "%package gcc" >> ${OUTPUT_FILE}
echo "Requires: mpc-framework-runtime gmp mpfr" >> ${OUTPUT_FILE}
echo "Group: Applications" >> ${OUTPUT_FILE}
echo "Summary: The patched gcc for the MPC framework (required to use MPC OpenMP)." >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}
#mpc-gdb
echo "%package gdb" >> ${OUTPUT_FILE}
echo "Requires: mpc-framework-runtime ncurses" >> ${OUTPUT_FILE}
echo "Group: Applications" >> ${OUTPUT_FILE}
echo "Summary: The patched gdb for the MPC framework (to support MPC user threads in GDB debugger)." >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#Some sub-packages description
echo "%description" >> ${OUTPUT_FILE}
echo "The MPC (MultiProcessor Computing) framework provides a unified parallel runtime designed to improve the scalability and performances of applications running on clusters of (very) large multiprocessor/multicore NUMA nodes." >> ${OUTPUT_FILE}
echo "This meta-package will install all MPC sub-packages." >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}
echo "%description runtime" >> ${OUTPUT_FILE}
echo "The MPC (MultiProcessor Computing) framework provides a unified parallel runtime designed to improve the scalability and performances of applications running on clusters of (very) large multiprocessor/multicore NUMA nodes." >> ${OUTPUT_FILE}
echo "This package provide all runtime files (libs and launchers)." >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}
echo "%description devel" >> ${OUTPUT_FILE}
echo "The MPC (MultiProcessor Computing) framework provides a unified parallel runtime designed to improve the scalability and performances of applications running on clusters of (very) large multiprocessor/multicore NUMA nodes." >> ${OUTPUT_FILE}
echo "This package provide all developpement files (headers, API manpages, compiler wrappers)" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}
echo "%description gcc" >> ${OUTPUT_FILE}
echo "The MPC (MultiProcessor Computing) framework provides a unified parallel runtime designed to improve the scalability and performances of applications running on clusters of (very) large multiprocessor/multicore NUMA nodes." >> ${OUTPUT_FILE}
echo "This package provide the patched version of GCC to use MPC implementation of OpenMP standard." >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}
echo "%description gdb" >> ${OUTPUT_FILE}
echo "The MPC (MultiProcessor Computing) framework provides a unified parallel runtime designed to improve the scalability and performances of applications running on clusters of (very) large multiprocessor/multicore NUMA nodes." >> ${OUTPUT_FILE}
echo "This package provide the patched version of GDB to support MPC user threads in GDB." >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#modules versions definition
echo "%define hwloc_version	$HWLOC_VERSION" >> ${OUTPUT_FILE}
echo "%define hydra_version	$HYDRA_VERSION" >> ${OUTPUT_FILE}
echo "%define openpa_version	$OPENPA_VERSION" >> ${OUTPUT_FILE}
echo "%define gdb_version	$GDB_VERSION" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#some pre actions
echo "%prep" >> ${OUTPUT_FILE}
echo "%setup" >> ${OUTPUT_FILE}

if test ! -z "${PATCHS_LIST}" ; then
	cpt=0
	for patch in ${PATCHS_LIST}
	do
		echo "%patch$cpt -p1" >> ${OUTPUT_FILE}
		cpt=$(( cpt + 1 ))
	done
fi
echo "" >> ${OUTPUT_FILE}

#build instructions
echo "%build" >> ${OUTPUT_FILE}
echo "./configure --disable-prefix-check --enable-debug-messages --prefix=/usr/local/mpc" >> ${OUTPUT_FILE}
echo "make ${MAKE_J}" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#installation instructions
echo "%install" >> ${OUTPUT_FILE}
echo 'make install DESTDIR=$RPM_BUILD_ROOT' >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#cleanup instruction
echo "%clean" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#MPC-FRAMEWORK meta-package installation
echo "%files" >> ${OUTPUT_FILE}
echo "%defattr(-,root,root,-)" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#MPC-RUNTIME installation
echo "%files runtime" >> ${OUTPUT_FILE}
echo "%defattr(-,root,root,-)" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/lib/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/man/man1/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_status" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpcvars.sh" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpcrun_opt/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpcvars.csh" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpcrun" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hydra-%{hydra_version}/lib/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hydra-%{hydra_version}/bin/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-openpa-%{openpa_version}/lib/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-openpa-%{openpa_version}/share/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hwloc-%{hwloc_version}/lib/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hwloc-%{hwloc_version}/bin/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hwloc-%{hwloc_version}/share/man/man7/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hwloc-%{hwloc_version}/share/man/man1/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hwloc-%{hwloc_version}/share/hwloc/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hwloc-%{hwloc_version}/share/doc/*" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#MPC-DEVEL installation
echo "%files devel" >> ${OUTPUT_FILE}
echo "%defattr(-,root,root,-)" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/man/man3/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cflags" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cc" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cc_default" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cc_global" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cc_global_default" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_f77_default" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_f77" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cxx" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cxx_default" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_ldflags" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/include/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-openpa-%{openpa_version}/include/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hwloc-%{hwloc_version}/share/man/man3/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-hwloc-%{hwloc_version}/include/*" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#MPC-GCC installation
echo "%files gcc" >> ${OUTPUT_FILE}
echo "%defattr(-,root,root,-)" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cc_440" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_f77_440" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cc_global_440" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/bin/mpc_cxx_440" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-gcc-440/*" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-binutils-2.22/*" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#MPC-GDB installation
echo "%files gdb" >> ${OUTPUT_FILE}
echo "%defattr(-,root,root,-)" >> ${OUTPUT_FILE}
echo "/usr/local/mpc/mpc-gdb-%{gdb_version}/*" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#DOC
echo "%doc" >> ${OUTPUT_FILE}
echo "" >> ${OUTPUT_FILE}

#CHANGELOG
echo "%changelog" >> ${OUTPUT_FILE}
