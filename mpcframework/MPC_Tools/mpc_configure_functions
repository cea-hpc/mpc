#!/bin/sh
############################# MPC License ############################## 
# Wed Nov 19 15:19:19 CET 2008                                         # 
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          # 
#                                                                      # 
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            # 
# This file is part of the MPC Runtime.                                # 
#                                                                      # 
# This software is governed by the CeCILL-C license under French law   # 
# and abiding by the rules of distribution of free software.  You can  # 
# use, modify and/ or redistribute the software under the terms of     # 
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     # 
# following URL http://www.cecill.info.                                # 
#                                                                      # 
# The fact that you are presently reading this means that you have     # 
# had knowledge of the CeCILL-C license and that you accept its        # 
# terms.                                                               # 
#                                                                      # 
# Authors:                                                             # 
#   - PERACHE Marc marc.perache@cea.fr                                 # 
#                                                                      # 
######################################################################## 
SCTK_BIN_DIR_LIST="`echo $PATH | sed s/:/' '/g`"

sctk_store_in_arg(){
    eval "$1=\"$2\""
}

sctk_read_in_arg(){
    sctk_read_in_arg_val="\$$1"
    eval "echo $sctk_read_in_arg_val"
}


FUNC_SUCESS=""
FUNC_FAIL=""
sctk_check_if_cached(){
#    CACHE_RESULT="`eval sctk_read_in_arg func_$1`"
#    echo "check $1 |$CACHE_RESULT|"
    
    CACHE_RESULT=""
    if test "`echo $FUNC_SUCESS | grep \" $1 \"`" != "" ; then 
	CACHE_RESULT="1"
    else
	if test "`echo $FUNC_FAIL | grep \" $1 \"`" != "" ; then 
	    CACHE_RESULT="0"
	fi
    fi
}

sctk_cache_sucess(){
#    sctk_store_in_arg func_$1 1
    FUNC_SUCESS="$FUNC_SUCESS $1 "
}

sctk_cache_fail(){
#    sctk_store_in_arg func_$1 0
    FUNC_FAIL="$FUNC_FAIL $1 "
}

OPTION_SUCESS=""
OPTION_FAIL=""
sctk_check_if_cached_option(){
#    CACHE_RESULT="`eval sctk_read_in_arg option_$1`"

    CACHE_RESULT=""
    if test "`echo $OPTION_SUCESS | grep \" $1 \"`" != "" ; then 
	CACHE_RESULT="1"
    else
	if test "`echo $OPTION_FAIL | grep \" $1 \"`" != "" ; then 
	    CACHE_RESULT="0"
	fi
    fi
}

sctk_cache_sucess_option(){
#    sctk_store_in_arg option_$1 1
    OPTION_SUCESS="$OPTION_SUCESS $1 "
}

sctk_cache_fail_option(){
#    sctk_store_in_arg option_$1 0
    OPTION_FAIL="$OPTION_FAIL $1 "
}

FOUND=""
SCTK_FIND_IN_PATH(){
FOUND=""
for i in $SCTK_BIN_DIR_LIST ; do
if test "$FOUND" = "" ; then 
if test -x ${i}/$1 ; then 
FOUND="$i/$1"
sctk_echo_log "Found $i/$1"
else
sctk_echo_log "$1 not in $i"
fi
fi
done
}

SCTK_CHECK_PROG_NOFAIL(){
sctk_printf "Checking $1: "

if test -x $1 ; then 
result yes
else

SCTK_FIND_IN_PATH "$1"

if test "$FOUND" = "" ; then 
perror no
eval $3
else
if test -x $FOUND ; then 
result "yes ($FOUND)"
else
perror no
fi
fi
fi
}

SCTK_CHECK_PROG(){
	PROG=""
	THIS_RESULT="0"
	for iSCTK_CHECK_PROG in $@ ; do 
		if test "$THIS_RESULT" = "0" ; then 
		SCTK_CHECK_PROG_NOFAIL $iSCTK_CHECK_PROG
		if test "$RESULT" = "1" ; then 
			PROG="$iSCTK_CHECK_PROG"
			THIS_RESULT="1"
		fi
		fi
	done
	if test "$THIS_RESULT" = "0" ; then 
		error
	fi
}

SCTK_CHECK_TYPE(){
cat  << EOF  > ${SCTK_CONF_C}
#include <stdio.h>

$1 toto;

int main(){
    return 0;
}
EOF
cat ${SCTK_CONF_C} >> ${LOG_FILE} 2>&1
sctk_printf "Checking type $1: "
echo "$SCTK_CC -D${SCTK_OS}_SYS $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN}">> ${SCTK_CONF_LOG} 2>&1
eval "$SCTK_CC -D${SCTK_OS}_SYS $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN}">> ${SCTK_CONF_LOG} 2>&1
if test "$?" = "0" ; then 
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	result yes
else
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	perror  no
fi

}

SCTK_CHECK_KEYWORD(){
cat  << EOF  > ${SCTK_CONF_C}
#include <stdio.h>

$1 int toto;

int main(){
    return toto;
}
EOF
cat ${SCTK_CONF_C} >> ${LOG_FILE} 2>&1
sctk_printf "Checking keyword $1: "
echo "$SCTK_CC -D${SCTK_OS}_SYS $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN}">> ${SCTK_CONF_LOG} 2>&1
eval "$SCTK_CC -D${SCTK_OS}_SYS $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN}">> ${SCTK_CONF_LOG} 2>&1
if test "$?" = "0" ; then 
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	result yes
else
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	perror  no
fi

}

SCTK_CHECK_KEYWORD_RESTRICT(){
cat  << EOF  > ${SCTK_CONF_C}
#include <stdio.h>

int * $1 toto;

int main(){
    return toto;
}
EOF
cat ${SCTK_CONF_C} >> ${LOG_FILE} 2>&1
sctk_printf "Checking keyword $1: "
echo "$SCTK_CC -D${SCTK_OS}_SYS $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN}">> ${SCTK_CONF_LOG} 2>&1
eval "$SCTK_CC -D${SCTK_OS}_SYS $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN}">> ${SCTK_CONF_LOG} 2>&1
if test "$?" = "0" ; then 
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	result yes
else
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	perror no
fi

}


header(){
chmod 755 ${MPC_SOURCE_DIR}MPC_Tools/mpc_gen_license
(cd $MPC_SOURCE_DIR ; MPC_Tools/mpc_gen_license)
}
header_sh(){
chmod 755 ${MPC_SOURCE_DIR}MPC_Tools/mpc_gen_license
(cd $MPC_SOURCE_DIR ; MPC_Tools/mpc_gen_license Makefile)
}

SCTK_MSG_CHECKING(){
sctk_printf "Checking $@: "
}

SCTK_CHECK_HEADER(){
    for i in $1 ; do 
	SCTK_MSG_CHECKING $i
	CACHE_RESULT=""
	sctk_check_if_cached $i
	if test "$CACHE_RESULT" != "" ; then 
	    if test "$CACHE_RESULT" = "1" ; then 
		result "yes (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="0"
	    else
		result "no (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="1"
	    fi
	else

cat  << EOF  > ${SCTK_CONF_C}
#include <$i>
int main(){
    return 0;
}
EOF
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_CC $SCTK_CFLAGS -c ${SCTK_CONF_C} -o ${SCTK_CONF_OBJ}">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_CC $SCTK_CFLAGS -c ${SCTK_CONF_C} -o ${SCTK_CONF_OBJ}">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_C} ${SCTK_CONF_OBJ} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then 
	    sctk_cache_sucess $i
	    result yes
	else
	    sctk_cache_fail $i
	    error no
	fi
	fi
    done
}

SCTK_CHECK_HEADER_NOFAIL(){
    SCTK_CHECK_HEADER_NOFAIL_RES="0"
    for i in $1 ; do 
	SCTK_MSG_CHECKING $i
	CACHE_RESULT=""
	sctk_check_if_cached $i
	if test "$CACHE_RESULT" != "" ; then 
	    if test "$CACHE_RESULT" = "1" ; then 
		result "yes (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="0"
	    else
		result "no (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="1"
	    fi
	else

cat  << EOF  > ${SCTK_CONF_C}
#include <$i>
int main(){
    return 0;
}
EOF
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_CC $SCTK_CFLAGS -c ${SCTK_CONF_C} -o ${SCTK_CONF_OBJ}">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_CC $SCTK_CFLAGS -c ${SCTK_CONF_C} -o ${SCTK_CONF_OBJ}">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_C} ${SCTK_CONF_OBJ} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then 
	    sctk_cache_sucess $i
	    result yes
	else
	    sctk_cache_fail $i
	    result no
	    SCTK_CHECK_HEADER_NOFAIL_RES="$SCTK_SCTK_CHECK_HEADER_RES"
	fi
	fi
    done
    SCTK_SCTK_CHECK_HEADER_RES="$SCTK_CHECK_HEADER_NOFAIL_RES"
}

SCTK_CHECK_HEADER_GCC(){
    for i in $1 ; do 
	SCTK_MSG_CHECKING $i

cat  << EOF  > ${SCTK_CONF_C}
#include <$1>
int main(){
    return 0;
}
EOF
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_GCC $SCTK_CFLAGS -c ${SCTK_CONF_C} -o ${SCTK_CONF_OBJ}">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_GCC $SCTK_CFLAGS -c ${SCTK_CONF_C} -o ${SCTK_CONF_OBJ}">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_C} ${SCTK_CONF_OBJ} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then 
	    result yes
	else
	    error no
	fi
    done
}

SCTK_CHECK_FUNC_STD(){
if test "$1" = "memset" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>

int main(){
    char* tmp1;
    $1 (tmp1,1,1);
    return 0;
}
EOF
fi
if test "$1" = "memcpy" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>

int main(){
    char* tmp1;
    char* tmp2;
    $1 (tmp1,tmp2,1);
    return 0;
}
EOF
fi
if test "$1" = "strcpy" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>

int main(){
    char* tmp1;
    char* tmp2;
    $1 (tmp1,tmp2);
    return 0;
}
EOF
fi
if test "$1" = "strlen" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>

int main(){
    char* tmp1;
    $1 (tmp1);
    return 0;
}
EOF
fi
if test "$1" = "strcmp" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>

int main(){
    char* tmp1;
    char* tmp2;
    $1 (tmp1,tmp2);
    return 0;
}
EOF
fi
if test "$1" = "memcmp" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>

int main(){
    char* tmp1;
    char* tmp2;
    $1 (tmp1,tmp2,1);
    return 0;
}
EOF
fi
if test "$1" = "strncmp" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>

int main(){
    char* tmp1;
    char* tmp2;
    $1 (tmp1,tmp2,1);
    return 0;
}
EOF
fi
if test "$1" = "vsprintf" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

void sctk_noalloc_fprintf (FILE* stream, const char *format, ...)
{
  va_list ap;
  char tmp[4096];
  va_start (ap, format);
  $1 (tmp, format, ap);
  va_end (ap);
}
int main(){
    sctk_noalloc_fprintf(stderr,"%d",1);
    return 0;
}
EOF
fi
if test "$1" = "fprintf" ; then
cat  << EOF  > ${SCTK_CONF_C}
#include <stdio.h>

int main() {
	fprintf(stdout,"Hello World!!!\n");
	return 0;
}
EOF
fi
if test "$1" = "vfprintf" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

int main(){
    va_list ap;
    vfprintf(stderr,"%d",ap);
    return 0;
}
EOF
fi
if test "$1" = "vsnprintf" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

void sctk_noalloc_fprintf (FILE* stream, const char *format, ...)
{
  va_list ap;
  char tmp[4096];
  va_start (ap, format);
  $1 (tmp, 4096,format, ap);
  va_end (ap);
}
int main(){
    sctk_noalloc_fprintf(stderr,"%d",1);
    return 0;
}
EOF
fi
if test "$1" = "accept" ; then 
cat  << EOF  > ${SCTK_CONF_C}
#include <sys/types.h>
#include <sys/socket.h>

int main(){
    struct sockaddr* tmp1;
    socklen_t* tmp2;
    $1(1,tmp1,tmp2);
    return 0;
}
EOF
fi
if test "$1" = "longjmp"; then
cat << EOF > ${SCTK_CONF_C}
#include <setjmp.h>

int main()
{
        jmp_buf buf;
        if (setjmp(buf) == 0)
        {
                longjmp(buf,5);
        }
        return 0;
}
EOF
fi
if test "$1" = "setjmp"; then
cat << EOF > ${SCTK_CONF_C}
#include <setjmp.h>

int main()
{
        jmp_buf buf;
        setjmp(buf);
        return 0;
}
EOF
fi
}

SCTK_CHECK_FUNC(){
    for i in $1 ; do 
	SCTK_MSG_CHECKING $i
	CACHE_RESULT=""
	sctk_check_if_cached $i
	if test "$CACHE_RESULT" != "" ; then 
	    if test "$CACHE_RESULT" = "1" ; then 
		result "yes (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="0"
	    else
		error "no (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="1"
	    fi
	else
cat  << EOF  > ${SCTK_CONF_C}

int $i ();

int main(){
    $i ();
    return 0;
}
EOF
	SCTK_CHECK_FUNC_STD $i
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then 
	    result yes
	    sctk_cache_sucess $i
	else
	    sctk_cache_fail $i
	    error no
	fi
	fi
    done
}

SCTK_CHECK_FUNC_NOFAIL(){
    for i in $1 ; do 
	SCTK_MSG_CHECKING $i
	CACHE_RESULT=""
	sctk_check_if_cached $i
	if test "$CACHE_RESULT" != "" ; then 
	    if test "$CACHE_RESULT" = "1" ; then 
		result "yes (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="0"
		SCTK_SCTK_CHECK_FUNC_RES="0"
	    else
		perror "no (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="1"
		SCTK_SCTK_CHECK_FUNC_RES="1"
	    fi
	else

cat  << EOF  > ${SCTK_CONF_C}

int $i ();

int main(){
    $i ();
    return 0;
}
EOF
	SCTK_CHECK_FUNC_STD $i
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	SCTK_SCTK_CHECK_FUNC_RES="$SCTK_SCTK_CHECK_HEADER_RES"
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then 
	    sctk_cache_sucess $i
	    result yes
	else
	    sctk_cache_fail $i
	    perror no
	fi
	fi
    done
}

SCTK_CHECK_LIST_ADD(){
    SCTK_CHECK_LIST="$SCTK_CHECK_LIST $@"
}

SCTK_CHECK_OPTION(){
    for i in $1 ; do 
	SCTK_MSG_CHECKING $i
	CACHE_RESULT=""
	sctk_check_if_cached_option SCTK_C_$i
	if test "$CACHE_RESULT" != "" ; then 
	    if test "$CACHE_RESULT" = "1" ; then 
		result "yes (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="0"
	    else
		perror "no (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="1"
	    fi
	else

cat  << EOF  > ${SCTK_CONF_C}


int main(){
    return 0;
}
EOF
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_CC $SCTK_CFLAGS $i ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_CC $SCTK_CFLAGS $i ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then 
	    sctk_cache_sucess_option SCTK_C_$i
	    result yes
	    SCTK_CFLAGS="$SCTK_CFLAGS $i"
	else
	    sctk_cache_fail_option SCTK_C_$i
	    perror no
	fi
	fi
    done
    
}

SCTK_CHECK_FOPTION(){
    for i in $1 ; do 
	SCTK_MSG_CHECKING $i
	CACHE_RESULT=""
	sctk_check_if_cached_option SCTK_FORTRAN_$i
	if test "$CACHE_RESULT" != "" ; then 
	    if test "$CACHE_RESULT" = "1" ; then 
		result "yes (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="0"
	    else
		perror "no (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="1"
	    fi
	else

cat << EOF > ${SCTK_CONF_F}
      program main
      end
EOF
	echo "File ${SCTK_CONF_F}" >> ${SCTK_CONF_LOG} 2>&1 
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_F77 $SCTK_FFLAGS $i ${SCTK_CONF_F} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_F77 $SCTK_FFLAGS $i ${SCTK_CONF_F} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_F} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then 
	    sctk_cache_sucess_option SCTK_FORTRAN_$i
	    result yes
	    SCTK_FFLAGS="$SCTK_FFLAGS $i"
	else
	    sctk_cache_fail_option SCTK_FORTRAN_$i
	    perror no
	fi
	fi
    done
    
}

SCTK_CHECK_LDOPTION_NOADD(){
    for i in $1 ; do 
	SCTK_MSG_CHECKING $i
	CACHE_RESULT=""
	sctk_check_if_cached_option $i
	if test "$CACHE_RESULT" != "" ; then 
	    if test "$CACHE_RESULT" = "1" ; then 
		result "yes (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="0"
	    else
		perror "no (cached)"
		SCTK_SCTK_CHECK_HEADER_RES="1"
	    fi
	else

	    
cat  << EOF  > ${SCTK_CONF_C}


int main(){
    return 0;
}
EOF
	echo "File ${SCTK_CONF_C}" >> ${SCTK_CONF_LOG} 2>&1
	cat ${SCTK_CONF_C} >> ${SCTK_CONF_LOG} 2>&1
	echo "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS $i">> ${SCTK_CONF_LOG} 2>&1
	eval "$SCTK_CC $SCTK_CFLAGS ${SCTK_CONF_C} -o ${SCTK_CONF_BIN} $SCTK_LDFLAGS $i">> ${SCTK_CONF_LOG} 2>&1
	SCTK_SCTK_CHECK_HEADER_RES="$?"
	rm ${SCTK_CONF_C} ${SCTK_CONF_BIN} >> ${SCTK_CONF_LOG} 2>&1
	if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ; then 
	    sctk_cache_sucess_option $i
	    result yes
	else
	    sctk_cache_fail_option $i
	    perror no
	fi
	fi
    done
    
}

SCTK_CHECK_LDOPTION()
{
    for i in $1 ; do 
		SCTK_CHECK_LDOPTION_NOADD "$i"
		if test "$SCTK_SCTK_CHECK_HEADER_RES" = 0 ;then
			SCTK_LDFLAGS="$SCTK_LDFLAGS $i"
		fi
	done
}

