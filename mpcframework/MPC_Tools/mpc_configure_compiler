#!/bin/sh
############################# MPC License ############################## 
# Wed Nov 19 15:19:19 CET 2008                                         # 
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          # 
#                                                                      # 
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            # 
# This file is part of the MPC Runtime.                                # 
#                                                                      # 
# This software is governed by the CeCILL-C license under French law   # 
# and abiding by the rules of distribution of free software.  You can  # 
# use, modify and/ or redistribute the software under the terms of     # 
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     # 
# following URL http://www.cecill.info.                                # 
#                                                                      # 
# The fact that you are presently reading this means that you have     # 
# had knowledge of the CeCILL-C license and that you accept its        # 
# terms.                                                               # 
#                                                                      # 
# Authors:                                                             # 
#   - PERACHE Marc marc.perache@cea.fr                                 # 
#   - CARRIBAULT Patrick patrick.carribault@cea.fr                     # 
#                                                                      # 
######################################################################## 

#
# Generate the main MPC compiler driver
#
# $1: target script (e.g., mpc_cc) 
# $2: target language (c, c++ or fortran)
#
printf_compiler(){

language="$2"
if [ "$language" = "f77" ]
then
    language="fortran"
fi
# Header
echo "#!/bin/sh" > $1
cat <<EOF >> $1
if test -z \${MPC_RPREFIX}; then
	echo "################################################################"
	echo "# No MPC_RPREFIX defined. it is the root of the actual prefix  #"
	echo "# Yout should source the mpcvars.sh file in root of MPC prefix #"
	echo "################################################################"
	exit 1
fi

#used to override option w/ compiler specific when option has been provided
# \$1: var name
# \$2: compiler-specific option
override_var_if_isset()
{
	content="\`eval echo "$"\${1}\`"
	if [ ! -z "\${content}" ]
	then
		content="\${2}"
	else
		content=""
	fi

	eval "\${1}=\${content}"
}

print_if_stdout()
{
    >&2 printf "\$@"
}

canonize()
{
	readlink -e "\$1"	|| echo "\$1"
}
EOF
header_sh >> $1

########################################
########################################
####### MPC COMPIL WRAPPER GEN #########
########################################
########################################

# For Fortran, generate a small object w/ main routine
if test "$2" = "f77" ; then 
cat <<EOF >> $1
FORTRAN_START="/tmp/tmp_mpc_fortran_\$\$.f"
FORTRAN_OBJ="/tmp/tmp_mpc_fortran_\$\$.o"

#echo "\$FORTRAN_START \$FORTRAN_OBJ"

cat <<THIS_EOF > \$FORTRAN_START
! ############################# MPC License ##############################
! # Wed Nov 19 15:19:19 CET 2008                                         #
! # Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
! #                                                                      #
! # IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
! # This file is part of the MPC Runtime.                                #
! #                                                                      #
! # This software is governed by the CeCILL-C license under French law   #
! # and abiding by the rules of distribution of free software.  You can  #
! # use, modify and/ or redistribute the software under the terms of     #
! # the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
! # following URL http://www.cecill.info.                                #
! #                                                                      #
! # The fact that you are presently reading this means that you have     #
! # had knowledge of the CeCILL-C license and that you accept its        #
! # terms.                                                               #
! #                                                                      #
! # Authors:                                                             #
! #   - PERACHE Marc marc.perache@cea.fr                                 #
! #   - CARRIBAULT Patrick patrick.carribault@cea.fr                     #
! ########################################################################
      subroutine mpc_user_main_
      call mpc_user_main()
      end

      program main
      call mpc_start()
      call exit(0)
      end
THIS_EOF
FFLAGS="$SCTK_FFLAGS"
MPC_COMPILER_CFLAGS=
EOF
else
cat <<EOF >> $1
FFLAGS=
MPC_COMPILER_CFLAGS="$MPC_COMPILER_CFLAGS"
EOF
fi



# More variable definitions (Library path, show and different shades of args)
cat << EOF >> $1
CC="\`head -n 1 \${MPC_RPREFIX}/.${2}_compilers.cfg | cut -d":" -f3\`"
#LIB_PATH="-Wl,-rpath,\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/lib ${LIB_PATH}"
if test "\$MPC_MAKEFILE" != "" ; then 
LIB_PATH=""
fi

# This variable is updated to 'echo' when '-show' is active
Show=eval

# Do we have to link eventually?
linking=yes

# All args concerning the compiling process (w/out mpc_cc-related options)
allargs=""

# Name of the output filename if the option '-o' is set
output_filename=""
output_file=""
next_arg_is_output=no
OUTPUT_FILE_ARGS=""
PRIV_FLAG="-fmpc-privatize"
unset MPC_DISABLE_TLS_OPT
NO_TLS_OPT=0
MPC_HEADER_INCLUDE="-include mpc_main.h"
OMP_FLAG=""
EOF
if  test "$language" = "c"; then

cat << EOF >> $1
#By default enable dynamic pricatization
export MPC_DYN_PRIV_ENABLED=1
EOF

fi

cat << EOF >> $1
for arg in "\$@" ; do
    # Set addarg to no if this arg should be ignored by the C compiler
    addarg=yes
    qarg=\$arg

    if [ \$next_arg_is_output = yes ] ; then
      output_filename=\$qarg
      next_arg_is_output=no
      OUTPUT_FILE_ARGS="-o \$qarg"

#       allargs="\$allargs \$qarg"
      continue
    fi

    case \$arg in
        # ----------------------------------------------------------------
        # Compiler options that affect whether we are linking or not
    -c|-S|-E|-M|-MM)
    # The compiler links by default
    linking=no
    ;;

    -cc=*)
    CC=\`echo A\$arg | sed -e 's/^A-cc=//g'\`
    addarg=no
    MPC_COMPILER_CFLAGS=""
    ;;

    -o)
    next_arg_is_output=yes
    addarg=no
    ;;

    -threads)
    CFLAGS="\$CFLAGS -threads"
    ;;

	-fmpc-privatize|-fmpcprivatize|-f-mpc-privatize)
		PRIV_FLAG="\$arg"
    	addarg=no
	;;  
	-fno-mpc-privatize|-fno-mpc-privatize|-fnompc-privatize|-fnompcprivatize)
		PRIV_FLAG=""
		addarg=no
	;;
	-fno-mpc-plugin)
		unset MPC_DYN_PRIV_ENABLED
		addarg=no
	;;
	-fmpc-dyninsert|-fmpc-dyn-insert)
		export MPC_DYN_INSERT=1
		addarg=no
	;;
	-fmpc-notlsopt|-fmpc-no-tlsopt)
		NO_TLS_OPT=1
		addarg=no
	;;
	-fmpc-include)
		#nothing to do, if not fortran, '-include mpc_main.h' is automatically forwarded
		#This is due to order : '-include' should be set after sources files
		MPC_HEADER_INCLUDE="-include mpc_main.h"
		addarg=no
	;;
	-fno-mpc-include)
		MPC_HEADER_INCLUDE=""
		addarg=no
	;;
	-fopenmp|-openmp)
		OMP_FLAG="\$arg"
		addarg=no
	;;
	-fno-openmp|-fnoopenmp|-no-openmp|-noopenmp)
		OMP_FLAG=""
		addarg=no
	;;
	-compilers|--compilers)
        echo "Compilers available :"
    	for line in \` cat \${MPC_RPREFIX}/.${2}_compilers.cfg\` ;
    	do
			family="\`echo "\$line" | cut -d":" -f1\`"
			priv="\`echo "\$line" | cut -d":" -f2\`"
			compiler="\`echo "\$line" | cut -d":" -f3\`"
			print_if_stdout " - \${compiler} (\${family} Privatization support : \${priv})\n"
    	done
		exit 0
		;;
	-target_list|--target_list)
		uname=\`uname -m\`
		target_list_tmp="\`ls -A \${MPC_RPREFIX}/\`"
		for d in \`echo \$target_list_tmp\`; 
		do
			if test -d "\${MPC_RPREFIX}/\${d}"; then
				target_list="\${target_list} \${d}"
			fi
		done
		for d in \`echo \${target_list}\`; 
		do
			if test "\${d}" != "\${uname}"; then
				echo "\${d}"
			fi
		done
		exit 0
	;;
	-target=*)
	TARGET=\`echo A\$arg | sed -e 's/A-target=//g'\`
	addarg=no
	
	echo "loading \${TARGET} options..."
	if test -f "`echo "\\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}" | sed -re 's#'"${MPC_HOST}"'|'"${MPC_TARGET}"'#\${TARGET}#g'`/.target_options"; then
		. `echo "\\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}" | sed -re 's#'"${MPC_HOST}"'|'"${MPC_TARGET}"'#\${TARGET}#g'`/.target_options
		cat `echo "\\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}" | sed -re 's#'"${MPC_HOST}"'|'"${MPC_TARGET}"'#\${TARGET}#g'`/.target_options
	else
		echo "This architecture is not supported"
		exit 1
	fi
    ;;

    -show)
    addarg=no
    Show=echo
    ;;

    # Verbose mode
    -v)
    # Pass this argument to the pre-compiler/compiler as well.
    echo "mpc_cc for \$MPC_VERSION"
    ;;

    # Help
    -help)
    ;;

    *)
	qarg="'\$arg'"
    ;;

    esac

    # Update compiler arguments
    if [ \$addarg = yes ] ; then
        allargs="\$allargs '\$qarg'"
    fi
done
EOF
if [ "$2" != "f77" ];
then
cat << EOF >> $1
allargs="\${allargs} \${MPC_HEADER_INCLUDE}"
EOF
fi
cat << EOF >> $1
unalias grep > /dev/null 2>&1
cc_path="\`canonize \${CC}\`"

is_defined=""
for line in \`cat \${MPC_RPREFIX}/.${2}_compilers.cfg\`
do
	cur="\`echo "\$line" | cut -d":" -f3 2> /dev/null\`"
	cur="\`canonize \$cur\`"
	if test "\$cur" = "\$cc_path";
	then
		is_defined="\$line"
		break
	fi
done

#is_defined="\`grep \"\${cc_path}$\" \${MPC_RPREFIX}/.${2}_compilers.cfg\`"

#if CC is not present in MPC compiler configuration file
if test -z "\${is_defined}";
then
	print_if_stdout "Warning: You try to use a compiler not handled by MPC, at your own risks\n"
	print_if_stdout "Warning: All options will be forwarded 'as is' to the given compiler\n"
else
	CC_FAMILY="\`echo \${is_defined} | cut -d":" -f1\`"
	CC_PRIV="\`echo \${is_defined} | cut -d":" -f2\`"
	CC="\`echo \${is_defined} | cut -d":" -f3\`"

	#if CC does not support privatization and user provides privatization option
	if test ! -z "\${PRIV_FLAG}" -a "\${CC_PRIV}" = "N";
	then
		print_if_stdout "Warning: '\${CC} does not support privatization support. Disabling privatization'\n"
		print_if_stdout "Warning: Do not consider using this compiler for thread-based mode.\n"
		PRIV_FLAG=""
	else
		#handle compiler-specific options depending on compiler family
		case \${CC_FAMILY} in
			INTEL)
				NO_TLS_OPT=1
				override_var_if_isset 'PRIV_FLAG' '-mSYMTAB_mpc_privatize'
				override_var_if_isset 'OMP_FLAG' '-qopenmp'
                FFLAGS="\${FFLAGS} -threads -recursive"
				MPC_USE_INTEL_COMPILER="1"
                export MPC_USE_INTEL_COMPILER
				;;
			GNU)
EOF

#Insert a reference to the privatization plugin
if [ "$language" = "c" ]; then
cat << EOF >> $1
				if test -e \${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/lib/libprivplug.so;
				then
					LIBPRIV_FLAG="-fplugin=\${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/lib/libprivplug.so"
				else
					LIBPRIV_FLAG=""
				fi

				if test -e "\${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/lib/libmpcgetopt.a"; 
				then
					if test "x\${MPC_BOOTSTRAP}" != "xyes"; 
					then
						GETOPT_FLAG="\${PRIV_FLAG} -include \${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/include/getopt.h"
					else
						GETOPT_FLAG=""
					fi
				fi
EOF
fi
cat << EOF >> $1
				override_var_if_isset 'PRIV_FLAG' '-fmpc-privatize'
				override_var_if_isset 'OMP_FLAG' '-fopenmp'
				;;
			*)
				#Nothing to do, vars set by user option
				;;
		esac
		
	fi
fi

#Do we need to disable TLS optimizations ?
if test "x\${NO_TLS_OPT}" = "x1"; then
	echo "INFO : TLS optimization disabled" 1>&2
	export MPC_DISABLE_TLS_OPT=1
fi

#we need to add -DMPC_PRIVATIZED when privatisation is enabled in order to compile deps (like getopt...)
if test ! -z "\${PRIV_FLAG}";
then
	PRIV_FLAG="\${PRIV_FLAG} -DMPC_PRIVATIZED"
else
	#Without privatization the plugin is useless
	LIBPRIV_FLAG=""
fi

#Here we prepend the path which is normally postpended in order
#to override binutils during the compilation
export PATH=\${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/:\${PATH}

#first definition of compiler & linking flags
CFLAGS="\`\${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_cflags $language\`"
LDFLAGS="\`\${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_ldflags $language\`"
EOF
# Regular flags and compiler (C, C++ or fortran)
if test "${BINUTILS_PREFIX}" != "disabled" ;
then
cat <<EOF >> $1
#override flags when patched binutils are used
LDFLAGS="\${LDFLAGS} -B\${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin"
EOF
fi

cat << EOF >> $1
#used to append compiler-specific flags
CFLAGS="\$CFLAGS \${PRIV_FLAG} \${OMP_FLAG} \$MPC_COMPILER_CFLAGS \${LIBPRIV_FLAG} \${GETOPT_FLAG}"
CFLAGS_FORTRAN_START="\${PRIV_FLAG} \$MPC_COMPILER_CFLAGS \${LIBPRIV_FLAG} \${GETOPT_FLAG}"
LDFLAGS="\${LDFLAGS}"

if [ "\$linking" = yes ] ; then
EOF

if test "$2" = "f77" ; then 
cat <<EOF >> $1
    \$Show \$CC \$FFLAGS \$CFLAGS_FORTRAN_START -c \$FORTRAN_START -o \$FORTRAN_OBJ
    rc=\$?
    if test "\$rc" != "0" ; then 
        exit \$rc
    fi

    # Indicates if symbol exists in object file
    has_symbol ()
    {
        if [ -f "\${1}" ]
        then
            # Be strict here to ensure we get the symbol and not a symbol beginning with name
            TEST=\$(nm "\${1}" | tr -s " " | cut -d " " -f3 | grep -E '^'"\${2}"'\$' | wc -l)
            if [ \${TEST} -eq 1 ]
            then
                return 0
            fi
        fi
        return 1
    }

    # Renames a symbol in an object file
    rename_sym ()
    {
        objcopy --redefine-sym \${2}=\${3} "\${1}"
    }

    # Renames the fortran entry point and associated symbols. also removes the main symbol
    rename_main_symbols ()
    {
        rename_sym "\${1}" "MAIN__" "mpc_user_main_"
        objcopy --globalize-symbol="mpc_user_main_" "\${1}"
        # And ._omp.fn* in case of OpenMP
        index=0
        while has_symbol "\${1}" "MAIN__._omp_fn.\${index}"
        do
            rename_sym "\${1}" "MAIN__._omp_fn.\${index}" "mpc_user_main_._omp_fn.\${index}"
            index=\$((\${index}+1))
        done
        # Remove the main
        objcopy --strip-symbol main "\${1}"
    }

    # Checks if a file has given extention
    has_ext ()
    {
        BN=\$(basename "\${1}")
        BN2=\$(basename "\${1}" "\${2}")
        # If different, the file has the right extension
        if [ "\${BN}" != "\${BN2}" ]
        then
            return 0
        fi
        return 1
    }

    # Get the file extention
    get_ext ()
    {
        printf ".%s" \$(echo "\${1}" | rev | cut -d "." -f1 | rev)
    }

    SOURCE_FILES=""
    OBJECT_FILES=""
    ARGS_NO_SOURCES=""
    # First walk through objects and modify the main one and identify sourcefiles given on link command line
    for arg in \$allargs
    do
        addarg=1
        unquotedarg="\$(eval echo \$arg)"
        #Is it a file ?
        if [ -f "\$unquotedarg" ]
        then
            #Is is an object file ?
            if has_ext "\${unquotedarg}" ".o"
            then
                #It is an object file, but is it the main ?
                if has_symbol "\${unquotedarg}" "MAIN__"
                then
                    #This is main, rename the symbol(s)
                    \$Show rename_main_symbols "\${unquotedarg}"
                fi
            else
                #This is a file, but not an object... is it a Fortran source file ?
                file_ext=\$(get_ext "\${unquotedarg}")
                for ext in .f .F .f90 .F90 .for .FOR .fpp .FPP .r
                do
                    if has_ext "\${unquotedarg}" "\${ext}"
                    then
                        addarg=0
                        # This is a Fortran source file, store it...
                        SOURCE_FILES="\${SOURCE_FILES} \${unquotedarg}"
                        break
                    fi
                done
            fi
        fi
        if [ \${addarg} -eq 1 ]
        then
            ARGS_NO_SOURCES="\${ARGS_NO_SOURCES} \${arg}"
        fi
    done

    # If there are some source files on command line
    if [ ! -z "\${SOURCE_FILES}" ]
    then
        for source_file in \${SOURCE_FILES}
        do
            object_file=\$(mktemp --suffix=.o)
            \$Show \$CC \$LIB_PATH \$LDFLAGS \$FFLAGS \$CFLAGS \${ARGS_NO_SOURCES} \$LDFLAGS "\${source_file}" -c -o "\${object_file}"
            # Is this object (ie. source file) main ?
            if has_symbol "\${object_file}" "MAIN__"
            then
                #This is main, rename the symbol(s) (not reached is Show is echo...)
                \$Show rename_main_symbols "\${object_file}"
            fi
            OBJECT_FILES="\${OBJECT_FILES} '\${object_file}'"
        done
    fi
    \$Show \$CC \$LIB_PATH \$FORTRAN_OBJ \$LDFLAGS \$FFLAGS \$CFLAGS \$ARGS_NO_SOURCES \${OBJECT_FILES} \$LDFLAGS \${OUTPUT_FILE_ARGS}
    rc=\$?
    \$Show rm -f \$FORTRAN_OBJ \${OBJECT_FILES} \$FORTRAN_START
    if test "\$rc" != "0" ; then
        exit \$rc
    fi
EOF
else
if test "$3" = "global" ; then 
cat <<EOF >> $1
    if test "\${output_filename}" = "" ; then 
        output_filename="./a.out"
    fi
    global_local_args=""
    global_local_args_redefine="no"
    for global_local_args_i in \$allargs; do 

        if test "\$global_local_args_redefine" = "yes" ; then 
            global_local_args_redefine="no"
            global_local_args_i=""
        fi

        if test "\$global_local_args_i" = "-o" ; then 
            global_local_args_redefine="yes"
            global_local_args_i=""
        fi
        global_local_args="\$global_local_args \$global_local_args_i"
    done
    \$Show \$CC \$LIB_PATH \$LDFLAGS \$CFLAGS \$global_local_args \$LDFLAGS -fpic -shared -o lib\`basename \${output_filename}\`.so
    global_local_args=""
    global_local_args_redefine="no"
    global_local_args_skip="no"
    for global_local_args_i in \$allargs; do 

        if test "\`basename -- \$global_local_args_i .o\`" != "\`basename -- \$global_local_args_i\`" ; then 
            global_local_args_skip="yes"
        fi

        if test "\$global_local_args_skip" = "no" ; then 
        global_local_args="\$global_local_args \$global_local_args_i"
        fi
        global_local_args_skip="no"
    done

    global_dir_lib="\`dirname \${output_filename}\`"
    
    \$Show \$CC -L\$global_dir_lib -Wl,-rpath=\$global_dir_lib -l\`basename \${output_filename}\` \$LIB_PATH \$LDFLAGS \$global_local_args \$CFLAGS  \$LDFLAGS \${OUTPUT_FILE_ARGS}  
    rc=\$?
EOF
else
cat <<EOF >> $1
    \$Show \$CC \$LIB_PATH \$LDFLAGS \$CFLAGS \$allargs \$LDFLAGS \${OUTPUT_FILE_ARGS} 
    # The first \$LDFLAGS should be removed, but still some issues... 
    # \$Show \$CC \$LIB_PATH \$CFLAGS \$allargs \$LDFLAGS \${OUTPUT_FILE_ARGS} 
    rc=\$?
EOF
fi
fi

if test "$2" = "f77" ; then 
cat <<EOF >> $1
    \$Show rm -f \$FORTRAN_OBJ
EOF
fi

cat <<EOF >> $1
else
EOF
if test "$2" = "f77" ; then 
cat <<EOF >> $1
    \$Show \$CC \$FFLAGS \$CFLAGS \$allargs \${OUTPUT_FILE_ARGS}
    rc=\$?
EOF
else
if test "$3" = "global" ; then 
cat <<EOF >> $1
    \$Show \$CC \$CFLAGS \$allargs -fpic \${OUTPUT_FILE_ARGS}
    rc=\$?
EOF
else
cat <<EOF >> $1
    \$Show \$CC \$CFLAGS \$allargs \${OUTPUT_FILE_ARGS}
    rc=\$?
EOF
fi
fi
cat <<EOF >> $1
fi

EOF

if test "$2" = "f77" ; then 
cat <<EOF >> $1
rm -f \$FORTRAN_START > /dev/null 2>&1 
EOF
fi 

cat << EOF >> $1

exit \$rc

EOF

chmod 755 $1

} # end of printf_compiler()

#############################################################
#############################################################
############ START COMPILER WRAPPER GENERATION ##############
#############################################################
#############################################################

#fill target options for mpc_cc
#for the host
if test "`echo ${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/ | grep "${SCTK_ARCH}"`" = ""; then
	if test ! -d "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/"; then
			mkdir -p "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/"
	fi
	
	if test -f "\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/.target_options"; then
		rm "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
		touch "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
	else
		touch "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
	fi
	case `uname -m` in
		x86_64)
cat <<EOF >> "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
#!/bin/sh
SCTK_MIC=0
export SCTK_MIC
CC=`head -n 1 \${MPC_RPREFIX}/.c_compilers.cfg | cut -d":" -f3`
export CC
addarg=no
CFLAGS="\`\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_cflags c\`"
export CFLAGS
LDFLAGS="\`\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_ldflags c\`"	
export LDFLAGS
EOF
		;;
		k1om)
cat <<EOF >> "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
#!/bin/sh
SCTK_MIC=1
export SCTK_MIC
CC=icc
export CC
addarg=no
CFLAGS="\`\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_cflags c\` -mmic"
export CFLAGS
LDFLAGS="\`\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_ldflags c\` -mmic -B\${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin"
export LDFLAGS
EOF
		;;
	esac
else
#for the target
	if test ! -d "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/"; then
		mkdir -p "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/"
	fi
	
	if test -f "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"; then
		rm "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
		touch "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
	else
		touch "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
	fi
	#for the target
	case "${SCTK_ARCH}" in 
		x86_64)
cat <<EOF >> "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
#!/bin/sh
SCTK_MIC=0
export SCTK_MIC
CC=`head -n 1 \${MPC_RPREFIX}/.c_compilers.cfg | cut -d":" -f3`
export CC
addarg=no
CFLAGS="\`\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_cflags c\`"
export CFLAGS
LDFLAGS="\`\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_ldflags c\`"	
export LDFLAGS
EOF
		;;
		k1om)
cat <<EOF >> "${MPC_RPREFIX}/${MPC_TARGET_SUBPREFIX}/${MPC_TARGET_SUBPREFIX}/.target_options"
#!/bin/sh
SCTK_MIC=1
export SCTK_MIC
CC=icc
export CC
addarg=no
CFLAGS="\`\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_cflags c\` -mmic"
export CFLAGS
LDFLAGS="\`\${MPC_RPREFIX}/\${MPC_TARGET_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin/mpc_ldflags c\` -mmic -B\${MPC_RPREFIX}/\${MPC_HOST_SUBPREFIX}/\${MPC_TARGET_SUBPREFIX}/bin"	
export LDFLAGS
EOF
		;;
	esac
fi

#
# Generate C compiler
#
begin_section Generate C Compiler: mpc_cc
CC=`head -n 1 ${MPC_RPREFIX}/.c_compilers.cfg | cut -d":" -f3`
printf_compiler bin/mpc_cc c
end_section

#
# Generate C compiler (for global linking)
#
#begin_section Generate C Compiler: mpc_cc_global
#printf_compiler bin/mpc_cc_global c global
#end_section

#
# Generate C++ compiler
#
begin_section Generate C++ Compiler: mpc_cxx
CC=`head -n 1 ${MPC_RPREFIX}/.c++_compilers.cfg | cut -d":" -f3`
printf_compiler bin/mpc_cxx c++
end_section

#
# Generate Fortran compiler
#
if test "$SCTK_FORTRAN" = "1" ; then 
	begin_section Generate Fortran77 Compiler: mpc_f77
	CC=`head -n 1 ${MPC_RPREFIX}/.f77_compilers.cfg | cut -d":" -f3`
	printf_compiler bin/mpc_f77 f77
	end_section
fi

########################################
########################################
##### MPC_COMPILER_MANAGER GEN #########
########################################
########################################
cat <<EOF > bin/mpc_compiler_manager
#!/bin/sh
if test -z \${MPC_RPREFIX}; then
	echo "################################################################"
	echo "# No MPC_RPREFIX defined. it is the root of the actual prefix  #"
	echo "# Yout should source the mpcvars.sh file in root of MPC prefix #"
	echo "################################################################"
	exit 1
fi

RED="\`printf "\033[1;31m"\`"
GRE="\`printf "\033[1;32m"\`"
BLU="\`printf "\033[1;36m"\`"
DEF="\`printf "\033[0;0m"\`"

add_compiler()
{
	file="\${MPC_RPREFIX}/.\${1}_compilers.cfg"
	is_there="\`egrep -n "^[a-zA-Z]+:(Y|N):\${2}$" \$file\`"
	
	if [ ! -z "\${is_there}" ];
	then
		printf "\${RED}Error: compiler \${2} already added for \${1} language ! Nothing to do\n\${DEF}"
		exit 1
	elif [ -z "\`which \${2} 2> /dev/null\`" ];
	then
		printf "\${RED}Error: \${2} is not found. We do not add it to MPC configuration !\n\${DEF}"
		exit 1
	else
		if [ "\${3}" = "INTEL" ];
		then
			PRIV_FLAG="-mSYMTAB_mpc_privatize"
		else
			PRIV_FLAG="-fmpc-privatize"
		fi
		\${2} \${PRIV_FLAG} -c mpc_main.\${1} > /dev/null 2>&1
		if [ \$? -eq 0 ];
		then
			pattern="Y"
		else
			pattern="N"
		fi
		echo "\${3}:\${pattern}:\${2}" >> \${file}
	fi
}

remove_compiler()
{
	file="\${MPC_RPREFIX}/.\${1}_compilers.cfg"
	exists="\`egrep -n "^\${3}:(Y|N):\${2}" \$file\`"
	
	if [ -z "\${exists}" ];
	then
		printf "\${RED}Error: compiler \${2} not found for \${1} language !\n\${DEF}"
		exit 1
	else
		line="\`echo "\${exists}" | cut -d":" -f1\`"
		sed -i "\${line}d" \$file
	fi
}

set_default_compiler()
{
	file="\${MPC_RPREFIX}/.\${1}_compilers.cfg"
	is_there="\`egrep "^[a-zA-Z]+:(Y|N):\${2}" \$file\`"
	if [ -z "\${is_there}" ];
	then
		printf "\${RED}Error: Cannot set a compiler not present in .cfg file\n\${DEF}"
		printf "\${RED}Error: Please use \"add\" before !\n\${DEF}"
	else
		family="\`echo \${is_there} | cut -f1 -d":"\`"
		remove_compiler \${1} \${2} \${family}
		sed -i "1i \${is_there}" \${file}
	fi
}

print_first_compilers()
{
	list_languages="c c++ f77"
	for language in \${list_languages}
	do
		lang_file=\${MPC_RPREFIX}/.\${language}_compilers.cfg
		compiler="\`head -n 1 \${lang_file} | cut -d":" -f3\`"
		echo "Default \${language} Compiler : \${GRE}\${compiler}\${DEF}"
	done
}

stat_compilers()
{

list_languages="c c++ f77"
if test ! -z "\$1";
then
	list_languages="\${1}"
fi

for language in \${list_languages}
do
	lang_file=\${MPC_RPREFIX}/.\${language}_compilers.cfg
	nb_compilers="\`cat \${lang_file} | wc -l\`"
	nb_priv="\`cat \${lang_file} | cut -d":" -f2 | egrep "^Y$" | wc -l\`"

	echo "MPC \${language} compiler supports \${GRE}\${nb_compilers}\${DEF} compilers, \${RED}\${nb_priv}\${DEF} of them are privatizing."
done
}

status_compiler()
{

list_languages="c c++ f77"
if test ! -z "\$1";
then
	list_languages="\${1}"
fi

for language in \${list_languages}
do
	echo "Available \${BLU}\${language}\${DEF} compiler :"
	lang_file=\${MPC_RPREFIX}/.\${language}_compilers.cfg
	main_file=mpc_main.\${language}
	for line in \`cat \${lang_file}\`
	do
		family="\`echo \${line} | cut -d":" -f1\`"
		compiler="\`echo \${line} | cut -d":" -f3\`"

		#test compiler
		\${compiler} -c \${main_file} > /dev/null 2>&1
		if [ \$? -eq 0 ];
		then
			printf " - \${GRE}FOUND \${DEF}/"
		else
			printf " - \${RED}NFOUND\${DEF}/"
		fi
		

		#test privatization support
		#switch depending on family
		if [ "\${family}" = "INTEL" ];
		then
			PRIV_FLAG="-mSYMTAB_mpc_privatize"
		else
			PRIV_FLAG="-fmpc-privatize"
		fi
		\${compiler} \${PRIV_FLAG} -c \${main_file} > /dev/null 2>&1
		if [ \$? -eq 0 ];
		then
			printf "\${GRE} PRIV. SUPPORT OK \${DEF}"
		else
			printf "\${RED} NO PRIV. SUPPORT \${DEF}"
		fi
		printf "for (\${family}) \${compiler}\n"
	done
done
}

is_valid_language()
{
  if test -z "\`\echo \$1 | egrep -o "^(c|c\\+\\+|f77)$"\`";
  then
	  printf "\${RED}Language \${1} not known !\${DEF}"
	  exit 1
  fi
}


cat <<EOFINT > mpc_main.c
int i; 
int main(int argc, char** argv){
     return 0;
}
EOFINT
cat <<EOFINT > mpc_main.c++
int i;
 int main(int argc, char** argv){
     return 0;
}
EOFINT
cat <<EOFINT > mpc_main.f77
      subroutine mpc_user_main
      integer i
      end
EOFINT

mode="list"

if [ ! -z "\${1}" ];
then
	mode="\$1"
fi

case "\$mode" in
	help|-help|--help)
		printf "Usage: mpc_compiler_manager [\${BLU}list|stat|list_default\${DEF} [(c|c++|f77)]]\n"
		printf "                            [\${BLU}(add|del)\${DEF} (c|c++|f77) compiler_path family]\n"
		printf "                            [\${BLU}set_default\${DEF} (c|c++|f77) compiler_path]\n"
		;;
	add)
		is_valid_language "\$2"
		if test -z "\$2" -o -z "\$3" -o -z "\$4";
		then
			printf "\${RED}You need to provide 3 arguments : language, compiler_path & family\n\${DEF}"
			exit 1
		fi
		add_compiler "\$2" "\$3" "\$4"
		printf "\${GRE}Compiler \"\${2}\" appended to \${1} compiler list\${DEF}\n"
		print_first_compilers
		;;
	remove|del|delete|rm)
		is_valid_language "\$2"
		if test -z "\$2" -o -z "\$3" -o -z "\$4";
		then
			printf "\${RED}You need to provide 3 arguments : language, compiler_path & family\n\${DEF}"
			exit 1
		fi
		remove_compiler "\$2" "\$3" "\$4"
		printf "\${RED}Compiler \"\${2}\" removed from \${1} compiler list\${DEF}\n"
		print_first_compilers
		;;
	set_default)
		is_valid_language "\$2"
		if test -z "\$2" -o -z "\$3";
		then
			printf "\${RED}Error: You need to provide 2 arguments : language, compiler_path\${DEF}\n"
			exit 1;
		fi
		set_default_compiler "\$2" "\$3" "\$4"
		printf "\${BLU}Compiler \"\${2}\" set as default \${1} compiler list\${DEF}\n"
		print_first_compilers
		;;
	list)
		status_compiler "\$2"
		;;
	list_default)
		print_first_compilers
		;;
	stat)
		stat_compilers
		;;
	*)
		printf "\${RED}Unknown Manager Mode: \"\${mode}\"\n\${DEF}"
		exit 1
		;;
esac


rm mpc_main.c mpc_main.c++ mpc_main.f77 mpc_main.o > /dev/null 2>&1

exit 0
EOF
chmod 755 bin/mpc_compiler_manager
ln -s mpc_compiler_manager bin/mpc_compiler_status
