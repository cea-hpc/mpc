#!/bin/sh
############################# MPC License ##############################
# Wed Nov 19 15:19:19 CET 2008                                         #
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
#                                                                      #
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
# This file is part of the MPC Runtime.                                #
#                                                                      #
# This software is governed by the CeCILL-C license under French law   #
# and abiding by the rules of distribution of free software.  You can  #
# use, modify and/ or redistribute the software under the terms of     #
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
# following URL http://www.cecill.info.                                #
#                                                                      #
# The fact that you are presently reading this means that you have     #
# had knowledge of the CeCILL-C license and that you accept its        #
# terms.                                                               #
#                                                                      #
# Authors:                                                             #
#   - PERACHE Marc marc.perache@cea.fr                                 #
#                                                                      #
########################################################################

LAUNCH="mpiexec"
BINS_HOME="${MPC_BIN_DIR}/mpcrun_opt/mpcrun"

GDB_LIBTHREAD_DB="${MPC_LIB_DIR}/libmpc_thread_db.so"
export GDB_LIBTHREAD_DB
# Export job manager type: slurm or hydra
export SCTK_JOB_MANAGER

MPC_VERBOSE="0"
MPC_DISABLE="0"

MPC_PROFILING="none"

show=

#. ${MPC_BIN_DIR}/mpc_modes
SCTK_USE_PTHREAD=1
SCTK_USE_MADELEINE=0
SCTK_USE_MPI=1
SCTK_USE_MPI2=0
SHARE_NODE='1'
ENABLE_SMT="0"

if test "$MPC_AUTO_KILL_TIMEOUT" = "" ; then
    MPC_AUTO_KILL_TIMEOUT="0"
    export MPC_AUTO_KILL_TIMEOUT
fi

MPC_VERSION="${MAJOR}.${MINOR}"
if test "${MINOR}" = "-1" ; then
MPC_VERSION="Experimental"
fi

MODES_MULTITHREAD="ethread ethread_ng"
MODES_NET="$SCTK_NET_LIST"
if test "$SCTK_USE_PTHREAD" = "1" ; then
MODES_MULTITHREAD="pthread ethread_mxn pthread_ng ethread_mxn_ng $MODES_MULTITHREAD"
fi

check_net(){
    if test "$1" != "none" ; then
	NET_TYPE="--sctk_use_network=$1"
    fi
}

check_thread(){
    if test "$1" != "none" ; then
    for mode in $MODES_MULTITHREAD ; do
	if test "$1" = "$mode" ; then
	    THREAD_TYPE="--use-$1"
	fi
    done
    fi
}

mpcrun_error(){
	echo "================ ERROR ================"
	echo "$1"
	echo "======================================="
	exit 1
}

print_help(){
cat << EOF
Usage mpcrun [option] [--] binary [user args]

Informations:
    --help,-h Display this help
    --show, Display command line
    --version-details, Print version of each module used
    --report, Print report
    --verbose=n,-v,-vv,-vvv Verbose mode (level 1 to 3)
    --verbose Verbose level 1

Topology:
    --task-nb=n,-n=n Total number of tasks
    --process-nb=n,-p=n Total number of processes
    --cpu-nb=n,-c=n Number of cpus per process
    --node-nb=n,-N=n Total number of nodes
    --enable-smt Enable SMT capabilities (disabled by default)
    --disable-share-node Do not restrict on CPU number to share node

Multithreading:
    --multithreading=n,-m=n Define multithreading mode
        modes: $MODES_MULTITHREAD

Network:
    --network=n,-net=n Define Network mode (TCP + SHM by default)
        modes: $MODES_NET
        modes (experimental): $SCTK_NET_LIST_EXP

Checkpoint/Restart and Migration:
    --checkpoint Enable checkpoint
    --migration Enable migration
    --restart Enable restart

Launcher:
    --launcher=n,-l=n Define launcher
    --opt=<options> launcher specific options
    --launch_list print available launch methods
    --config=<file> Configuration file to load.
    --profiles=<p1,p2> List of profiles to enable in config.

Debugger:
    --dbg=<debugger_name> to use a debugger
    
Profiling (if compiled with --enable-MPC_Profiler) :
	--profiling=AA,BB,...
	
	example : --profiling=stdout,html,latex
	
	With the following output modules :
		* file : Outputs to file indented profile with time in standard units
		* file-raw : Outputs to file unindented profile in ticks (gnuplot compliant)
		* file-noindent : Same as "text" with no indentation
		* stdout : "text" to stdout
		* stdout-raw : "text_raw" to stdout
		* stdout-noindent : "text_noindent" to stdout
		* latex : Outputs profile to a latex source file
		* html : Outputs profile to an html file
EOF
}

MPC_MONO="0"

mpi_only=no
BINARY=""
USER_ARGS=""
SHOW_COM=""
RESTART=""
MIGRATION=""
DEBUG=""
NET_TYPE=""
PROCESS_NB=""
NODE_NB=""
TASK_NB=""
CPU_NB=""

if test "$REPORT" = "yes" ; then
REPORT="--report"
else
REPORT=""
fi

TMP_DIR_D=""
TMP_DIR=""
READ_MPC_ARG="true"

TMP_DIR_D="TEMP_MPC_$$/"
TMP_DIR="--directory=${TMP_DIR_D}"
TMP_DIR="/dev/null"
LAUNCH_OPTIONS=""
MPC_CLEAN_TMP_DIR="0"

# Pre-parsing to extrac --config and --profiles, it must be done before parsing all options
# as config file must feed default value and can be erased by mpcrun arguments.
for arg in "$@" ; do
	case $arg in
		--config=*)
			MPC_USER_CONFIG="`echo A$arg | sed -e 's/A--config=//g'`"
			echo "Use config file $MPC_USER_CONFIG"
			export MPC_USER_CONFIG
			;;
		--profiles=*)
			MPC_USER_PROFILES="`echo A$arg | sed -e 's/A--profiles=//g'`"
			export MPC_USER_PROFILES
			;;
	esac
done

#check that we have the file
if [ ! -z "${MPC_USER_CONFIG}" ] && [ ! -e "${MPC_USER_CONFIG}" ]; then
	echo "ERROR : Configuration file '${MPC_USER_CONFIG}' provided by --config or MPC_USER_CONFIG doesn't exist." 1>&2
	exit 1
fi

# Load config files options
CONFIG_FILES_VALID=false
config_files_vars="`${MPC_BIN_DIR}/mpc_print_config --launcher`"
if [ $? -eq 0 ]; then eval "${config_files_vars}"; fi
if [ "${CONFIG_FILES_VALID}" = "true" ]; then
	# Default value related to --enable-smt
	ENABLE_SMT="${CONFIG_LAUNCHER_SMT}"
	# Default value related to -v/-vv/-vvv
	MPC_VERBOSE="${CONFIG_LAUNCHER_VERBOSITY}"
	# User launchers
	MPC_USER_LAUNCHERS="${CONFIG_LAUNCHER_USER_LAUNCHERS}"
    # Print version details
    if [ "${CONFIG_LAUNCHER_VERS_DETAILS}" = "true" ]; then
       VERSION_DETAILS="--version-details"
    fi
    # Enable checkpoint
    if [ "${CONFIG_LAUNCHER_CHECKPOINT}" = "true" ]; then
       CHECKPOINT="--checkpoint"
    fi
    # Enable migration
    if [ "${CONFIG_LAUNCHER_MIGRATION}" = "true" ]; then
       MIGRATION="--migration"
    fi
    # Enable reporting
    if [ "${CONFIG_LAUNCHER_REPORT}" = "true" ]; then
       REPORT="--report"
    fi
    # Enable restart mode
    if [ "${CONFIG_LAUNCHER_RESTART}" = "true" ]; then
       RESTART="--restart"
    fi
	# Number of process
	PROCESS_NB="${CONFIG_LAUNCHER_NB_PROCESS}"
	# Number of node
	NODE_NB="${CONFIG_LAUNCHER_NB_NODE}"
	# Number of task
	TASK_NB="${CONFIG_LAUNCHER_NB_TASK}"
	# Number of core
	CPU_NB="${CONFIG_LAUNCHER_NB_PROCESSOR}"
	# Define the launcher to use
	LAUNCH="${CONFIG_LAUNCHER_LAUNCHER}"
	# On 2.3.1 LAUNCH can be set to 'none', but on 2.4.0 it
	# made all tasks running on interactive mode, so override 'none' values here
	if test "$LAUNCH" = 'none'; then
		LAUNCH='mpiexec'
	fi	
else
	mpcrun_error "Error while loading MPC configuration files."
fi

# Make config loading silent in case of error in all MPC processes and avoid to revalidate XML files
# with mpc-config.xsd as it's already done. By this way it avoid to open mpc-config.xsd on each nodes.
export MPC_CONFIG_SILENT=1

# Parse command options
DEFAULT_CPU_NB=""
for arg in "$@" ; do
    if test "$READ_MPC_ARG" = "true" ; then
    case $arg in
    -h|--help)
    print_help;
    exit 0;
    ;;
    -v|--verbose)
    MPC_VERBOSE="1"
    ;;
    -vv)
    MPC_VERBOSE="2"
    ;;
    -vvv)
    MPC_VERBOSE="3"
    ;;
    --verbose=*)
    MPC_VERBOSE="`echo A$arg | sed -e 's/A--verbose=//g'`"
    ;;
    --profiling=*)
    MPC_PROFILING="`echo A$arg | sed -e 's/A--profiling=//g'`"
    ;;
    --config=*)
      # We do nothing, we just skip the argument and do not add it to the command line
    ;;
    --show)
    show=echo
    ;;
    --mono)
    MPC_MONO="1"
    ;;
    --noversion-details)
    VERSION_DETAILS=""
    ;;
    --version-details)
    VERSION_DETAILS="--version-details"
    ;;
    --version)
    echo "mpcrun $MPC_VERSION"
    exit 0
    ;;
    --clean)
    MPC_CLEAN_TMP_DIR="1"
    ;;
    --launch_list|-l=help|--launcher=help)
    echo "Available launch method"
    for i in ${MPC_BIN_DIR}/mpcrun_opt/* ; do echo "    - `basename $i`" | sed s#mpcrun_##g  | grep -v default_param | grep -v propagate_env | grep -v "~" ; done
    if [ ! -z "${MPC_USER_LAUNCHERS}" ] && [ -e "${MPC_USER_LAUNCHERS}" ]; then
    	for i in ${MPC_USER_LAUNCHERS}/mpcrun_* ; do echo "    - `basename $i`" | sed s#mpcrun_##g  | grep -v default_param | grep -v propagate_env | grep -v "~" ; done
    fi
    exit 0
    ;;
    --nocheckpoint)
    CHECKPOINT=""
    ;;
    --checkpoint)
    CHECKPOINT="--checkpoint"
    ;;
    --restart)
    RESTART="--restart"
    ;;
    --migration)
    MIGRATION="--migration"
    ;;
    --noreport)
    MPC_PROFILING=""
    ;;
    --report)
    MPC_PROFILING="stdout"
    ;;
    --enable-smt)
    ENABLE_SMT="1"
    ;;
    --disable-share-node)
    SHARE_NODE="0"
    ;;
    --share-node)
    SHARE_NODE="1"
    ;;
    --dbg=*)
    DEBUG="`echo A$arg | sed -e 's/A--dbg=//g'`"
    ;;
    --dbg_opt=*)
    MPC_GDB_DEBUG_ARGS="`echo A$arg | sed -e 's/A--dbg_opt=//g'`"
    ;;
    --autokill=*)
    MPC_AUTO_KILL_TIMEOUT="`echo A$arg | sed -e 's/A--autokill=//g'`"
    ;;
    --opt=*)
    LAUNCH_OPTIONS="$LAUNCH_OPTIONS `echo A$arg | sed -e 's/A--opt=//g'`"
    ;;
    --tmp_dir=*)
    TMP_DIR_D="`echo A$arg | sed -e 's/A--tmp_dir=//g'`/"
    TMP_DIR="--directory=${TMP_DIR_D}"
    ;;
    --task-nb=*)
    TASK_NB="`echo A$arg | sed -e 's/A--task-nb=//g'`"
    ;;
    -n=*)
    TASK_NB="`echo A$arg | sed -e 's/A-n=//g'`"
    ;;
    --process-nb=*)
    PROCESS_NB="`echo A$arg | sed -e 's/A--process-nb=//g'`"
    ;;
    -p=*)
    PROCESS_NB="`echo A$arg | sed -e 's/A-p=//g'`"
    ;;
    --cpu-nb=*)
    CPU_NB="`echo A$arg | sed -e 's/A--cpu-nb=//g'`"
    DEFAULT_CPU_NB="1"
    ;;
    -c=*)
    CPU_NB="`echo A$arg | sed -e 's/A-c=//g'`"
    DEFAULT_CPU_NB="1"
    ;;
    --node-nb=*)
    NODE_NB="`echo A$arg | sed -e 's/A--node-nb=//g'`"
    ;;
    -N=*)
    NODE_NB="`echo A$arg | sed -e 's/A-N=//g'`"
    ;;
    --multithreading=*)
    check_thread "`echo A$arg | sed -e 's/A--multithreading=//g'`"
    ;;
    -m=*)
    check_thread "`echo A$arg | sed -e 's/A-m=//g'`"
    ;;
    --network=*)
    check_net "`echo A$arg | sed -e 's/A--network=//g'`"
    ;;
    -net=*)
    check_net "`echo A$arg | sed -e 's/A-net=//g'`"
    ;;
    -l=*)
    LAUNCH="`echo A$arg | sed -e 's/A-l=//g'`"
    ;;
    --launcher=*)
    LAUNCH="`echo A$arg | sed -e 's/A--launcher=//g'`"
    ;;
    -mpi-only|-mpi_only)
    mpi_only=yes
    ;;
    --config=* | --profiles=*)
    #Already processed in a previous loop on arguments, but need to capture them otherwise
    #it will be propagated as exe options.
    ;;
    --arch-library-path=*)
    SCTK_ARCH_LIBRARY_PATH="`echo A$arg | sed -e 's/A--arch-library-path=//g'`"
    export SCTK_ARCH_LIBRARY_PATH
    echo "Arch library path updated : $SCTK_ARCH_LIBRARY_PATH"
    ;;
    --mic-nb-task=*)
    SCTK_MIC_NB_TASK="`echo A$arg | sed -e 's/A--mic-nb-task=//g'`"
    export SCTK_MIC_NB_TASK
    echo "run with $SCTK_MIC_NB_TASK task(s) per MIC"
    ;;
    --host-nb-task=*)
    SCTK_HOST_NB_TASK="`echo A$arg | sed -e 's/A--host-nb-task=//g'`"
    export SCTK_HOST_NB_TASK
    echo "run with $SCTK_HOST_NB_TASK task(s) per host"
    ;;
    --nb-mic=*)
    SCTK_NB_MIC="`echo A$arg | sed -e 's/A--nb-mic=//g'`"
    export SCTK_NB_MIC
    echo "run with $SCTK_NB_MIC MIC(s)"
    ;;
    --nb-host=*)
    SCTK_NB_HOST="`echo A$arg | sed -e 's/A--nb-host=//g'`"
    export SCTK_NB_HOST
    echo "run with $SCTK_NB_HOST host(s)"
    ;;
    --mic-config=*)
    MPCRUN_CONFIG_FILE="`echo A$arg | sed -e 's/A--mic-config=//g'`"
    ;;
    --)
    READ_MPC_ARG="false"
    ;;
    *)
    BINARY="$arg"
    READ_MPC_ARG="false"
    ;;
    esac
    else
	if test "$BINARY" = "" ; then
	    BINARY="$arg"
	else
	    arg="`echo A$arg | sed s#\"A$arg\"#\"$arg\"#g | sed s#' '#@MPC_LINK_ARGS@#g`"
	    USER_ARGS="$USER_ARGS $arg"
	fi
    fi
done

# include architecture finder
. "${MPC_BIN_DIR}/mpcrun_opt/Architectures.sh"

if test "$BINARY" != ""; then
    # find architecture
	getBinaryTarget "arch_bin" "${BINARY}"
else
    arch_bin="k1om"
fi

# verify arch bin and host compatibility
UNAME="`uname -m`"
if test "`uname -m`" != "${arch_bin}" -a "{MPCRUN_CONFIG_FILE}" = ""; then
	if test "${arch_bin}" = "0"; then 
		arch_bin="unknown" 
	fi
	echo "###########################################################################"
	echo "# You are on ${UNAME} machine and try to run a ${arch_bin} binary "      
	echo "###########################################################################"
	exit 1
fi

# load MPC Hydra launcher if not k1om architecture
if test "${arch_bin}" = "k1om"; then 
    echo "k1om architecture detected"
else
    echo "${arch_bin} architecture detected"
    # setup complete hydra path. Exported to be used into mpcrun_opt/* scripts
    if test "$SCTK_HYDRA" != ""; then 
	if [ $SCTK_HYDRA -eq 1 ] && [ ! -z "$SCTK_HYDRA_PREFIX" ]; then
		export SCTK_HYDRA_BINDIR="${prefix}/bin/"
		export PATH="${SCTK_HYDRA_BINDIR}:${PATH}"
	fi
    fi
fi

if test "$PROCESS_NB" = "0" ; then
    PROCESS_NB="1"
fi
if test "$NODE_NB" = "0" ; then
    NODE_NB="1"
fi

SCTK_ARGS="--sctk-args--"
SCTK_LINUX_DISABLE_ADDR_RANDOMIZE="1"
export SCTK_LINUX_DISABLE_ADDR_RANDOMIZE

LAUNCHED_WITH_MPCRUN="1"
export LAUNCHED_WITH_MPCRUN

add_arg(){
SCTK_ARGS="$SCTK_ARGS $@"
}

add_arg "--task-number=$TASK_NB"

if test "$DEFAULT_CPU_NB" = "1" ; then
if test "$CPU_NB" != ""  ; then
add_arg "--processor-number=$CPU_NB "
fi
fi

if test "$PROCESS_NB" != ""  ; then
add_arg "--process-number=$PROCESS_NB"
fi

if test "$ENABLE_SMT" = "1"  ; then
add_arg "--enable-smt"
fi

if test "$SHARE_NODE" = "1"  ; then
add_arg "--share-node"
fi

if test "$NODE_NB" != ""  ; then
add_arg "--node-number=$NODE_NB"
fi

if test "$THREAD_TYPE" != ""  ; then
add_arg "$THREAD_TYPE"
fi

if test "$LAUNCH" != ""  ; then
add_arg "--launcher=$LAUNCH"
fi

if test "$NET_TYPE" != ""  ; then
add_arg "$NET_TYPE"
fi

MPC_VERBOSE="--mpc-verbose=${MPC_VERBOSE}"
MPC_PROFILING="--profiling=${MPC_PROFILING}"

SCTK_ARGS="$SCTK_ARGS $VERSION_DETAILS $CHECKPOINT $RESTART $MIGRATION $MPC_VERBOSE $MPC_PROFILING"
if test "$MPC_MONO" = "1" ; then
SCTK_ARGS="$SCTK_ARGS --mono=$BINARY"
BINARY="mpc_mono"
fi

SCTK_ARGS="$SCTK_ARGS --sctk_use_port_number=0 --sctk_use_host=0 --sctk-args-end--"

if test "$mpi_only" = "yes" ; then
SCTK_ARGS=""
MPC_DISABLE="1"
PROCESS_NB="$TASK_NB"
NET_TYPE="--use-mpi"
fi


export PROCESS_NB

if test "$show" = "eval" ; then
    if test "@GNU_COMPATIBLE_WHICH@" = "1" ; then
	which -- $BINARY > /dev/null 2>&1
	if test "$?" != "0" ; then
	    mpcrun_error "Binary $BINARY not found"
	fi
    else
	which $BINARY > /dev/null 2>&1
	if test "$?" != "0" ; then
	    mpcrun_error "Binary $BINARY not found"
	fi
    fi
fi

TMP_SCTK_ARG="$SCTK_ARGS"
SCTK_ARGS=""
for arg in $TMP_SCTK_ARG; do
SCTK_ARGS="$SCTK_ARGS $arg"
done

MPC_STARTUP_ARGS="$SCTK_ARGS"
if test "$MPC_MONO" != "1" ; then
export MPC_STARTUP_ARGS
SCTK_ARGS=""
fi


export MPC_DISABLE

if test "$THREAD_TYPE" = "--use-pthread"; then 
    unset GDB_LIBTHREAD_DB
fi
if test "$THREAD_TYPE" = "--use-pthread_ng"; then 
    unset GDB_LIBTHREAD_DB
fi

if test "${DEBUG}" = "mpc-gdb"; then
    if test "$DEBUGGER_LIST" = "" ; then 
	DEBUG=gdb
    else
	DEBUG="${MPC_BIN_DIR}/../mpc-gdb-${DEBUGGER_LIST}/bin/mpc-gdb"
    fi
#    if test "$THREAD_TYPE" = "--use-pthread"; then 
#	DEBUG=gdb
#    fi
#    if test "$THREAD_TYPE" = "--use-pthread_ng"; then 
#	DEBUG=gdb
#    fi
fi

if test "$show" != "echo" ; then
#if test "$TMP_DIR_D" != "" ; then
#    mkdir -p ${TMP_DIR_D}
#fi
#echo "$0 $@" > ${TMP_DIR_D}mpcrun_args

if test "$MPC_VERBOSE" != "--mpc-verbose=0" ; then
if test "${DEBUG}" = "" ; then
echo "Using $LAUNCH" >&2
else
echo "Using $LAUNCH with `basename ${DEBUG}`" >&2
fi
fi

fi

debug_file="${TMP_DIR_D}debug_file"

#compute suffix
if test "$DEBUG" = "" ; then
	LAUNCH_SUFFIX="$LAUNCH"
else
echo "Using $DEBUG as debugger"
	LAUNCH_SUFFIX="${LAUNCH}_`basename ${DEBUG}`"
fi

#load launcher
if [ ! -z "${MPC_USER_LAUNCHERS}" ] && [ -e "${MPC_USER_LAUNCHERS}/mpcrun_${LAUNCH_SUFFIX}" ]; then
	. "${MPC_USER_LAUNCHERS}/mpcrun_${LAUNCH_SUFFIX}"
elif [ -e "${BINS_HOME}_${LAUNCH_SUFFIX}" ]; then
	. "${BINS_HOME}_${LAUNCH_SUFFIX}"
else
	echo "Invalid launcher : ${LAUNCH_SUFFIX}" 1>&2
	exit 1
fi

export MPC_LAUNCH_COMMAND="${LAUNCH_COMMAND}"

trap "kill -s 2 0" INT
#echo "LAUNCH_COMMAND $LAUNCH_COMMAND"
$show $LAUNCH_COMMAND
rc=$?
#echo $rc

rm -f $debug_file > /dev/null 2>&1

#if test "$mpi_only" = "yes" ; then

if test "$rc" = "0" ; then
rm -f ${TMP_DIR_D}mpcrun_args > /dev/null 2>&1
rmdir ${TMP_DIR_D} > /dev/null 2>&1
rm -rf ${TMP_DIR_D} > /dev/null 2>&1
fi

if test "$MPC_CLEAN_TMP_DIR" = "1" ;then
    rm -rf ${TMP_DIR_D} > /dev/null 2>&1
fi

exit $rc

