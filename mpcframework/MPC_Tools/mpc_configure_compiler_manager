#!/bin/sh
############################# MPC License ############################## 
# Wed Nov 19 15:19:19 CET 2008                                         # 
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          # 
#                                                                      # 
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            # 
# This file is part of the MPC Runtime.                                # 
#                                                                      # 
# This software is governed by the CeCILL-C license under French law   # 
# and abiding by the rules of distribution of free software.  You can  # 
# use, modify and/ or redistribute the software under the terms of     # 
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     # 
# following URL http://www.cecill.info.                                # 
#                                                                      # 
# The fact that you are presently reading this means that you have     # 
# had knowledge of the CeCILL-C license and that you accept its        # 
# terms.                                                               # 
#                                                                      # 
# Authors:                                                             # 
#   - PERACHE Marc marc.perache@cea.fr                                 # 
#   - CARRIBAULT Patrick patrick.carribault@cea.fr                     # 
#                                                                      # 
######################################################################## 

cat <<EOF > bin/mpc_compiler_manager
#!/bin/sh

list_languages="c cxx fortran"
CHECKSUM_TOOL=sha1sum

if test -z \${MPC_RPREFIX}; then
	echo "################################################################" 1>&2
	echo "# No MPC_RPREFIX defined. it is the root of the actual prefix  #" 1>&2
	echo "# You should source the mpcvars.sh file in root of MPC prefix  #" 1>&2
	echo "################################################################" 1>&2
	#attempt to guess MPC prefix = current script looks like PREFIX/host/target/bin/manager
	MPC_prefix=\`dirname \$0\`/../
	MPC_RPREFIX="\$MPC_prefix/../../"
else
	MPC_prefix=\$MPC_RPREFIX/\$MPC_SUBPREFIX/
fi

die()
{
	printf "\${RED}Error: \$@\n" 1>&2
	printf "\${RED}Error: Please see --help command.\${DEF}\n" 1>&2
	exit 1
}

clean_main_files()
{
	rm mpc_main.c mpc_main.cxx mpc_main.fortran mpc_main.o > /dev/null 2>&1
}

build_main_files()
{
cat <<EOFINT > mpc_main.c
int i; 
int main(int argc, char** argv){
return 0;
}
EOFINT

cat <<EOFINT > mpc_main.cxx
int i;
int main(int argc, char** argv){
return 0;
}
EOFINT

cat <<EOFINT > mpc_main.fortran
subroutine mpc_user_main
integer i
      end
EOFINT
}

hash_content()
{
	\$CHECKSUM_TOOL \$1 | cut -f1 -d" "
}

format_path()
{
	#special case: '1' means 'first'
	test "x\$1" = "x1" && echo "\$1" && return
	readlink -e \$1
}

is_valid_language()
{
	test -z "\`\echo \$list_languages | egrep "\$1"\`" && die "Language \${1} not known !"
}

help()
{
	printf "Usage: mpc_compiler_manager OPERATION LANGUAGE PATH FAMILY\n"
	printf "\n"
	printf "LANGUAGE belongs to {c,cxx,fortran} (default: c)\n"
	printf "PATH is the compiler path (default '1')\n"
	printf "FAMILY is the compiler type: INTEL, GNU... (default: GNU)\n"
	printf "OPERATION is one of the following:\n"
	printf "   \${BLU}list:\${DEF} shows, for each known compiler, the priv. support\n"
	printf "   \${BLU}stat:\${DEF} shows a summary for each language (number of compilers + priv. support)\n"
	printf "   \${BLU}list_default:\${DEF} list, for each language, the default compiler used\n"
	printf "   \n"
	printf "   \${BLU}add:\${DEF} adds a new compiler to the manager\n"
	printf "   \${BLU}del:\${DEF} removes a known compiler from the manager\n"
	printf "   \${BLU}set_default:\${DEF} set the given compiler as default (adds it first if not known)\n"
	printf "   \n"
	printf "   \${BLU}check:\${DEF} Verify compiler integrity against stored hash value.\n"
	printf "   \${BLU}help:\${DEF} Print this help.\n"
	printf "\n"
	printf "Extra options, which can be used in scripts to parse compilers:\n"
	printf "An special value for PATH can be set: '1' means 'the first compiler in the list'\n"	
	printf "   \${BLU}get:\${DEF} returns the compiler path if exist in configuration (lookup).\n"
	printf "   \${BLU}get_detail:\${DEF} like get, but returns all the data (lookup).\n"
	exit 0
}

#######################################
#for the following functions:
#\$1 = compiler path
#\$2 = privatization support
#\$3 = unique compiler hash

post_add_c()
{
	#nothing to do for now
	dummy=1
}

post_add_cxx()
{
	#nothing to do for now
	dummy=1
}

post_add_fortran()
{
	#rebuild Fortran modules and store them in HOME/.mpcompil/HASH/fmod
	test ! -f \$COMPILER_FILEPATH/fortran_gen/fortran_build.sh && die "Unable to generate Fortran module for \$1\n"
	mkdir -p \$COMPILER_FILEPATH/fmod/\$3
	printf "Compiling Fortran modules for the new compiler: \$1\n"


	#this is absolutely awful... 
	FLAGS="\$2 -I\$MPC_prefix/include/mpcframework $SCTK_CFLAGS -L\$MPC_prefix/lib $SCTK_LDFLAGS -B\$MPC_prefix/bin"
	CC="\`lookup_compiler c 1 | cut -f3 -d":"\` \$FLAGS -lmpc_framework"
	FC="\$1 \$FLAGS"

	MPC_MAKE_FORTRAN_INTERFACE=1 MPC_DISABLE_CONFIG=1 MPC_DISABLE_BANNER=1 sh \$COMPILER_FILEPATH/fortran_gen/fortran_build.sh "\$CC" "\$FC" "\$COMPILER_FILEPATH/fortran_gen/mpc_mpi.h" "\$COMPILER_FILEPATH/fmod/\$3/"
	test "x\$?" != "x0" && die "Error(s) during Fortran module building for \$1"
}



add_compiler()
{	
	test "x\$2" = "x1" && die "Can't add a compiler if you don't provide a path."
	test -z "\`which \${2} 2> /dev/null\`" && die "\${2} not found. Not added."
	hash="\`hash_content \$2\`"

	# -r: extended regexes
	# -e: run script
	# -n: does not create output (only matching w/ /p)
	exists="\`get_compilers_in "\$1" | sed -n -e "\\,^\$3:.*:\${2}:.*$,p"\`"

	if test -n "\$exists"; then 
		old_hash="\`echo "\$exists" | cut -f4 -d":"\`"
		test "\$old_hash" = "\$hash" && return; #compiler exists and does not need to be updated
	fi

	#inserting the compiler
	build_main_files

	case \$3 in
		GNU)
			PRIV_FLAG="-fmpc-privatize"
			;;
		INTEL)
			PRIV_FLAG="-mSYMTAB_mpc_privatize"
			;;
		PGI)
			PRIV_FLAG=""
			;;
		*)
			PRIV_FLAG=""
	esac

	\${2} \${PRIV_FLAG} -c mpc_main.\${1} > /dev/null 2>&1
	test "x\$?" != "x0" && PRIV_FLAG=""

	post_add_\${1} "\$2" "\$PRIV_FLAG" "\$hash"

	echo "\${3}:\${PRIV_FLAG}:\${2}:\${hash}" >> "\${COMPILER_FILEPATH}/.\${1}_compilers.cfg"
}

remove_compiler()
{
	test "x\$2" = "x1" && die "Can't remove a compiler if you don't provide a path."
	# -i: edit directly the file
	# -r: extended regexes
	# -e: exec script
	# "\,xxx,d": grep lines matching 'xxx' and remove them (using comma separator)
	sed -i -e "\\,^\$3:.*:\$2:.*$,d" \$COMPILER_FILEPATH/.\$1_compilers.cfg
}

set_default_compiler()
{
	# -r: extended regexes
	# -e: run script
	# -n: does output (only matching w/ /p)
	exists="\`get_compilers_in "\$1" | sed -n -e "\\,^\$3:.*:\${2}:.*$,p"\`"
	
	#add it if not already done (add_compiler() does some extra stuff).
	if test -z "\$exists"; then
		add_compiler "\${1}" "\$2" "\$3"
		exists="\`tail -n 1 \${COMPILER_FILEPATH}/.\${1}_compilers.cfg\`"
	fi

	#remove it (adding and then removing is not stupid: add() does some extra stuff)
	remove_compiler "\${1}" "\${2}" "\$3"
		
	#set the compiler as the first one
	sed -i "1i \${exists}" \${COMPILER_FILEPATH}/.\${1}_compilers.cfg
}

stat_compilers()
{
	for language in \${list_languages}
	do
		lang_file=\${COMPILER_FILEPATH}/.\${language}_compilers.cfg
		nb_compilers="\`cat \${lang_file} | wc -l\`"
		nb_priv="\`cat \${lang_file} | cut -d":" -f2 | wc -l\`"

		echo "MPC \${language} compiler supports \${GRE}\${nb_compilers}\${DEF} compilers,Â \${RED}\${nb_priv}\${DEF} of them are able to privatize."
	done
}

list_compilers()
{
	for line in \`get_all_compilers\`
	do
		family="\`echo \${line} | cut -d":" -f1\`"
		priv="\`echo \${line} | cut -d":" -f2\`"
		compiler="\`echo \${line} | cut -d":" -f3\`"
		hash="\`echo \${line} | cut -d":" -f4\`"

		if test -x \$compiler;
		then
			printf " * \${GRE}FOUND \${DEF}/"
			if test -n "\$priv";
			then
				printf "\${GRE} PRIV. SUPPORT OK \${DEF}"
			else
				printf "\${RED} NO PRIV. SUPPORT \${DEF}"
			fi
		else
			printf " * \${RED}NFOUND\${DEF}                   "
		fi

		printf "for (\${family}) \${compiler}\n"
	done
}

get_compilers_in()
{
	cat \${COMPILER_FILEPATH}/.\${1}_compilers.cfg
}

get_all_compilers()
{
	for language in \$list_languages
	do
		get_compilers_in \$language
	done
}

check_compilers()
{
	for line in \`get_all_compilers\`
	do
		compiler="\`echo \${line} | cut -d":" -f3\`"
		old_hash="\`echo \${line} | cut -d":" -f4\`"
		new_hash="\`hash_content \$compiler\`";
		if test "\$new_hash" != "\$old_hash"; then
			printf " * \${RED}MISMATCH\${DEF} hash"
		else
			printf " * \${GRE}Coherent\${DEF} hash"
		fi
		printf " for \$compiler\n"

	done
}

lookup_compiler()
{
	if test "\$2" = "1"; then #if the path is equal to 1 --> token: get first compiler
		get_first_compiler "\$1"
		return
	fi

	echo "\`get_compilers_in "\$1" | sed -n -e "\\,^.*:.*:\${2}:.*$,p"\`"
}

get_first_compiler()
{
	printf "\`head -n 1 \${COMPILER_FILEPATH}/.\${1}_compilers.cfg\`"
}

print_first_compilers()
{
	for language in \${list_languages}
	do
		printf " * Default \${BLU}\$language\${DEF} compiler: \`get_first_compiler \$language | cut -f3 -d":"\`\n"
	done
}

COMPILER_FILEPATH=\${MPC_RPREFIX}

if test -n "\$MANAGER_COLOR"; then
RED="\`printf "\033[1;31m"\`"
GRE="\`printf "\033[1;32m"\`"
BLU="\`printf "\033[1;36m"\`"
DEF="\`printf "\033[0;0m"\`"
fi

user_prefix=\$HOME/.mpcompil/\`echo \$MPC_RPREFIX | sed -e "s#//*#/#g" | hash_content \`
if test -f \$user_prefix/mpc_install_path -a -w \$user_prefix
then
	COMPILER_FILEPATH=\$user_prefix
fi

#default values
lang="c"
path="1"
family="GNU"

#retrieve args
test -n "\$2" && lang="\$2"
test -n "\$3" && path="\`format_path "\$3"\`"
test -n "\$4" && family="\$4"

test -z "\$1" && help

is_valid_language "\$lang"
test ! -e \$COMPILER_FILEPATH/.\${lang}_compilers.cfg && touch \$COMPILER_FILEPATH/.\${lang}_compilers.cfg 

case "\$1" in
	help|-help|--help|h|-h|--h)
		help
		;;
	get|g)
		lookup_compiler "\$lang" "\$path" | cut -f3 -d":"
		exit 0 # get() is a special command for mpc_* wrappers
		;;
	get_detail)
		lookup_compiler "\$lang" "\$path"
		exit 0 # get_detail() is a special command for mpc_* wrappers
		;;
	add|+|a)
		add_compiler "\$lang" "\$path" "\$family"		
		printf " * Added to \$lang compilers: \$path\n"
		;;
	remove|rem|rm|r|delete|del|d|-)
		remove_compiler "\$lang" "\$path" "\$family"		
		printf " * Removed from \$lang compilers: \$path\n"
		;;
	default|def|set_default)
		set_default_compiler "\$lang" "\$path" "\$family"		
		printf " * Set as \$lang default compiler: \$path\n"
		;;
	list|l)
		list_compilers
		;;
	list_first|lf|list_default|ld)
		print_first_compilers
		;;
	stat|-s)
		stat_compilers
		;;
	check|c)
		check_compilers
		;;
	config-path)
		echo "\$COMPILER_FILEPATH"
		exit 0
		;;
	*)
		die "Unknown rule: \"\$1\""
		;;
esac

printf "\nGlobal Info:\n"
printf "Read-only Installation located at \${BLU}\${MPC_RPREFIX}\${DEF}\n"
printf "Compiler Updates stored in \${GRE}\${COMPILER_FILEPATH}\${DEF}\n"

clean_main_files

exit 0
EOF
chmod 755 bin/mpc_compiler_manager
ln -sf mpc_compiler_manager bin/mpc_compiler_status
