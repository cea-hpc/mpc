#!/bin/sh

#import deps
. ${MPC_TEST_SOURCE_DIR}/UnitTests/tools/helper_svunittest.sh

#sources of the allocator without posix export
ALLOC_SOURCE_PATH="${MPC_TEST_SOURCE_DIR}/../mpcframework/MPC_Allocator/"
	
#Deps
OPENPA_PREFIX=${MPC_TARGET_INSTALL_PREFIX}
HWLOC_PREFIX=${MPC_TARGET_INSTALL_PREFIX}

#create dirs
mkdir -p ${MPC_TEST_CURRENT_WORK_DIR}/numa || exit 1
mkdir -p ${MPC_TEST_CURRENT_WORK_DIR}/uma || exit 1

#setup svunittest
helper_use_svunittest
if [ "${HAVE_SVUNITTEST}" = 'yes' ]; then
	SVUNITTEST_OPT="-DSVUNITTEST_PREFIX=${SVUNITTEST_PREFIX}"
else
	SVUNITTEST_OPT=''
fi

#use cmake
common_insert_test "compile_MPC_Allocator_numa" '0' "cd ${MPC_TEST_CURRENT_WORK_DIR}/numa && cmake -DCMAKE_BUILD_TYPE=Debug -DHWLOC_PREFIX=${HWLOC_PREFIX} -DOPENPA_PREFIX=${OPENPA_PREFIX} ${ALLOC_SOURCE_PATH} ${SVUNITTEST_OPT} && make"
common_insert_test "compile_MPC_Allocator_uma" '0' "cd ${MPC_TEST_CURRENT_WORK_DIR}/uma && cmake -DCMAKE_BUILD_TYPE=Debug -DDISABLE_LIBNUMA=yes -DOPENPA_PREFIX=${OPENPA_PREFIX} ${ALLOC_SOURCE_PATH} ${SVUNITTEST_OPT} && make"

#list of tests
ALLOC_TESTS="test_allocated_chunk \
	test_light_mm_src \
	test_rfq test_chunk_padding \
	test_mm_source_default \
	test_thread_pool \
	test_default_alloc_chain \
	test_posix_malloc \
	test_user_alloc_chain \
	test_full_alloc_chain \
	test_regions\
	test_malloc_on_node"

#short function to help to transmit -c information to scheduler for test which use OpenMP
#Maybe find a better way to do this
#Args :
#   - $1 : test name
#   - $2 : dep
#   - $3 : executable
#   - $* : options
run_alloc_test_with_max_cores()
{
	test_name="$1"
	test_dep="$2"
	test_exe="$3"
	shift 3
	COMMAND_OPTIONS="$@"
	helper_gen_exec_command "$test_exe" "-c=${CLUSTER_MAX_CORES_PER_NODE}"
	common_insert_test "$test_name" '0' "$command" "$test_dep"
}

#register tests
for mode in uma numa; do
	for test in $ALLOC_TESTS; do
		run_alloc_test_with_max_cores "${test}_${mode}" "compile_MPC_Allocator_${mode}" "${MPC_TEST_CURRENT_WORK_DIR}/${mode}/tests/${test}" "-m junit_xml -o output-${test}_${mode}.xml"
	done
	run_alloc_test_with_max_cores "test_mpscf_queue_${mode}" "compile_MPC_Allocator_${mode}" "${MPC_TEST_CURRENT_WORK_DIR}/${mode}/tests/test_mpscf_queue" "valid"
done
