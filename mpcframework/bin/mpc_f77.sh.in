#!/bin/sh

MPC_INSTALL_PREFIX=@prefix@


die()
{
	printf "Error: $@\n" 1>&2
	exit 2
}

#used to override option w/ compiler specific when option has been provided
# $1: var name
# $2: compiler-specific option
override_var_if_isset()
{
	content="`eval echo "$"${1}`"
	if [ ! -z "${content}" ]
	then
		content="${2}"
	else
		content=""
	fi

	eval "${1}=${content}"
}

print_if_stdout()
{
    >&2 printf "$@"
}

#Used by nvcc to automatically blacklist some var patterns
preprocess_main()
{
echo ""
}
############################# MPC License ##############################
# Wed Nov 19 15:19:19 CET 2008                                         #
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
#                                                                      #
# IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
# This file is part of the MPC Runtime.                                #
#                                                                      #
# This software is governed by the CeCILL-C license under French law   #
# and abiding by the rules of distribution of free software.  You can  #
# use, modify and/ or redistribute the software under the terms of     #
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
# following URL http://www.cecill.info.                                #
#                                                                      #
# The fact that you are presently reading this means that you have     #
# had knowledge of the CeCILL-C license and that you accept its        #
# terms.                                                               #
#                                                                      #
# Authors:                                                             #
#   - PERACHE Marc marc.perache@cea.fr                                 #
#   - CARRIBAULT Patrick patrick.carribault@cea.fr                     #
#                                                                      #
########################################################################
FORTRAN_START="/tmp/tmp_mpc_fortran_$$.f"
FORTRAN_OBJ="/tmp/tmp_mpc_fortran_$$.o"

#echo "$FORTRAN_START $FORTRAN_OBJ"

cat <<THIS_EOF > $FORTRAN_START
! ############################# MPC License ##############################
! # Wed Nov 19 15:19:19 CET 2008                                         #
! # Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
! #                                                                      #
! # IDDN.FR.001.230040.000.S.P.2007.000.10000                            #
! # This file is part of the MPC Runtime.                                #
! #                                                                      #
! # This software is governed by the CeCILL-C license under French law   #
! # and abiding by the rules of distribution of free software.  You can  #
! # use, modify and/ or redistribute the software under the terms of     #
! # the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
! # following URL http://www.cecill.info.                                #
! #                                                                      #
! # The fact that you are presently reading this means that you have     #
! # had knowledge of the CeCILL-C license and that you accept its        #
! # terms.                                                               #
! #                                                                      #
! # Authors:                                                             #
! #   - PERACHE Marc marc.perache@cea.fr                                 #
! #   - CARRIBAULT Patrick patrick.carribault@cea.fr                     #
! ########################################################################
      subroutine mpc_user_main_
      call mpc_user_main()
      end

      program main
      call mpc_start()
      call exit(0)
      end
THIS_EOF
FFLAGS=" -fPIC"
MPC_COMPILER_CFLAGS=
MPC_MANAGER=${MPC_INSTALL_PREFIX}/bin/mpc_compiler_manager
HOME_FILEPATH=$MPC_INSTALL_PREFIX
CC="`$MPC_MANAGER get fortran 1`"

if test "$MPC_MAKEFILE" != "" ; then 
LIB_PATH=""
fi
config_temp=`$MPC_MANAGER config-path`
if test -r $config_temp; then
	HOME_FILEPATH=$config_temp
fi

# This variable is updated to 'echo' when '-show' is active
Show=eval

# Do we have to link eventually?
linking=yes

# Are we using the pre-processor ? default to NO until seeing -E
preprocessor=no

# All args concerning the compiling process (w/out mpc_cc-related options)
allargs=""

# Name of the output filename if the option '-o' is set
output_filename=""
output_file=""
next_arg_is_output=no
OUTPUT_FILE_ARGS=""
PRIV_FLAG="-fmpc-privatize"
EXTRA_ADDON_FLAGS=""
unset MPC_DISABLE_TLS_OPT
NO_TLS_OPT=0
MPC_HEADER_INCLUDE="-include mpc_main.h"
OMP_FLAG=""
for arg in "$@" ; do
    # Set addarg to no if this arg should be ignored by the C compiler
    addarg=yes
    qarg=$arg

    if [ $next_arg_is_output = yes ] ; then
      output_filename=$qarg
      next_arg_is_output=no
      OUTPUT_FILE_ARGS="-o $qarg"

#       allargs="$allargs $qarg"
      continue
    fi

    case $arg in
        # ----------------------------------------------------------------
        # Compiler options that affect whether we are linking or not
    -E)
    preprocessor=yes
    linking=no
    ;;
    -c|-S|-M|-MM)
    # The compiler links by default
    linking=no
    ;;

    -cc=*)
    CC=`echo A$arg | sed -e 's/^A-cc=//g'`
	CC=`which ${CC} || echo ${CC}`
    addarg=no
    MPC_COMPILER_CFLAGS=""
    ;;

    -o)
    next_arg_is_output=yes
    addarg=no
    ;;

    -threads)
    CFLAGS="$CFLAGS -threads"
    ;;
--showme:link)
SHOW_LINK="1"
SHOW_ARGS="1"
		addarg=no
;;
--showme:compile)
SHOW_COMPILE="1"
SHOW_ARGS="1"
		addarg=no
;;
--showme:command)
SHOW_COMMAND="1"
SHOW_ARGS="1"
		addarg=no
;;
--use:command)
USE_COMMAND="1"
		addarg=no
;;
	-fmpc-privatize|-fmpcprivatize|-f-mpc-privatize)
		PRIV_FLAG="$arg"
    	addarg=no
	;;
	-fno-mpc-privatize|-fno-mpc-privatize|-fnompc-privatize|-fnompcprivatize)
		PRIV_FLAG=""
		addarg=no
	;;
	-fno-mpc-plugin)
		unset MPC_DYN_PRIV_ENABLED
		addarg=no
	;;
	-fmpc-dyninsert|-fmpc-dyn-insert)
		export MPC_DYN_INSERT=1
		addarg=no
	;;
	-fmpc-notlsopt|-fmpc-no-tlsopt)
		NO_TLS_OPT=1
		addarg=no
	;;
	-fmpc-include)
		#nothing to do, if not fortran, '-include mpc_main.h' is automatically forwarded
		#This is due to order : '-include' should be set after sources files
		MPC_HEADER_INCLUDE="${MPC_HEADER_INCLUDE} -include mpc_main.h"
		addarg=no
	;;
	-fno-mpc-include)
		MPC_HEADER_INCLUDE=""
		addarg=no
	;;
	-fopenmp|-openmp)
		OMP_FLAG="$arg"
		addarg=no
	;;
	-fno-openmp|-fnoopenmp|-no-openmp|-noopenmp)
		OMP_FLAG=""
		addarg=no
	;;
	-compilers|--compilers)
		content="`$MPC_MANAGER list 2>&1`"
		print_if_stdout "$content\n"
		exit 0
		;;

	-cuda)
		EXTRA_ADDON_FLAGS="-L${MPC_INSTALL_PREFIX}/lib/stubs -Wl,-rpath=${MPC_INSTALL_PREFIX}/lib/stubs -lmpc_cuda_addon -Wl,--unresolved-symbols=ignore-in-shared-libs"
		addarg=no
	;;

    -show)
    addarg=no
    Show=echo
    ;;

    # Verbose mode
    -v)
    # Pass this argument to the pre-compiler/compiler as well.
    echo "mpc_cc for $MPC_VERSION"
    ;;

    # Help
    -help)
    ;;

    *)
	qarg="'$arg'"
    ;;

    esac

    # Update compiler arguments
    if [ $addarg = yes ] ; then
        # Thanks to Bernd Mohr for the following that handles quotes and spaces (see configure for explanation)
        modarg=`echo "x$arg" | sed -e 's/^x//' -e 's/"/\\\"/g' -e s,\',%@%\',g -e 's/%@%/\\\/g' -e 's/ /\\\ /g' -e 's#(#\\\(#g' -e 's#)#\\\)#g'`
        allargs="$allargs $modarg"
    fi
done

if test "$USE_COMMAND" = "1"; then 
MPC_HEADER_INCLUDE=""
PRIV_FLAG=""
fi

#When using the preprocessor do not include files
if test "$preprocessor" = "yes"; then
	MPC_HEADER_INCLUDE=""
fi

is_defined="`$MPC_MANAGER get_detail fortran ${CC}`"

#if CC is not present in MPC compiler configuration file
if test -z "${is_defined}";
then
        if test "0" = "1" ; then 
                PRIV_FLAG=""
        else
		print_if_stdout "Warning: ${CC} not known: Adding it\n"
		${MPC_INSTALL_PREFIX}/bin/mpc_compiler_manager add fortran "${CC}" > /dev/null
		test "x$?" != "x0" && die "Unable to add $CC (because of errors above). Stop."
		is_defined="`$MPC_MANAGER get_detail fortran ${CC}`"
        fi
fi

CC_FAMILY="`echo ${is_defined} | cut -d":" -f1`"
CC_PRIV="`echo ${is_defined} | cut -d":" -f2`"
CC="`echo ${is_defined} | cut -d":" -f3`"
CC_HASH="`echo ${is_defined} | cut -d":" -f4`"

#if CC does not support privatization and user provides privatization option
if test -n "${PRIV_FLAG}" -a -z "${CC_PRIV}";
then
if test "0" != "1" ; then 
	print_if_stdout "Warning: '${CC}' does not support privatization. Disabling it.\n"
	print_if_stdout "Warning: Do not consider using this compiler in thread-based mode.\n"
fi
	PRIV_FLAG=""
else
	#handle compiler-specific options depending on compiler family
	case ${CC_FAMILY} in
		INTEL)
			override_var_if_isset 'PRIV_FLAG' '-mSYMTAB_mpc_privatize'
			override_var_if_isset 'OMP_FLAG' '-qopenmp'
        		FFLAGS="${FFLAGS} -threads -recursive"
			MPC_USE_INTEL_COMPILER="1"
			export MPC_USE_INTEL_COMPILER
			;;
		GNU)
			override_var_if_isset 'PRIV_FLAG' '-fmpc-privatize'
			override_var_if_isset 'OMP_FLAG' '-fopenmp'
			;;
		*)
			#Nothing to do, vars set by user option
			;;
	esac
fi

#Do we need to disable TLS optimizations ?
if test "x${NO_TLS_OPT}" = "x1"; then
	echo "INFO : TLS optimization disabled" 1>&2
	export MPC_DISABLE_TLS_OPT=1
fi

#we need to add -DMPC_PRIVATIZED when privatisation is enabled in order to compile deps (like getopt...)
if test ! -z "${PRIV_FLAG}";
then
	CC_HASH="$CC_HASH/priv"
	PRIV_FLAG="${PRIV_FLAG} -DMPC_PRIVATIZED"
else
	#Without privatization the plugin is useless
	LIBPRIV_FLAG=""
	CC_HASH="$CC_HASH/npriv"
fi

#Here we prepend the path which is normally postpended in order
#to override binutils during the compilation
export PATH=${MPC_INSTALL_PREFIX}/bin/:${PATH}

#Used to avoid header global variable privatization when libraries are not privatized
#mpcmp.h and mpcmicrothread.h have been recopied from GCC patch
MPC_UNPRIVATIZED_FILES="${MPC_UNPRIVATIZED_FILES}:mpcmp.h:mpcmicrothread.h:ompt.h:"
MPC_UNPRIVATIZED_VARS="${MPC_UNPRIVATIZED_VARS}:`preprocess_main`"

custompath=""
custompath="$HOME_FILEPATH/$CC_HASH/"
MPC_UNPRIVATIZED_VARS="${MPC_UNPRIVATIZED_VARS}:mpi_status_ignore:mpi_statuses_ignore:mpi_in_place"

export MPC_UNPRIVATIZED_FILES
export MPC_UNPRIVATIZED_VARS

#first definition of compiler & linking flags
CFLAGS="`${MPC_INSTALL_PREFIX}/bin/mpc_cflags fortran $custompath`"
LDFLAGS="`${MPC_INSTALL_PREFIX}/bin/mpc_ldflags fortran $custompath`"
LDFLAGS="$EXTRA_ADDON_FLAGS $LDFLAGS"


#override flags when patched binutils are used
LDFLAGS="${LDFLAGS} -B${MPC_INSTALL_PREFIX}/bin"
#used to append compiler-specific flags
CFLAGS="$CFLAGS ${PRIV_FLAG} ${OMP_FLAG} $MPC_COMPILER_CFLAGS ${LIBPRIV_FLAG}"
CFLAGS_FORTRAN_START="${PRIV_FLAG} $MPC_COMPILER_CFLAGS ${LIBPRIV_FLAG}"
LDFLAGS="${LDFLAGS}"

if [ "$linking" = yes ] ; then
    $Show $CC $FFLAGS $CFLAGS_FORTRAN_START -c $FORTRAN_START -o $FORTRAN_OBJ
    rc=$?
    if test "$rc" != "0" ; then 
        exit $rc
    fi

    # FROM HERE, We want to replace main() fortran symbol in each fortran file (object or source)
    # 3 cases occur
    # - at least one .o exposes a symbol MAIN -> to be replaced and FORTRAN_OBJ has to be loaded
    # - at least one .o exposes a symbol mpc_user_main -> nothing to do but FORTRAN_OBJ has to be loaded
    # - No .o do not provide any MAIN* symbol -> remove FORTRAN_OBJ, nothing indicating its a program (lib?)

    ##########################################
    # Check if object in $1 contains symbol $2
    has_symbol ()
    {
	    if test -f "${1}"
	    then
		    # nm -P -> Posix formating (start w/ symbol name)
		    nb=`nm -P "${1}" | egrep "^${2} " | wc -l`
		    if test "x${nb}" = "x1"
		    then
			    HAS_SYMBOL=1
			    return
		    fi
	    fi

	    HAS_SYMBOL=0
    }

    ##########################################
    # Replace symbol $2 by $3 for the object file $1
    rename_sym ()
    {
	    objcopy --redefine-sym ${2}=${3} "${1}"
    }

    ##########################################
    # Replace any main* symbol in $1 object file.
    # this includes:
    # - the MAIN call
    # - any outlined OpenMP rountines, which could be located in MAIN function
    rename_main_symbols ()
    {
	    # rename the MAIN
	    rename_sym "${1}" "MAIN__" "mpc_user_main_"
	    objcopy --globalize-symbol="mpc_user_main_" "${1}"

	    #rename OpenMP outlined routines
	    index=0
	    has_symbol "${1}" "MAIN__._omp_fn.${index}"

	    while test "x${HAS_SYMBOL}" = "x1"
	    do
		    rename_sym "${1}" "MAIN__._omp_fn.${index}" "mpc_user_main_._omp_fn.${index}"
		    index=`expr ${index} + 1`

		    has_symbol "${1}" "MAIN__._omp_fn.${index}"

	    done

	    # Remove the main
	    objcopy --strip-symbol main "${1}"
    }

    ##########################################
    # Checks if the $1 file ends with $2 (return 0 means "OK it's good")
    has_ext ()
    {
	    case "$1" in
		    *$2) return 0;;
		    *) return 1;;
	    esac
    }
    
    MAIN_NEEDED=0
    SOURCE_FILES=""
    OBJECT_FILES=""
    ARGS_NO_SOURCES=""
    # First walk through objects and modify the main one and identify sourcefiles given on link command line
    for arg in $allargs
    do
	    addarg=1
	    unquotedarg="$(eval echo $arg)"
	    #Is it a file ?
	    if test -f "$unquotedarg"
	    then
		    #Is is an object file ?
		    if has_ext "${unquotedarg}" ".o"
		    then
			    #It is an object file, but is it the real main ?
			    has_symbol "${unquotedarg}" "MAIN__"
			    if test "x${HAS_SYMBOL}" = "x1"
			    then
				    MAIN_NEEDED=1
				    #This is main, rename the symbol(s)
				    $Show rename_main_symbols "${unquotedarg}"

			    else # Ok, not a real MAIN__ symbol but what about mpc_user_main_ ? (backward compatibility)
				    # In this case, we need FORTRAN_OBJ but not to rename the main() symbol
				    has_symbol "${unquotedarg}" "mpc_user_main_"
				    test "x${HAS_SYMBOL}" = "x1" && MAIN_NEEDED=1
			    fi
		    else
			    #This is a file, but not an object... is it a Fortran source file ?
			    for ext in .f .F .f90 .F90 .f08 .F08 .for .FOR .fpp .FPP .r
			    do
				    if has_ext "${unquotedarg}" "${ext}"
				    then
					    addarg=0
					    # This is a Fortran source file, store it...
					    SOURCE_FILES="${SOURCE_FILES} ${unquotedarg}"
					    break
				    fi
			    done
		    fi
	    fi
	    if [ ${addarg} -eq 1 ]
	    then
		    ARGS_NO_SOURCES="${ARGS_NO_SOURCES} ${arg}"
	    fi
    done

    if test "$SHOW_ARGS" = "1" ; then 
	    if test "$SHOW_COMPILE" = "1"; then 
		    echo $FFLAGS $CFLAGS
	    fi 
	    if test "$SHOW_LINK" = "1"; then 
		    echo $LIB_PATH $LDFLAGS
	    fi 
	    if test "$SHOW_COMMAND" = "1"; then 
		    echo $CC
	    fi 
    else
	    if test "$USE_COMMAND" = "1"; then 
		    LIB_PATH=""
		    LDFLAGS=""
		    CFLAGS=""
		    FFLAGS=""
	    fi 
	    # If there are some source files on command line
	    if test -n "${SOURCE_FILES}"
	    then
		    for source_file in ${SOURCE_FILES}
		    do
			    object_file=$(mktemp --suffix=.o)
			    $Show $CC $LIB_PATH $LDFLAGS $FFLAGS $CFLAGS ${ARGS_NO_SOURCES} $LDFLAGS "${source_file}" -c -o "${object_file}"
			    # Is this object (ie. source file) owning a real main symbol ?
			    has_symbol "${object_file}" "MAIN__"
			    if test "x${HAS_SYMBOL}" = "x1"
			    then
				    #This is main, rename the symbol(s) (not reached is Show is echo...)
				    MAIN_NEEDED=1
				    $Show rename_main_symbols "${object_file}"
			    
			    else # Ok, not a real MAIN__ symbol but what about mpc_user_main_ ? (backward compatibility)
				    # In this case, we need FORTRAN_OBJ but not to rename the main() symbol
				    has_symbol "${object_file}" "mpc_user_main_"
				    test "x${HAS_SYMBOL}" = "x1" && MAIN_NEEDED=1
			    fi
			    OBJECT_FILES="${OBJECT_FILES} '${object_file}'"
		    done
	    fi

	    if test "x${MAIN_NEEDED}" = "x0"
	    then
		    #No main() ? probably a lib or module to build -> no need to inject FORTRAN_OBJ
		    FORTRAN_OBJ=""
	    fi
	    #otherwise, FORTRAN_OBJ discard user MAIN() and create a new one calling mpc_start()

	    $Show $CC $LIB_PATH $FORTRAN_OBJ $LDFLAGS $FFLAGS $CFLAGS $ARGS_NO_SOURCES ${OBJECT_FILES} $LDFLAGS ${OUTPUT_FILE_ARGS}
	    rc=$?
	    $Show rm -f $FORTRAN_OBJ ${OBJECT_FILES} $FORTRAN_START
	    if test "$rc" != "0" ; then
		    exit $rc
	    fi
    fi
    $Show rm -f $FORTRAN_OBJ
else
    $Show $CC $FFLAGS $CFLAGS $allargs ${OUTPUT_FILE_ARGS}
    rc=$?
fi

rm -f $FORTRAN_START > /dev/null 2>&1 

exit $rc

