Multi-Processor Computing framework (MPC)
=========================================

General Installation guide
--------------------------

Please refer to the [GettingStarted.pdf](http://mpc.paratools.com/Documentation) document for general installation.
    
Cross-compilation Installation guide
------------------------------------

### Prerequisites

* __General__:
  * You need to install MPC for the architecture you will target _AND_ for the architecture from which you will launch your programs. For instance, __For ARM architecture__: a cross-compiled gcc which generate code for ARM architecture.
  * The prefix for both installations has to be on the same.

* __For ARM architecture__: a cross-compiled gcc which generate code for ARM architecture
* __For MIC architecture__: the Intel Compiler suite and the Intel libraries ([Intel MPSS](https://software.intel.com/en-us/articles/intel-manycore-platform-software-stack-mpss))

          
### Cross-Compilation, ARM example

1.	Cross-compile gcc for the targeted architecture
2.	Launch the _installmpc_ script for the targeted architecture:
		
        $ ./installmpc --prefix=$HOME/install-mpc --with-mpc-gcc=prefix --target=arm

    _prefix_ is the path of your cross-compiled gcc (for ARM architecture in this case)
           
2.	Source the _mpcvars_ script at the root of your MPC installation prefix
	
        $ . $HOME/install-mpc/mpcvars.sh for sh shells
        $ source $HOME/install-mpc/mpcvars.sh for bash shells 
        $ source $HOME/install-mpc/mpcvars.csh for csh or tcsh shells
		
    This will load the MPC environment for the current architecture you are using.  
    You can force to load the environment for the targeted architecture:
		
        $ source $HOME/install-mpc/mpcvars.sh arm

3.	To compile your first MPC program for a particular architecture, you may execute the *mpc\_cc* compiler on the host:

    If you loaded the _target_ environment:

        $ mpc_cc main.c -o main 
    
    If you loaded the _host_ environment:

        $ mpc_cc -target=arm main.c -o main.mic 

4.	Execute your binary with _mpcrun_ command:  
    
        $ mpcrun -n=4 ./main


### MIC Compilation (with _icc_ support)

1.  Load Intel modules (_icc_, _libraries_, etc) in your environment.
2.  Launch the __installmpc__ script for the MIC:

        $ ./installmpc --prefix=$HOME/install-mpc --target=mic --compiler=icc  
          --arch-library-path=(Path to Intel lib for mic architecture) --disable-mpc-gcc 
          --disable-mpc-gdb --with-sysroot=(path to the MPSS directory)
        
    __--target=mic__: specify the target architecture. You can either use _--target=mic_ or _--target=k1om_.  
    __--compiler=icc__: specify the compiler to be used by MPC. Here _icc_ has to be selected.  
    __--arch-library-path=path__: specify the path of libraries used for the target architecture.  
        
    __Note:__ Do not forget to add _--disable-mpc-gcc_ and _--disable-mpc-gdb_ options to the installmpc script.  
    You could have errors installing these two programs with icc.
        
3.  Source the _mpcvars_ script located in the root directory of your MPC installation prefix
  
        $ . $HOME/install-mpc/mpcvars.sh for sh shells 
        $ source $HOME/install-mpc/mpcvars.sh for bash shells 
        $ source $HOME/install-mpc/mpcvars.csh for csh or tcsh shells
    
    This will load the MPC environment for the current architecture. 
    You can force to load the environment for the MIC architecture by typing:
    
        $ source $HOME/install-mpc/mpcvars.sh k1om

4.  To compile your first MPC program for a MIC architecture, you may execute the *mpc\_cc* compiler:

    If you loaded the MIC environment:

        $ mpc_cc main.c -o main.mic 

    If you loaded the host environment:

        $ mpc_cc -target=k1om main.c -o main.mic 

5.  Execute your MPC program:

  * __Homogeneous launch:__  
    * Compile your code for the MIC architecture (main.mic)
    * Create config.cfg file:

              -host mic0 -p 1 ./main.mic
    * Launch the binary with the _mpcrun_ script:

              $ mpcrun -p=1 -n=4 -net=tcp -l=mic_hybrid --mic-config=config.cfg

          **-l=mic\_hybrid**: load the mic launcher  
          __--mic-config=*__: load the config file for launch  
          Note that your process number have to be the same in _config.cfg_ and launch command

  * __Heterogeneous launch:__
    * Compile your code for the MIC architecture (_main.mic_) as well as for the host architecture (_main.host_)  
    * Create config.cfg file:

              -host knc02 -p 4 ./main.host
              -host mic0  -p 3 ./main.mic
              -host mic1  -p 2 ./main.mic
    * Launch the binaries with the _mpcrun_ script:

              $ mpcrun -p=9 -n=16 -net=tcp -l=mic_hybrid  
                --mic-config=config.cfg --mic-nb-task=5 --nb-mic=2 --nb-host=1 --host-nb-task=6

          __--nb-mic=\*__: number of MIC devices for the launch (optional)  
          __--nb-host=\*__: number of host devices for the launch (optional)  
          __--mic-nb-task=\*__: number of tasks per MIC device (optional)  
          __--host-nb-task=\*__: number of tasks per host device (optional)  
          _If these options are not specified, the repartition of the tasks on the processes is homogeneous._
